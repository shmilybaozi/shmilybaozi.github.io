{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/indigo/source/css/style.less","path":"css/style.less","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/brand.jpg","path":"img/brand.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/cc.png","path":"img/cc.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/main.min.js","path":"js/main.min.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/search.min.js","path":"js/search.min.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/alipay.png","path":"img/alipay.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/wechat.png","path":"img/wechat.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","path":"css/fonts/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","path":"css/fonts/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","path":"css/fonts/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","path":"css/fonts/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","path":"css/fonts/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","path":"css/fonts/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","path":"css/fonts/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","path":"css/fonts/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","path":"css/fonts/roboto/Roboto-Thin.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","path":"css/fonts/roboto/Roboto-Thin.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","path":"css/fonts/roboto/Roboto-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","path":"css/fonts/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","path":"css/fonts/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","path":"css/fonts/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","path":"css/fonts/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","path":"css/fonts/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","path":"css/fonts/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","path":"css/fonts/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","path":"css/fonts/roboto/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","path":"css/fonts/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/indigo/.editorconfig","hash":"67a03b88eadd7810f2e01866e73814074ecd3b87","modified":1540707960543},{"_id":"themes/indigo/.gitignore","hash":"da3f11528aa77a26688498709b5a12eb39586c5d","modified":1540707960544},{"_id":"themes/indigo/LICENSE","hash":"9dd0f70bc72c9d575447655526aded395bb93754","modified":1540707960544},{"_id":"themes/indigo/README.md","hash":"cfc7d09fc2ce26003954d647e3bbf98f71574eb7","modified":1540707960545},{"_id":"themes/indigo/_config.yml","hash":"26c65619b705b1e8aa7c127f4eb38382eacd6e5e","modified":1541002201658},{"_id":"themes/indigo/package.json","hash":"3ad9b9ccb1ddaad3136f179a7ebff7d7b1c193f7","modified":1540707960581},{"_id":"source/_posts/Git更新与推送流程.md","hash":"dcfc52c88a07f7f4ec08e1e94a6b9afb375df166","modified":1541428680090},{"_id":"source/_posts/Vue中使用Webpack总结.md","hash":"227294bef96064921619e74816ac0ae05bad38a0","modified":1541429593350},{"_id":"source/_posts/Yarn和NPM命令.md","hash":"92c557920f81b8bab608c112c67bf8103d9f6033","modified":1541428637234},{"_id":"source/_posts/hexo文章模板设置.md","hash":"a00b4c765e7e04cf8c500141722674f603e52d4a","modified":1541433872129},{"_id":"source/_posts/path.join和path.resolve区别.md","hash":"ff165fd2d01d9849a173c9b50e956301df439bde","modified":1541433367229},{"_id":"source/_posts/src目录结构分析.md","hash":"74b1553428ff92781a28163b7ef5822f02bf2b3f","modified":1541428423820},{"_id":"source/_posts/前端开发环境配置.md","hash":"56be97fa187ee2c5949281e95409e436cda8c0b0","modified":1540707960538},{"_id":"source/about/index.md","hash":"e385a1ab8731c160b3d5d199c7256bed692594aa","modified":1540707960539},{"_id":"source/categories/index.md","hash":"37494a069ac7cb7b557570039fd93779821d8fd2","modified":1540707960540},{"_id":"source/timeline/index.md","hash":"02933db69f6f140fc92432021b2a71c8413b5c90","modified":1540707960542},{"_id":"source/tags/index.md","hash":"450f6027fc98b10331fce2c4eb13db5df9255f59","modified":1540707960541},{"_id":"themes/indigo/languages/en.yml","hash":"ba78def0453d08172248e220a1f9e145e99b4f23","modified":1540707960547},{"_id":"themes/indigo/languages/ja.yml","hash":"65a32717335211a45771a21fb7d7778808c6f0aa","modified":1540707960547},{"_id":"themes/indigo/languages/nl-NL","hash":"b540b76af76c1a180c517089ed2ad770cbded170","modified":1540707960548},{"_id":"themes/indigo/languages/zh-CN.yml","hash":"6806e4c305facf19cbe4e37ccc5d6b00cb56e199","modified":1540707960548},{"_id":"themes/indigo/languages/zh-TW.yml","hash":"9b8bdd9c8b68716f364503926dca6ba8571ee5ff","modified":1540707960549},{"_id":"themes/indigo/layout/categories.ejs","hash":"efae06b4d83aaf73ab93260381e891825bf404ac","modified":1540707960577},{"_id":"themes/indigo/layout/archive.ejs","hash":"6897178ba358379d6a4b7c0ba1bc2ab97ad5303a","modified":1540707960576},{"_id":"themes/indigo/layout/category.ejs","hash":"e5ba5cc2e092c199285b8097ef12ffe70bf84c91","modified":1540707960577},{"_id":"themes/indigo/layout/index.ejs","hash":"772c1985c7743e101598b4eddc253f9174c5605b","modified":1540707960578},{"_id":"themes/indigo/layout/layout.ejs","hash":"770af84fff104c398ce8b6c995130cddd3e9a1e9","modified":1540707960579},{"_id":"themes/indigo/layout/page.ejs","hash":"567c42b978da4c39b8b4982df19b940c26bc32a4","modified":1540707960579},{"_id":"themes/indigo/layout/post.ejs","hash":"efc3352828351f8574c51e8a93dc56c66660c3b1","modified":1540707960580},{"_id":"themes/indigo/layout/tags.ejs","hash":"1fc0461e9602b53899ec756e4361beb8cce74740","modified":1540707960581},{"_id":"themes/indigo/layout/tag.ejs","hash":"90a231dea3a364b329a740e5d6c49c8cf5664fe9","modified":1540707960580},{"_id":"themes/indigo/scripts/plugins.js","hash":"00ea278ea77733f546439aed507ce69a298da362","modified":1540707960582},{"_id":"themes/indigo/layout/_partial/after-footer.ejs","hash":"1351dbfca311f0d50a939f9e1a91c4f65bbcdf5f","modified":1540707960550},{"_id":"themes/indigo/layout/_partial/footer.ejs","hash":"c78444f5b350ca79b260361bf3e5b6361d2661ba","modified":1540707960551},{"_id":"themes/indigo/layout/_partial/head.ejs","hash":"9dfc591ec6c918c5b60b6ccbc5d1e18fea9faf8e","modified":1540707960552},{"_id":"themes/indigo/layout/_partial/archive.ejs","hash":"c294c98617ce14082f9b3d5eec83328f480f5597","modified":1540707960551},{"_id":"themes/indigo/layout/_partial/header.ejs","hash":"648db446567a81371b8a29d719d13636aa157012","modified":1540707960553},{"_id":"themes/indigo/layout/_partial/loading.ejs","hash":"8b3e037dd5f3d4564012689c5cd6f63caf73df0f","modified":1540707960554},{"_id":"themes/indigo/layout/_partial/index-item.ejs","hash":"7208d4083ee3355aa969972a2ce249a67d56b3a6","modified":1540707960554},{"_id":"themes/indigo/layout/_partial/menu.ejs","hash":"ea6aded24a68de0914f24b3760f766b5e1c9835a","modified":1540707960555},{"_id":"themes/indigo/layout/_partial/paginator.ejs","hash":"13952250463f70d1c1bbbfdd7f4ee8160dd6d99b","modified":1540707960556},{"_id":"themes/indigo/layout/_partial/script.ejs","hash":"31052bc524a10abd6871aed2415448ce585faff2","modified":1540707960574},{"_id":"themes/indigo/layout/_partial/post.ejs","hash":"20597ac0d547aea37680ecf195eb129fe5ee19d8","modified":1540707960564},{"_id":"themes/indigo/layout/_partial/tags-bar.ejs","hash":"30ec74f081cc4c273a7bcd5d57da99072e9f0755","modified":1540707960576},{"_id":"themes/indigo/layout/_partial/search.ejs","hash":"752109904304fdb8e988ee1254df2af9c0701466","modified":1540707960575},{"_id":"themes/indigo/source/css/style.less","hash":"cf362925ae099b810fd5763e6b724b823612ed15","modified":1540707960636},{"_id":"themes/indigo/source/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1540707960673},{"_id":"themes/indigo/source/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1540707960674},{"_id":"themes/indigo/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1540707960681},{"_id":"themes/indigo/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1540707960682},{"_id":"themes/indigo/source/js/main.js","hash":"ff44bb7b2f1f08757093fd6ffa92c9ac2b674109","modified":1540707960685},{"_id":"themes/indigo/source/js/main.min.js","hash":"e77a89fe5a9827ac590a288778176b233dd900ad","modified":1540707960686},{"_id":"themes/indigo/source/js/search.js","hash":"a4d6c9c566ec1ca71ddacfd14c58f7ddaf9db24d","modified":1540707960687},{"_id":"themes/indigo/source/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1540707960688},{"_id":"themes/indigo/source/img/alipay.png","hash":"6923f412b20b050040cb471e818d82285ecb1b8a","modified":1540707960639},{"_id":"themes/indigo/layout/_partial/plugins/baidu.ejs","hash":"da1355eea131952031e54c45560555e6d3aa5a33","modified":1540707960557},{"_id":"themes/indigo/layout/_partial/plugins/disqus.ejs","hash":"86fe837ab16cb60754b0a73bb9efa38b04f3023f","modified":1540707960557},{"_id":"themes/indigo/layout/_partial/plugins/dynamic-title.ejs","hash":"3b877868c4a6fc217ea6f3314544830280a77472","modified":1540707960558},{"_id":"themes/indigo/layout/_partial/plugins/gitment.ejs","hash":"5f6ceb7f4b9b579e8e3f87894447f556a53f9385","modified":1540707960559},{"_id":"themes/indigo/layout/_partial/plugins/google-analytics.ejs","hash":"b5b87761751a897949e085a8f1ace78b0b8babd5","modified":1540707960559},{"_id":"themes/indigo/layout/_partial/plugins/hyper-comments.ejs","hash":"d0e6f1d713e7a1c0cc5fe25f3e574a4b791f938a","modified":1540707960560},{"_id":"themes/indigo/layout/_partial/plugins/mathjax.ejs","hash":"3a5c9f7d22d30cd8ffa4e83a8d3976db22815994","modified":1540707960560},{"_id":"themes/indigo/layout/_partial/plugins/page-visit.ejs","hash":"bb9deb32c54ea6820f622b923e62592915e9f21f","modified":1540707960561},{"_id":"themes/indigo/layout/_partial/plugins/site-visit.ejs","hash":"a2c247c2e32016563dd6a22c21474072d93f4dbd","modified":1540707960562},{"_id":"themes/indigo/layout/_partial/plugins/tajs.ejs","hash":"ef9c77d8c6e004b014c83c5f9333e7174f8bafa3","modified":1540707960562},{"_id":"themes/indigo/layout/_partial/plugins/valine.ejs","hash":"0a6245da90d54177441d32a6f1766b4f434660db","modified":1540707960563},{"_id":"themes/indigo/layout/_partial/plugins/uyan.ejs","hash":"ddf290e90dc1c779f42a48e1bd852ca932148dfb","modified":1540707960563},{"_id":"themes/indigo/layout/_partial/post/category.ejs","hash":"c08e44cbd7315dec7afb6054b04d3c7b82c3bde8","modified":1540707960565},{"_id":"themes/indigo/layout/_partial/post/comment.ejs","hash":"b1a6984e19d3493fb327383ee76e09fdee090426","modified":1540707960566},{"_id":"themes/indigo/layout/_partial/post/copyright.ejs","hash":"dd1dcc7776021ab3d68065f8532efead4c2b8051","modified":1540707960566},{"_id":"themes/indigo/layout/_partial/post/nav.ejs","hash":"03719097851575a2c1bb95774058b224f6402a1f","modified":1540707960568},{"_id":"themes/indigo/layout/_partial/post/head-meta.ejs","hash":"f137c126672769e9571be2bb0a70ea8dda644b0e","modified":1540707960568},{"_id":"themes/indigo/layout/_partial/post/date.ejs","hash":"c5adcec8db1506c378d39855a697e1bb1165646c","modified":1540707960567},{"_id":"themes/indigo/layout/_partial/post/reward.ejs","hash":"097c0276a61665e5ee96e5d5d85a7d6ae5ab2f49","modified":1540707960570},{"_id":"themes/indigo/layout/_partial/post/reward-btn.ejs","hash":"b46160005224821a439dec9f1ff183e2f66d9f4b","modified":1540707960569},{"_id":"themes/indigo/layout/_partial/post/share-fab.ejs","hash":"2ec7de870988cfbc8ea9872cddf7e4076ac64a57","modified":1540707960571},{"_id":"themes/indigo/layout/_partial/post/share.ejs","hash":"7d79a67b3e5e6989f22fb0e0904fa540bfca5fcc","modified":1540707960572},{"_id":"themes/indigo/layout/_partial/post/tag.ejs","hash":"412894001b1ac6e63012b26b1109a0856651c076","modified":1540707960572},{"_id":"themes/indigo/layout/_partial/post/title.ejs","hash":"eaad7af7888bddd7095243a43ff38f55ad8c494a","modified":1540707960573},{"_id":"themes/indigo/layout/_partial/post/toc.ejs","hash":"d534b888d24df7703c632539d4bdd638fa764e98","modified":1540707960573},{"_id":"themes/indigo/layout/_partial/post/updated.ejs","hash":"00fedf7971c0bda0623d968bc0614e512d19a985","modified":1540707960574},{"_id":"themes/indigo/source/css/_partial/article.less","hash":"f047c8ca92f9e6a8e1299ace0cce91514631a21c","modified":1540707960585},{"_id":"themes/indigo/source/css/_partial/archives.less","hash":"382fc22cd5cc073e881768a65600d97eba9f1d21","modified":1540707960584},{"_id":"themes/indigo/source/css/_partial/gotop.less","hash":"bad63006b3bd4849bf53ad38482af0d9971061d3","modified":1540707960588},{"_id":"themes/indigo/source/css/_partial/header.less","hash":"880b4a28e97d556ed15b07642d25115f9b6ba4f6","modified":1540707960588},{"_id":"themes/indigo/source/css/_partial/highlight.less","hash":"99e48793dc0b4ffb66ecaf2d1315145872f9bb98","modified":1540707960589},{"_id":"themes/indigo/source/css/_partial/layout.less","hash":"5f783f34bf093e654e8922ed4a2af8b7b2cd41c4","modified":1540707960589},{"_id":"themes/indigo/source/css/_partial/lightbox.less","hash":"38419aaf3c1832e84ade331f051f110fdc8b960f","modified":1540707960589},{"_id":"themes/indigo/source/css/_partial/loading.less","hash":"85157ddf3877b5c58e8f1d737dda3dfb1bfd540b","modified":1540707960590},{"_id":"themes/indigo/source/css/_partial/page.less","hash":"33b0a5edcedc26a4c592c812c5785bb20d3c93db","modified":1540707960591},{"_id":"themes/indigo/source/css/_partial/postlist.less","hash":"516cded3c7f1db4cacfa898bcaf0adfae7f3a2e1","modified":1540707960591},{"_id":"themes/indigo/source/css/_partial/reward.less","hash":"f5e89ea5414e3096a28c8c96e86c3f669040a892","modified":1540707960592},{"_id":"themes/indigo/source/css/_partial/roboto.less","hash":"3e457942995da8840e7662fa6cb551a7e12ea294","modified":1540707960593},{"_id":"themes/indigo/source/css/_partial/search.less","hash":"dbc23e77e586ee682a21475f5eb568628ea6720f","modified":1540707960593},{"_id":"themes/indigo/source/css/_partial/share.less","hash":"a683c96a59470efd35722b763c55149a46e35156","modified":1540707960594},{"_id":"themes/indigo/source/css/_partial/tags.less","hash":"01eb7f84193180928a6ed4796ee8802f6c1628e7","modified":1540707960594},{"_id":"themes/indigo/source/css/_partial/variable.less","hash":"3232e75f4653402c9fbd7bda5b97c05ecc31db2b","modified":1540707960595},{"_id":"themes/indigo/source/css/_partial/waves.less","hash":"a02eaa601887f947257f6016679b62dc96a61c0c","modified":1540707960596},{"_id":"themes/indigo/source/css/_plugin/valine.less","hash":"b8f8d8037fb3c8525da12e580bd9e2ff9f298132","modified":1540707960597},{"_id":"themes/indigo/source/img/wechat.png","hash":"78f79036ebbc92b5d9762bec90ad937047b61451","modified":1540707960684},{"_id":"themes/indigo/source/css/_partial/fontawesome.less","hash":"a3ecbd6ccf5b56ac39df710c34a149b82989a498","modified":1540707960586},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1540707960613},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1540707960617},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1540707960617},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1540707960622},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1540707960622},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1540707960626},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1540707960627},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1540707960630},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1540707960631},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1540707960634},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1540707960635},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1540707960611},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1540707960612},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1540707960615},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1540707960616},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1540707960619},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1540707960621},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1540707960624},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1540707960625},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1540707960630},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1540707960633},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1540707960600},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1540707960602},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1540707960609},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1540707960629},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1540707960607},{"_id":"themes/indigo/source/img/favicon.ico","hash":"66ea2284099d42642d5eb8648aad5d1ff179240c","modified":1540707960680},{"_id":"themes/indigo/source/img/avatar.jpg","hash":"1ba75ecb13fa4c134ce7eb86b77b73c2ddda8539","modified":1540707960658},{"_id":"public/content.json","hash":"371b3a3f8846ede30b3579124bb9d1685a20eb0b","modified":1541434235163},{"_id":"public/search.xml","hash":"814f1e6d66b3d1c042ad64dd2866993ab0717b4c","modified":1541434235163},{"_id":"public/timeline/index.html","hash":"d2a52c0ae244d0c6abb882d5b2f913195af0a6ff","modified":1541434235625},{"_id":"public/archives/2018/07/index.html","hash":"cac2bbc5e444cf54e3e8f3a7685343166e9b946f","modified":1541434235625},{"_id":"public/archives/2018/08/index.html","hash":"569372d07cf913ecb2f0096ba0d3f4a64bc2180d","modified":1541434235625},{"_id":"public/archives/2018/11/index.html","hash":"66a5bbb711ccb169bed96201045687c295eef3ba","modified":1541434235625},{"_id":"public/categories/Git/index.html","hash":"4489d6cc47c194a67de37353d8db4b24cb14fbed","modified":1541434235625},{"_id":"public/categories/Vue/index.html","hash":"1ae82878191927ca4eebfd317790eb5c3901a613","modified":1541434235625},{"_id":"public/categories/前端工具/index.html","hash":"8ce04c5c7c6e0725f7e07de6dfacec85a453ea2d","modified":1541434235625},{"_id":"public/categories/JavaScript/index.html","hash":"1a3f2d51fa1cce25510bf24b028a22e6302845cf","modified":1541434235625},{"_id":"public/categories/Hexo/index.html","hash":"9264cb118792eefa9bbe30caf99233625e419c97","modified":1541434235625},{"_id":"public/tags/Git/index.html","hash":"4b41bda602d466a06f5a6bcfc805766920ed818c","modified":1541434235626},{"_id":"public/tags/Vue/index.html","hash":"ec50085f316063fb1dc298dc88b3dcdaa1a50cdb","modified":1541434235626},{"_id":"public/tags/Webpack/index.html","hash":"3b1464f127066380adf1bc7455b9196a06d7e9d8","modified":1541434235626},{"_id":"public/tags/NPM/index.html","hash":"2847d866e2914f9adc6f81102cf9e72226f31c66","modified":1541434235626},{"_id":"public/tags/Yarn/index.html","hash":"c3d183b582166314a49d5dae338407f5fe46e9ad","modified":1541434235626},{"_id":"public/tags/JavaScript/index.html","hash":"583274d550ae77eeda5b209ff59bac94a931c412","modified":1541434235626},{"_id":"public/tags/Hexo/index.html","hash":"4326a0de9686c6eac8de759b58c48a8425650a90","modified":1541434235626},{"_id":"public/tags/VSCode/index.html","hash":"33bb8442030a120d30e0e0132479898a97448318","modified":1541434235626},{"_id":"public/tags/淘宝镜像/index.html","hash":"ec2f1defe48095636d782d72e9ff76cacae8dead","modified":1541434235626},{"_id":"public/tags/跨域/index.html","hash":"5319b563cffe5966bed5e2bbf22c8cfaeff62be4","modified":1541434235626},{"_id":"public/about/index.html","hash":"58a54f4c4c6e976714f3f7fc2db2a4eb14110dc0","modified":1541434235626},{"_id":"public/categories/index.html","hash":"24eeeee1f1a3822f64a50387ea71f7846cb3ccf1","modified":1541434235626},{"_id":"public/tags/index.html","hash":"839917936255cc357c489c3d45c45d8305ea4baf","modified":1541434235626},{"_id":"public/2018/11/05/hexo文章模板设置/index.html","hash":"eaaa386c41f0b6bb7d02862ea533ea12dcc8b9f8","modified":1541434235627},{"_id":"public/2018/08/07/Vue中使用Webpack总结/index.html","hash":"496fb06802e8a0387a4211e7474cd42c8d34bbd0","modified":1541434235627},{"_id":"public/2018/08/06/path.join和path.resolve区别/index.html","hash":"408fc4565213a4b9055b6b021bd1dfa463f4db06","modified":1541434235627},{"_id":"public/2018/07/29/Git更新与推送流程/index.html","hash":"cf2154eb71d6c6eeae7c03011b30c51826fad0ab","modified":1541434235627},{"_id":"public/2018/07/08/src目录结构分析/index.html","hash":"308d755693e8827b39c310839c825788d9f9f862","modified":1541434235627},{"_id":"public/2018/07/01/前端开发环境配置/index.html","hash":"1af4e0fc279afe6fae7894c18f8cb923ed971873","modified":1541434235627},{"_id":"public/2018/07/01/Yarn和NPM命令/index.html","hash":"f73decae2d223c9531b0929fcb58c473b9ba2f56","modified":1541434235627},{"_id":"public/archives/index.html","hash":"3d000c3c7d0f5c67df3250e5fd149adf0a3c9831","modified":1541434235627},{"_id":"public/archives/2018/index.html","hash":"ae9024fd974eb049180d80d2ad8b8ba7d15a7d2c","modified":1541434235627},{"_id":"public/index.html","hash":"fd1a83228b3a2599c7ef5b495a9ff10a14336ec7","modified":1541434235627},{"_id":"public/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1541434235655},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1541434235655},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1541434235655},{"_id":"public/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1541434235655},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1541434235655},{"_id":"public/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1541434235655},{"_id":"public/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1541434235655},{"_id":"public/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1541434235655},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1541434235656},{"_id":"public/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1541434235656},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1541434235656},{"_id":"public/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1541434235656},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1541434235656},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1541434235656},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1541434235656},{"_id":"public/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1541434235656},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1541434235656},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1541434235656},{"_id":"public/css/prism.css","hash":"9ff88ae307098176655ee460023e68ac80358ef4","modified":1541434235657},{"_id":"public/css/prism-line-numbers.css","hash":"e0db113a99e4a09d2161a539b1652d96e4a22fac","modified":1541434235657},{"_id":"public/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1541434235693},{"_id":"public/img/alipay.png","hash":"6923f412b20b050040cb471e818d82285ecb1b8a","modified":1541434235693},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1541434235693},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1541434235693},{"_id":"public/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1541434235694},{"_id":"public/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1541434235694},{"_id":"public/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1541434235694},{"_id":"public/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1541434235694},{"_id":"public/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1541434235694},{"_id":"public/js/main.min.js","hash":"8acf4480f8ab859423b8926b9b790c67b5a77276","modified":1541434235707},{"_id":"public/js/search.js","hash":"a1de7e7a2ef8330ebcd9f3a7a4622b3bac44e4f3","modified":1541434235707},{"_id":"public/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1541434235707},{"_id":"public/img/wechat.png","hash":"78f79036ebbc92b5d9762bec90ad937047b61451","modified":1541434235707},{"_id":"public/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1541434235708},{"_id":"public/js/main.js","hash":"300b2e963683ced162e28afcd24ffc970fc23ac2","modified":1541434235732},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1541434235733},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1541434235735},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1541434235856},{"_id":"public/css/style.css","hash":"27f88e278b738328b5acd28e88b5cb20daa490e6","modified":1541434236161},{"_id":"public/img/favicon.ico","hash":"66ea2284099d42642d5eb8648aad5d1ff179240c","modified":1541434236162},{"_id":"public/img/avatar.jpg","hash":"1ba75ecb13fa4c134ce7eb86b77b73c2ddda8539","modified":1541434236169}],"Category":[{"name":"Git","_id":"cjo4i575k00042wsx7nc77kib"},{"name":"Vue","_id":"cjo4i575s000a2wsxd2zigb8a"},{"name":"前端工具","_id":"cjo4i5761000g2wsxbh313oc4"},{"name":"JavaScript","_id":"cjo4i5763000k2wsxv49l1zxi"},{"name":"Hexo","_id":"cjo4i5766000q2wsx6ebjcwis"}],"Data":[],"Page":[{"title":"About Me","date":"2018-07-29T08:19:21.000Z","tags":null,"_content":"\n<!-- markdownlint-disable MD002 MD041-->\n\n## 关于我\n\n- 汤佳人\n\n  - 喜欢宅，心态肥宅，爱好二次元\n  - 养猫\n  - 自学前端开发\n  - 喜欢所见即所得的工作方式\n  - 成功减肥20斤\n\n## 联系方式\n\n- 主页: [https://shmilybaozi.github.io/](https://shmilybaozi.github.io/)\n- GitHub: shmilybaozi\n- QQ: 35772502\n- WeChat: shmilybaozi\n- Location: 湖南长沙","source":"about/index.md","raw":"---\ntitle: 'About Me'\ndate: 2018-07-29 16:19:21\ntags: \n---\n\n<!-- markdownlint-disable MD002 MD041-->\n\n## 关于我\n\n- 汤佳人\n\n  - 喜欢宅，心态肥宅，爱好二次元\n  - 养猫\n  - 自学前端开发\n  - 喜欢所见即所得的工作方式\n  - 成功减肥20斤\n\n## 联系方式\n\n- 主页: [https://shmilybaozi.github.io/](https://shmilybaozi.github.io/)\n- GitHub: shmilybaozi\n- QQ: 35772502\n- WeChat: shmilybaozi\n- Location: 湖南长沙","updated":"2018-10-28T06:26:00.539Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjo4i575e00012wsxd7cq7gc6","content":"<!-- markdownlint-disable MD002 MD041-->\n<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><ul>\n<li><p>汤佳人</p>\n<ul>\n<li>喜欢宅，心态肥宅，爱好二次元</li>\n<li>养猫</li>\n<li>自学前端开发</li>\n<li>喜欢所见即所得的工作方式</li>\n<li>成功减肥20斤</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><ul>\n<li>主页: <a href=\"https://shmilybaozi.github.io/\">https://shmilybaozi.github.io/</a></li>\n<li>GitHub: shmilybaozi</li>\n<li>QQ: 35772502</li>\n<li>WeChat: shmilybaozi</li>\n<li>Location: 湖南长沙</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<!-- markdownlint-disable MD002 MD041-->\n<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><ul>\n<li><p>汤佳人</p>\n<ul>\n<li>喜欢宅，心态肥宅，爱好二次元</li>\n<li>养猫</li>\n<li>自学前端开发</li>\n<li>喜欢所见即所得的工作方式</li>\n<li>成功减肥20斤</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><ul>\n<li>主页: <a href=\"https://shmilybaozi.github.io/\">https://shmilybaozi.github.io/</a></li>\n<li>GitHub: shmilybaozi</li>\n<li>QQ: 35772502</li>\n<li>WeChat: shmilybaozi</li>\n<li>Location: 湖南长沙</li>\n</ul>\n"},{"title":"categories","date":"2018-10-28T06:26:00.540Z","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate:\nlayout: categories\n---\n","updated":"2018-10-28T06:26:00.540Z","path":"categories/index.html","comments":1,"_id":"cjo4i575i00032wsx11poxigh","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"timeline","date":"2018-10-28T06:26:00.542Z","layout":"timeline","_content":"","source":"timeline/index.md","raw":"---\ntitle: timeline\ndate:\nlayout: timeline\n---\n","updated":"2018-10-28T06:26:00.542Z","path":"timeline/index.html","comments":1,"_id":"cjo4i575o00072wsxh120m565","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-10-28T06:26:00.541Z","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate:\nlayout: tags\n---\n","updated":"2018-10-28T06:26:00.541Z","path":"tags/index.html","comments":1,"_id":"cjo4i576u00182wsxn12vjz87","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Git更新与推送流程","description":"Git更新与推送流程","date":"2018-07-29T07:48:01.000Z","_content":"\nGit更新与推送流程\n\n<!-- more -->\n<!-- markdownlint-disable MD041 MD002-->\n\n## Git更新与推送流程\n\n- 设置主仓库地址\n\n```bash\ngit remote add upstream https://repo-address\n```\n\n- 获取主仓库最新提交\n\n```bash\ngit pull upstream\n```\n\n- 将主仓库的 `master` 分支合并到本地的 `master` 分支\n\n```bash\ngit merge upstream/master master\n```\n\n- 解决冲突并提交合并\n\n```bash\ngit commit -a -m 'merge upstream master'\n```\n\n- 推送至远程仓库\n\n```bash\ngit push\n```\n\n- 提交Pull Request\n\n## 自定义Git\n\n### 让Git显示颜色\n\n```bash\ngit config --global color.ui true\n```\n\n### 配置别名\n\n- `git st`表示`git status`\n- `git co`表示`git checkout`\n- `git ci`表示`git commit`\n- `git br`表示`git branch`\n\n```bash\ngit config --global alias.st status\ngit config --global alias.co checkout\ngit config --global alias.ci commit\ngit config --global alias.br branch\n```\n\n- 命令`git reset HEAD file`可以把暂存区的修改撤销掉（unstage），重新放回工作区。既然是一个unstage操作，就可以配置一个unstage别名：\n\n```bash\ngit config --global alias.unstage 'reset HEAD'\n```\n\n- 配置一个`git last`，让其显示最后一次提交信息：\n\n```bash\ngit config --global alias.last 'log -1'\n```\n\n- 还有人丧心病狂地把`lg`配置成了：\n\n```bash\ngit config --global alias.lg \"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit\"\n```\n\n### 配置文件\n\n配置Git的时候，加上`--global`是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。\n配置文件放哪了?每个仓库的Git配置文件都放在`.git/config`文件中\n而当前用户的Git配置文件放在用户主目录下的一个隐藏文件`.gitconfig`中\n别名就在`[alias]`后面，要删除别名，直接把对应的行删掉即可。\n配置别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置。\n\n```bash\n[alias]\n  st = status\n  co = checkout\n  ci = commit\n  br = branch\n  unstage = reset HEAD\n  last = log -1\n  lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit\n  up = upstream\n  og = origin\n  ms = master\n  mg = merge\n  plp = pull upstream\n  mgums = merge upstream/master master\n  rap = remote add upstream\n  rag = remote add origin\n  psg = push -u origin\n```","source":"_posts/Git更新与推送流程.md","raw":"---\ntitle: Git更新与推送流程\ntags: Git\ncategories: Git\ndescription: Git更新与推送流程\ndate: 2018-07-29 15:48:01\n---\n\nGit更新与推送流程\n\n<!-- more -->\n<!-- markdownlint-disable MD041 MD002-->\n\n## Git更新与推送流程\n\n- 设置主仓库地址\n\n```bash\ngit remote add upstream https://repo-address\n```\n\n- 获取主仓库最新提交\n\n```bash\ngit pull upstream\n```\n\n- 将主仓库的 `master` 分支合并到本地的 `master` 分支\n\n```bash\ngit merge upstream/master master\n```\n\n- 解决冲突并提交合并\n\n```bash\ngit commit -a -m 'merge upstream master'\n```\n\n- 推送至远程仓库\n\n```bash\ngit push\n```\n\n- 提交Pull Request\n\n## 自定义Git\n\n### 让Git显示颜色\n\n```bash\ngit config --global color.ui true\n```\n\n### 配置别名\n\n- `git st`表示`git status`\n- `git co`表示`git checkout`\n- `git ci`表示`git commit`\n- `git br`表示`git branch`\n\n```bash\ngit config --global alias.st status\ngit config --global alias.co checkout\ngit config --global alias.ci commit\ngit config --global alias.br branch\n```\n\n- 命令`git reset HEAD file`可以把暂存区的修改撤销掉（unstage），重新放回工作区。既然是一个unstage操作，就可以配置一个unstage别名：\n\n```bash\ngit config --global alias.unstage 'reset HEAD'\n```\n\n- 配置一个`git last`，让其显示最后一次提交信息：\n\n```bash\ngit config --global alias.last 'log -1'\n```\n\n- 还有人丧心病狂地把`lg`配置成了：\n\n```bash\ngit config --global alias.lg \"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit\"\n```\n\n### 配置文件\n\n配置Git的时候，加上`--global`是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。\n配置文件放哪了?每个仓库的Git配置文件都放在`.git/config`文件中\n而当前用户的Git配置文件放在用户主目录下的一个隐藏文件`.gitconfig`中\n别名就在`[alias]`后面，要删除别名，直接把对应的行删掉即可。\n配置别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置。\n\n```bash\n[alias]\n  st = status\n  co = checkout\n  ci = commit\n  br = branch\n  unstage = reset HEAD\n  last = log -1\n  lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit\n  up = upstream\n  og = origin\n  ms = master\n  mg = merge\n  plp = pull upstream\n  mgums = merge upstream/master master\n  rap = remote add upstream\n  rag = remote add origin\n  psg = push -u origin\n```","slug":"Git更新与推送流程","published":1,"updated":"2018-11-05T14:38:00.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo4i575600002wsx7r6r3xwu","content":"<p>Git更新与推送流程</p>\n<a id=\"more\"></a>\n<!-- markdownlint-disable MD041 MD002-->\n<h2 id=\"Git更新与推送流程\"><a href=\"#Git更新与推送流程\" class=\"headerlink\" title=\"Git更新与推送流程\"></a>Git更新与推送流程</h2><ul>\n<li>设置主仓库地址</li>\n</ul>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> remote add upstream https://repo-address\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>获取主仓库最新提交</li>\n</ul>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> pull upstream\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>将主仓库的 <code>master</code> 分支合并到本地的 <code>master</code> 分支</li>\n</ul>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> merge upstream/master master\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>解决冲突并提交合并</li>\n</ul>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> commit -a -m <span class=\"token string\">'merge upstream master'</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>推送至远程仓库</li>\n</ul>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>提交Pull Request</li>\n</ul>\n<h2 id=\"自定义Git\"><a href=\"#自定义Git\" class=\"headerlink\" title=\"自定义Git\"></a>自定义Git</h2><h3 id=\"让Git显示颜色\"><a href=\"#让Git显示颜色\" class=\"headerlink\" title=\"让Git显示颜色\"></a>让Git显示颜色</h3><pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global color.ui <span class=\"token boolean\">true</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"配置别名\"><a href=\"#配置别名\" class=\"headerlink\" title=\"配置别名\"></a>配置别名</h3><ul>\n<li><code>git st</code>表示<code>git status</code></li>\n<li><code>git co</code>表示<code>git checkout</code></li>\n<li><code>git ci</code>表示<code>git commit</code></li>\n<li><code>git br</code>表示<code>git branch</code></li>\n</ul>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global alias.st status\n<span class=\"token function\">git</span> config --global alias.co checkout\n<span class=\"token function\">git</span> config --global alias.ci commit\n<span class=\"token function\">git</span> config --global alias.br branch\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>命令<code>git reset HEAD file</code>可以把暂存区的修改撤销掉（unstage），重新放回工作区。既然是一个unstage操作，就可以配置一个unstage别名：</li>\n</ul>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global alias.unstage <span class=\"token string\">'reset HEAD'</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>配置一个<code>git last</code>，让其显示最后一次提交信息：</li>\n</ul>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global alias.last <span class=\"token string\">'log -1'</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>还有人丧心病狂地把<code>lg</code>配置成了：</li>\n</ul>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global alias.lg <span class=\"token string\">\"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an>%Creset' --abbrev-commit\"</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><p>配置Git的时候，加上<code>--global</code>是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。<br>配置文件放哪了?每个仓库的Git配置文件都放在<code>.git/config</code>文件中<br>而当前用户的Git配置文件放在用户主目录下的一个隐藏文件<code>.gitconfig</code>中<br>别名就在<code>[alias]</code>后面，要删除别名，直接把对应的行删掉即可。<br>配置别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置。</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>alias<span class=\"token punctuation\">]</span>\n  st <span class=\"token operator\">=</span> status\n  co <span class=\"token operator\">=</span> checkout\n  ci <span class=\"token operator\">=</span> commit\n  br <span class=\"token operator\">=</span> branch\n  unstage <span class=\"token operator\">=</span> reset HEAD\n  last <span class=\"token operator\">=</span> log -1\n  lg <span class=\"token operator\">=</span> log --color --graph --pretty<span class=\"token operator\">=</span>format:<span class=\"token string\">'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an>%Creset'</span> --abbrev-commit\n  up <span class=\"token operator\">=</span> upstream\n  og <span class=\"token operator\">=</span> origin\n  ms <span class=\"token operator\">=</span> master\n  mg <span class=\"token operator\">=</span> merge\n  plp <span class=\"token operator\">=</span> pull upstream\n  mgums <span class=\"token operator\">=</span> merge upstream/master master\n  rap <span class=\"token operator\">=</span> remote add upstream\n  rag <span class=\"token operator\">=</span> remote add origin\n  psg <span class=\"token operator\">=</span> push -u origin\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"<p>Git更新与推送流程</p>","more":"<!-- markdownlint-disable MD041 MD002-->\n<h2 id=\"Git更新与推送流程\"><a href=\"#Git更新与推送流程\" class=\"headerlink\" title=\"Git更新与推送流程\"></a>Git更新与推送流程</h2><ul>\n<li>设置主仓库地址</li>\n</ul>\n<pre><code class=\"bash\">git remote add upstream https://repo-address\n</code></pre>\n<ul>\n<li>获取主仓库最新提交</li>\n</ul>\n<pre><code class=\"bash\">git pull upstream\n</code></pre>\n<ul>\n<li>将主仓库的 <code>master</code> 分支合并到本地的 <code>master</code> 分支</li>\n</ul>\n<pre><code class=\"bash\">git merge upstream/master master\n</code></pre>\n<ul>\n<li>解决冲突并提交合并</li>\n</ul>\n<pre><code class=\"bash\">git commit -a -m &#39;merge upstream master&#39;\n</code></pre>\n<ul>\n<li>推送至远程仓库</li>\n</ul>\n<pre><code class=\"bash\">git push\n</code></pre>\n<ul>\n<li>提交Pull Request</li>\n</ul>\n<h2 id=\"自定义Git\"><a href=\"#自定义Git\" class=\"headerlink\" title=\"自定义Git\"></a>自定义Git</h2><h3 id=\"让Git显示颜色\"><a href=\"#让Git显示颜色\" class=\"headerlink\" title=\"让Git显示颜色\"></a>让Git显示颜色</h3><pre><code class=\"bash\">git config --global color.ui true\n</code></pre>\n<h3 id=\"配置别名\"><a href=\"#配置别名\" class=\"headerlink\" title=\"配置别名\"></a>配置别名</h3><ul>\n<li><code>git st</code>表示<code>git status</code></li>\n<li><code>git co</code>表示<code>git checkout</code></li>\n<li><code>git ci</code>表示<code>git commit</code></li>\n<li><code>git br</code>表示<code>git branch</code></li>\n</ul>\n<pre><code class=\"bash\">git config --global alias.st status\ngit config --global alias.co checkout\ngit config --global alias.ci commit\ngit config --global alias.br branch\n</code></pre>\n<ul>\n<li>命令<code>git reset HEAD file</code>可以把暂存区的修改撤销掉（unstage），重新放回工作区。既然是一个unstage操作，就可以配置一个unstage别名：</li>\n</ul>\n<pre><code class=\"bash\">git config --global alias.unstage &#39;reset HEAD&#39;\n</code></pre>\n<ul>\n<li>配置一个<code>git last</code>，让其显示最后一次提交信息：</li>\n</ul>\n<pre><code class=\"bash\">git config --global alias.last &#39;log -1&#39;\n</code></pre>\n<ul>\n<li>还有人丧心病狂地把<code>lg</code>配置成了：</li>\n</ul>\n<pre><code class=\"bash\">git config --global alias.lg &quot;log --color --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit&quot;\n</code></pre>\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><p>配置Git的时候，加上<code>--global</code>是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。<br>配置文件放哪了?每个仓库的Git配置文件都放在<code>.git/config</code>文件中<br>而当前用户的Git配置文件放在用户主目录下的一个隐藏文件<code>.gitconfig</code>中<br>别名就在<code>[alias]</code>后面，要删除别名，直接把对应的行删掉即可。<br>配置别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置。</p>\n<pre><code class=\"bash\">[alias]\n  st = status\n  co = checkout\n  ci = commit\n  br = branch\n  unstage = reset HEAD\n  last = log -1\n  lg = log --color --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit\n  up = upstream\n  og = origin\n  ms = master\n  mg = merge\n  plp = pull upstream\n  mgums = merge upstream/master master\n  rap = remote add upstream\n  rag = remote add origin\n  psg = push -u origin\n</code></pre>"},{"title":"Vue中使用 Webpack总结","description":"Vue中使用 Webpack总结","date":"2018-08-07T07:42:09.000Z","_content":"\nWebpack 打包工具(模块打包器)\n\n<!-- more -->\n<!-- markdownlint-disable MD041 MD002-->\n\n## Webpack结构\n\nVue中 关于Webpack的配置文件有四个: (vue-cli版本@2.9.6)\n\n- build文件夹\n  - webpack.base.conf.js 主要配置文件\n  - webpack.dev.conf.js 开发环境配置文件\n  - webpack.prod.conf.js 生产环境配置文件\n  - webpack.test.conf.js 需要单元测试时的配置文件(不选择单元测试则没有该文件)\n\n## webpack.base.conf.js\n\n```js\n'use strict'\nconst path = require('path')\nconst utils = require('./utils')\nconst config = require('../config')\nconst vueLoaderConfig = require('./vue-loader.conf')\n\nfunction resolve (dir) {\n  return path.join(__dirname, '..', dir)\n}\n\nconst createLintingRule = () => ({\n  test: /\\.(js|vue)$/,\n  loader: 'eslint-loader',\n  enforce: 'pre',\n  include: [resolve('src'), resolve('test')],\n  options: {\n    formatter: require('eslint-friendly-formatter'),\n    emitWarning: !config.dev.showEslintErrorsInOverlay\n  }\n})\n\nmodule.exports = {\n  // 基础目录，绝对路径，用于从配置中解析入口起点(entry point)和 loader\n  context: path.resolve(__dirname, '../'),\n  // 入口配置: 可以配置多入口\n  entry: {\n    app: './src/main.js'\n  },\n  // 出口配置\n  output: {\n    // 出口路径: path必须是绝对路径\n    path: config.build.assetsRoot,\n    // 出口文件名\n    filename: '[name].js', // [name]即入口名称\n    // 对于按需加载(on-demand-load)或加载外部资源(external resources)（如图片、文件等）来说，output.publicPath 是很重要的选项。\n    // 该选项的值是以 runtime(运行时) 或 loader(载入时) 所创建的每个 URL 为前缀。因此，在多数情况下，此选项的值都会以/结束。\n    // 可能以下情况中的一种:\n    publicPath: 'https://cdn.example.com/assets/', // CDN（总是 HTTPS 协议）\n    publicPath: '//cdn.example.com/assets/', // CDN（协议相同）\n    publicPath: '/assets/', // 相对于服务(server-relative)\n    publicPath: 'assets/', // 相对于 HTML 页面\n    publicPath: '../assets/', // 相对于 HTML 页面\n    publicPath: '', // 相对于 HTML 页面（目录相同）\n    // Vue中: 判断环境变量的值,去对应的环境变量中寻找设置 config 文件夹中的 index.js\n    publicPath: process.env.NODE_ENV === 'production'\n      ? config.build.assetsPublicPath // 默认为\"/\"，一般会修改为\"./\"\n      : config.dev.assetsPublicPath // 默认为\"/\"\n  },\n  // 配置模块如何解析\n  resolve: {\n    // 自动解析确定的扩展: 能够使用户在引入模块时不带扩展\n    extensions: ['.js', '.vue', '.json'],\n    // 创建 import 或 require 的别名，来确保模块引入变得更简单。\n    alias: {\n      'vue$': 'vue/dist/vue.esm.js', // 在给定对象的键后的末尾添加 $,以表示精准匹配: 必须以 XXX 结尾\n      '@': resolve('src'), // js文件!!!中 @ 即表示为 src 文件夹, html 和 css 路径中不是\n    }\n  },\n  // 决定如何处理项目中的不同类型的模块\n  module: {\n    // 创建模块时，匹配请求的规则数组。这些规则能够修改模块的创建方式。这些规则能够对模块(module)应用 loader，或者修改解析器(parser)\n    rules: [\n      ...(config.dev.useEslint ? [createLintingRule()] : []),\n      {\n        test: /\\.vue$/,\n        loader: 'vue-loader',\n        options: vueLoaderConfig\n      },\n      {\n        test: /\\.js$/,\n        loader: 'babel-loader',\n        include: [resolve('src'), resolve('test'), resolve('node_modules/webpack-dev-server/client')]\n      },\n      {\n        test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000,\n          name: utils.assetsPath('img/[name].[hash:7].[ext]')\n        }\n      },\n      {\n        test: /\\.(mp4|webm|ogg|mp3|wav|flac|aac)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000,\n          name: utils.assetsPath('media/[name].[hash:7].[ext]')\n        }\n      },\n      {\n        test: /\\.(woff2?|eot|ttf|otf)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000,\n          name: utils.assetsPath('fonts/[name].[hash:7].[ext]')\n        }\n      }\n    ]\n  },\n  node: {\n    // prevent webpack from injecting useless setImmediate polyfill because Vue\n    // source contains it (although only uses it if it's native).\n    setImmediate: false,\n    // prevent webpack from injecting mocks to Node native modules\n    // that does not make sense for the client\n    dgram: 'empty',\n    fs: 'empty',\n    net: 'empty',\n    tls: 'empty',\n    child_process: 'empty'\n  }\n}\n```\n\n在最新的 vue-cli 3.0 中, webpack 中的设置都隐藏到了 vue 内部, 通过设置 `vue.config.js` 来覆盖相关 webpack 设置","source":"_posts/Vue中使用Webpack总结.md","raw":"---\ntitle: 'Vue中使用 Webpack总结'\ntags:\n  - Vue\n  - Webpack\ncategories: Vue\ndescription: Vue中使用 Webpack总结\ndate: 2018-08-07 15:42:09\n---\n\nWebpack 打包工具(模块打包器)\n\n<!-- more -->\n<!-- markdownlint-disable MD041 MD002-->\n\n## Webpack结构\n\nVue中 关于Webpack的配置文件有四个: (vue-cli版本@2.9.6)\n\n- build文件夹\n  - webpack.base.conf.js 主要配置文件\n  - webpack.dev.conf.js 开发环境配置文件\n  - webpack.prod.conf.js 生产环境配置文件\n  - webpack.test.conf.js 需要单元测试时的配置文件(不选择单元测试则没有该文件)\n\n## webpack.base.conf.js\n\n```js\n'use strict'\nconst path = require('path')\nconst utils = require('./utils')\nconst config = require('../config')\nconst vueLoaderConfig = require('./vue-loader.conf')\n\nfunction resolve (dir) {\n  return path.join(__dirname, '..', dir)\n}\n\nconst createLintingRule = () => ({\n  test: /\\.(js|vue)$/,\n  loader: 'eslint-loader',\n  enforce: 'pre',\n  include: [resolve('src'), resolve('test')],\n  options: {\n    formatter: require('eslint-friendly-formatter'),\n    emitWarning: !config.dev.showEslintErrorsInOverlay\n  }\n})\n\nmodule.exports = {\n  // 基础目录，绝对路径，用于从配置中解析入口起点(entry point)和 loader\n  context: path.resolve(__dirname, '../'),\n  // 入口配置: 可以配置多入口\n  entry: {\n    app: './src/main.js'\n  },\n  // 出口配置\n  output: {\n    // 出口路径: path必须是绝对路径\n    path: config.build.assetsRoot,\n    // 出口文件名\n    filename: '[name].js', // [name]即入口名称\n    // 对于按需加载(on-demand-load)或加载外部资源(external resources)（如图片、文件等）来说，output.publicPath 是很重要的选项。\n    // 该选项的值是以 runtime(运行时) 或 loader(载入时) 所创建的每个 URL 为前缀。因此，在多数情况下，此选项的值都会以/结束。\n    // 可能以下情况中的一种:\n    publicPath: 'https://cdn.example.com/assets/', // CDN（总是 HTTPS 协议）\n    publicPath: '//cdn.example.com/assets/', // CDN（协议相同）\n    publicPath: '/assets/', // 相对于服务(server-relative)\n    publicPath: 'assets/', // 相对于 HTML 页面\n    publicPath: '../assets/', // 相对于 HTML 页面\n    publicPath: '', // 相对于 HTML 页面（目录相同）\n    // Vue中: 判断环境变量的值,去对应的环境变量中寻找设置 config 文件夹中的 index.js\n    publicPath: process.env.NODE_ENV === 'production'\n      ? config.build.assetsPublicPath // 默认为\"/\"，一般会修改为\"./\"\n      : config.dev.assetsPublicPath // 默认为\"/\"\n  },\n  // 配置模块如何解析\n  resolve: {\n    // 自动解析确定的扩展: 能够使用户在引入模块时不带扩展\n    extensions: ['.js', '.vue', '.json'],\n    // 创建 import 或 require 的别名，来确保模块引入变得更简单。\n    alias: {\n      'vue$': 'vue/dist/vue.esm.js', // 在给定对象的键后的末尾添加 $,以表示精准匹配: 必须以 XXX 结尾\n      '@': resolve('src'), // js文件!!!中 @ 即表示为 src 文件夹, html 和 css 路径中不是\n    }\n  },\n  // 决定如何处理项目中的不同类型的模块\n  module: {\n    // 创建模块时，匹配请求的规则数组。这些规则能够修改模块的创建方式。这些规则能够对模块(module)应用 loader，或者修改解析器(parser)\n    rules: [\n      ...(config.dev.useEslint ? [createLintingRule()] : []),\n      {\n        test: /\\.vue$/,\n        loader: 'vue-loader',\n        options: vueLoaderConfig\n      },\n      {\n        test: /\\.js$/,\n        loader: 'babel-loader',\n        include: [resolve('src'), resolve('test'), resolve('node_modules/webpack-dev-server/client')]\n      },\n      {\n        test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000,\n          name: utils.assetsPath('img/[name].[hash:7].[ext]')\n        }\n      },\n      {\n        test: /\\.(mp4|webm|ogg|mp3|wav|flac|aac)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000,\n          name: utils.assetsPath('media/[name].[hash:7].[ext]')\n        }\n      },\n      {\n        test: /\\.(woff2?|eot|ttf|otf)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000,\n          name: utils.assetsPath('fonts/[name].[hash:7].[ext]')\n        }\n      }\n    ]\n  },\n  node: {\n    // prevent webpack from injecting useless setImmediate polyfill because Vue\n    // source contains it (although only uses it if it's native).\n    setImmediate: false,\n    // prevent webpack from injecting mocks to Node native modules\n    // that does not make sense for the client\n    dgram: 'empty',\n    fs: 'empty',\n    net: 'empty',\n    tls: 'empty',\n    child_process: 'empty'\n  }\n}\n```\n\n在最新的 vue-cli 3.0 中, webpack 中的设置都隐藏到了 vue 内部, 通过设置 `vue.config.js` 来覆盖相关 webpack 设置","slug":"Vue中使用Webpack总结","published":1,"updated":"2018-11-05T14:53:13.350Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo4i575g00022wsx9zkfqlpx","content":"<p>Webpack 打包工具(模块打包器)</p>\n<a id=\"more\"></a>\n<!-- markdownlint-disable MD041 MD002-->\n<h2 id=\"Webpack结构\"><a href=\"#Webpack结构\" class=\"headerlink\" title=\"Webpack结构\"></a>Webpack结构</h2><p>Vue中 关于Webpack的配置文件有四个: (vue-cli版本@2.9.6)</p>\n<ul>\n<li>build文件夹<ul>\n<li>webpack.base.conf.js 主要配置文件</li>\n<li>webpack.dev.conf.js 开发环境配置文件</li>\n<li>webpack.prod.conf.js 生产环境配置文件</li>\n<li>webpack.test.conf.js 需要单元测试时的配置文件(不选择单元测试则没有该文件)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"webpack-base-conf-js\"><a href=\"#webpack-base-conf-js\" class=\"headerlink\" title=\"webpack.base.conf.js\"></a>webpack.base.conf.js</h2><pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token string\">'use strict'</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> utils <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./utils'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../config'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> vueLoaderConfig <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./vue-loader.conf'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> resolve <span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'..'</span><span class=\"token punctuation\">,</span> dir<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> createLintingRule <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.(js|vue)$/</span><span class=\"token punctuation\">,</span>\n  loader<span class=\"token punctuation\">:</span> <span class=\"token string\">'eslint-loader'</span><span class=\"token punctuation\">,</span>\n  enforce<span class=\"token punctuation\">:</span> <span class=\"token string\">'pre'</span><span class=\"token punctuation\">,</span>\n  include<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    formatter<span class=\"token punctuation\">:</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'eslint-friendly-formatter'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    emitWarning<span class=\"token punctuation\">:</span> <span class=\"token operator\">!</span>config<span class=\"token punctuation\">.</span>dev<span class=\"token punctuation\">.</span>showEslintErrorsInOverlay\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 基础目录，绝对路径，用于从配置中解析入口起点(entry point)和 loader</span>\n  context<span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 入口配置: 可以配置多入口</span>\n  entry<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    app<span class=\"token punctuation\">:</span> <span class=\"token string\">'./src/main.js'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 出口配置</span>\n  output<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 出口路径: path必须是绝对路径</span>\n    path<span class=\"token punctuation\">:</span> config<span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">.</span>assetsRoot<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 出口文件名</span>\n    filename<span class=\"token punctuation\">:</span> <span class=\"token string\">'[name].js'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// [name]即入口名称</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 对于按需加载(on-demand-load)或加载外部资源(external resources)（如图片、文件等）来说，output.publicPath 是很重要的选项。</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 该选项的值是以 runtime(运行时) 或 loader(载入时) 所创建的每个 URL 为前缀。因此，在多数情况下，此选项的值都会以/结束。</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 可能以下情况中的一种:</span>\n    publicPath<span class=\"token punctuation\">:</span> <span class=\"token string\">'https://cdn.example.com/assets/'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// CDN（总是 HTTPS 协议）</span>\n    publicPath<span class=\"token punctuation\">:</span> <span class=\"token string\">'//cdn.example.com/assets/'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">/</span><span class=\"token operator\">/</span> CDN（协议相同）\n    publicPath<span class=\"token punctuation\">:</span> <span class=\"token string\">'/assets/'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 相对于服务(server-relative)</span>\n    publicPath<span class=\"token punctuation\">:</span> <span class=\"token string\">'assets/'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 相对于 HTML 页面</span>\n    publicPath<span class=\"token punctuation\">:</span> <span class=\"token string\">'../assets/'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 相对于 HTML 页面</span>\n    publicPath<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 相对于 HTML 页面（目录相同）</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Vue中: 判断环境变量的值,去对应的环境变量中寻找设置 config 文件夹中的 index.js</span>\n    publicPath<span class=\"token punctuation\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span>NODE_ENV <span class=\"token operator\">===</span> <span class=\"token string\">'production'</span>\n      <span class=\"token operator\">?</span> config<span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">.</span>assetsPublicPath <span class=\"token comment\" spellcheck=\"true\">// 默认为\"/\"，一般会修改为\"./\"</span>\n      <span class=\"token punctuation\">:</span> config<span class=\"token punctuation\">.</span>dev<span class=\"token punctuation\">.</span>assetsPublicPath <span class=\"token comment\" spellcheck=\"true\">// 默认为\"/\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 配置模块如何解析</span>\n  resolve<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 自动解析确定的扩展: 能够使用户在引入模块时不带扩展</span>\n    extensions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'.js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.vue'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.json'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 创建 import 或 require 的别名，来确保模块引入变得更简单。</span>\n    alias<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'vue$'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'vue/dist/vue.esm.js'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 在给定对象的键后的末尾添加 $,以表示精准匹配: 必须以 XXX 结尾</span>\n      <span class=\"token string\">'@'</span><span class=\"token punctuation\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// js文件!!!中 @ 即表示为 src 文件夹, html 和 css 路径中不是</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 决定如何处理项目中的不同类型的模块</span>\n  module<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 创建模块时，匹配请求的规则数组。这些规则能够修改模块的创建方式。这些规则能够对模块(module)应用 loader，或者修改解析器(parser)</span>\n    rules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token operator\">...</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>dev<span class=\"token punctuation\">.</span>useEslint <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token function\">createLintingRule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.vue$/</span><span class=\"token punctuation\">,</span>\n        loader<span class=\"token punctuation\">:</span> <span class=\"token string\">'vue-loader'</span><span class=\"token punctuation\">,</span>\n        options<span class=\"token punctuation\">:</span> vueLoaderConfig\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.js$/</span><span class=\"token punctuation\">,</span>\n        loader<span class=\"token punctuation\">:</span> <span class=\"token string\">'babel-loader'</span><span class=\"token punctuation\">,</span>\n        include<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'node_modules/webpack-dev-server/client'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.(png|jpe?g|gif|svg)(\\?.*)?$/</span><span class=\"token punctuation\">,</span>\n        loader<span class=\"token punctuation\">:</span> <span class=\"token string\">'url-loader'</span><span class=\"token punctuation\">,</span>\n        options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          limit<span class=\"token punctuation\">:</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">,</span>\n          name<span class=\"token punctuation\">:</span> utils<span class=\"token punctuation\">.</span><span class=\"token function\">assetsPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img/[name].[hash:7].[ext]'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.(mp4|webm|ogg|mp3|wav|flac|aac)(\\?.*)?$/</span><span class=\"token punctuation\">,</span>\n        loader<span class=\"token punctuation\">:</span> <span class=\"token string\">'url-loader'</span><span class=\"token punctuation\">,</span>\n        options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          limit<span class=\"token punctuation\">:</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">,</span>\n          name<span class=\"token punctuation\">:</span> utils<span class=\"token punctuation\">.</span><span class=\"token function\">assetsPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">'media/[name].[hash:7].[ext]'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.(woff2?|eot|ttf|otf)(\\?.*)?$/</span><span class=\"token punctuation\">,</span>\n        loader<span class=\"token punctuation\">:</span> <span class=\"token string\">'url-loader'</span><span class=\"token punctuation\">,</span>\n        options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          limit<span class=\"token punctuation\">:</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">,</span>\n          name<span class=\"token punctuation\">:</span> utils<span class=\"token punctuation\">.</span><span class=\"token function\">assetsPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fonts/[name].[hash:7].[ext]'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  node<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// prevent webpack from injecting useless setImmediate polyfill because Vue</span>\n    <span class=\"token comment\" spellcheck=\"true\">// source contains it (although only uses it if it's native).</span>\n    setImmediate<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\" spellcheck=\"true\">// prevent webpack from injecting mocks to Node native modules</span>\n    <span class=\"token comment\" spellcheck=\"true\">// that does not make sense for the client</span>\n    dgram<span class=\"token punctuation\">:</span> <span class=\"token string\">'empty'</span><span class=\"token punctuation\">,</span>\n    fs<span class=\"token punctuation\">:</span> <span class=\"token string\">'empty'</span><span class=\"token punctuation\">,</span>\n    net<span class=\"token punctuation\">:</span> <span class=\"token string\">'empty'</span><span class=\"token punctuation\">,</span>\n    tls<span class=\"token punctuation\">:</span> <span class=\"token string\">'empty'</span><span class=\"token punctuation\">,</span>\n    child_process<span class=\"token punctuation\">:</span> <span class=\"token string\">'empty'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在最新的 vue-cli 3.0 中, webpack 中的设置都隐藏到了 vue 内部, 通过设置 <code>vue.config.js</code> 来覆盖相关 webpack 设置</p>\n","site":{"data":{}},"excerpt":"<p>Webpack 打包工具(模块打包器)</p>","more":"<!-- markdownlint-disable MD041 MD002-->\n<h2 id=\"Webpack结构\"><a href=\"#Webpack结构\" class=\"headerlink\" title=\"Webpack结构\"></a>Webpack结构</h2><p>Vue中 关于Webpack的配置文件有四个: (vue-cli版本@2.9.6)</p>\n<ul>\n<li>build文件夹<ul>\n<li>webpack.base.conf.js 主要配置文件</li>\n<li>webpack.dev.conf.js 开发环境配置文件</li>\n<li>webpack.prod.conf.js 生产环境配置文件</li>\n<li>webpack.test.conf.js 需要单元测试时的配置文件(不选择单元测试则没有该文件)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"webpack-base-conf-js\"><a href=\"#webpack-base-conf-js\" class=\"headerlink\" title=\"webpack.base.conf.js\"></a>webpack.base.conf.js</h2><pre><code class=\"js\">&#39;use strict&#39;\nconst path = require(&#39;path&#39;)\nconst utils = require(&#39;./utils&#39;)\nconst config = require(&#39;../config&#39;)\nconst vueLoaderConfig = require(&#39;./vue-loader.conf&#39;)\n\nfunction resolve (dir) {\n  return path.join(__dirname, &#39;..&#39;, dir)\n}\n\nconst createLintingRule = () =&gt; ({\n  test: /\\.(js|vue)$/,\n  loader: &#39;eslint-loader&#39;,\n  enforce: &#39;pre&#39;,\n  include: [resolve(&#39;src&#39;), resolve(&#39;test&#39;)],\n  options: {\n    formatter: require(&#39;eslint-friendly-formatter&#39;),\n    emitWarning: !config.dev.showEslintErrorsInOverlay\n  }\n})\n\nmodule.exports = {\n  // 基础目录，绝对路径，用于从配置中解析入口起点(entry point)和 loader\n  context: path.resolve(__dirname, &#39;../&#39;),\n  // 入口配置: 可以配置多入口\n  entry: {\n    app: &#39;./src/main.js&#39;\n  },\n  // 出口配置\n  output: {\n    // 出口路径: path必须是绝对路径\n    path: config.build.assetsRoot,\n    // 出口文件名\n    filename: &#39;[name].js&#39;, // [name]即入口名称\n    // 对于按需加载(on-demand-load)或加载外部资源(external resources)（如图片、文件等）来说，output.publicPath 是很重要的选项。\n    // 该选项的值是以 runtime(运行时) 或 loader(载入时) 所创建的每个 URL 为前缀。因此，在多数情况下，此选项的值都会以/结束。\n    // 可能以下情况中的一种:\n    publicPath: &#39;https://cdn.example.com/assets/&#39;, // CDN（总是 HTTPS 协议）\n    publicPath: &#39;//cdn.example.com/assets/&#39;, // CDN（协议相同）\n    publicPath: &#39;/assets/&#39;, // 相对于服务(server-relative)\n    publicPath: &#39;assets/&#39;, // 相对于 HTML 页面\n    publicPath: &#39;../assets/&#39;, // 相对于 HTML 页面\n    publicPath: &#39;&#39;, // 相对于 HTML 页面（目录相同）\n    // Vue中: 判断环境变量的值,去对应的环境变量中寻找设置 config 文件夹中的 index.js\n    publicPath: process.env.NODE_ENV === &#39;production&#39;\n      ? config.build.assetsPublicPath // 默认为&quot;/&quot;，一般会修改为&quot;./&quot;\n      : config.dev.assetsPublicPath // 默认为&quot;/&quot;\n  },\n  // 配置模块如何解析\n  resolve: {\n    // 自动解析确定的扩展: 能够使用户在引入模块时不带扩展\n    extensions: [&#39;.js&#39;, &#39;.vue&#39;, &#39;.json&#39;],\n    // 创建 import 或 require 的别名，来确保模块引入变得更简单。\n    alias: {\n      &#39;vue$&#39;: &#39;vue/dist/vue.esm.js&#39;, // 在给定对象的键后的末尾添加 $,以表示精准匹配: 必须以 XXX 结尾\n      &#39;@&#39;: resolve(&#39;src&#39;), // js文件!!!中 @ 即表示为 src 文件夹, html 和 css 路径中不是\n    }\n  },\n  // 决定如何处理项目中的不同类型的模块\n  module: {\n    // 创建模块时，匹配请求的规则数组。这些规则能够修改模块的创建方式。这些规则能够对模块(module)应用 loader，或者修改解析器(parser)\n    rules: [\n      ...(config.dev.useEslint ? [createLintingRule()] : []),\n      {\n        test: /\\.vue$/,\n        loader: &#39;vue-loader&#39;,\n        options: vueLoaderConfig\n      },\n      {\n        test: /\\.js$/,\n        loader: &#39;babel-loader&#39;,\n        include: [resolve(&#39;src&#39;), resolve(&#39;test&#39;), resolve(&#39;node_modules/webpack-dev-server/client&#39;)]\n      },\n      {\n        test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n        loader: &#39;url-loader&#39;,\n        options: {\n          limit: 10000,\n          name: utils.assetsPath(&#39;img/[name].[hash:7].[ext]&#39;)\n        }\n      },\n      {\n        test: /\\.(mp4|webm|ogg|mp3|wav|flac|aac)(\\?.*)?$/,\n        loader: &#39;url-loader&#39;,\n        options: {\n          limit: 10000,\n          name: utils.assetsPath(&#39;media/[name].[hash:7].[ext]&#39;)\n        }\n      },\n      {\n        test: /\\.(woff2?|eot|ttf|otf)(\\?.*)?$/,\n        loader: &#39;url-loader&#39;,\n        options: {\n          limit: 10000,\n          name: utils.assetsPath(&#39;fonts/[name].[hash:7].[ext]&#39;)\n        }\n      }\n    ]\n  },\n  node: {\n    // prevent webpack from injecting useless setImmediate polyfill because Vue\n    // source contains it (although only uses it if it&#39;s native).\n    setImmediate: false,\n    // prevent webpack from injecting mocks to Node native modules\n    // that does not make sense for the client\n    dgram: &#39;empty&#39;,\n    fs: &#39;empty&#39;,\n    net: &#39;empty&#39;,\n    tls: &#39;empty&#39;,\n    child_process: &#39;empty&#39;\n  }\n}\n</code></pre>\n<p>在最新的 vue-cli 3.0 中, webpack 中的设置都隐藏到了 vue 内部, 通过设置 <code>vue.config.js</code> 来覆盖相关 webpack 设置</p>"},{"title":"Yarn 和 NPM 命令","description":"Yarn 和 NPM 命令","date":"2018-07-01T07:34:24.000Z","_content":"\nYarn 和 NPM 命令\n\n<!-- more -->\n<!-- markdownlint-disable MD041 MD002-->\n\n## Yarn和 NPM命令\n\n- NPM是随同 NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题\n- Yarn 是一个新的包管理器，用于替代现有的 npm 客户端或者其他兼容 npm 仓库的包管理工具。Yarn 保留了现有工作流的特性，优点是更快、更安全、更可靠。\n\n| 命令 | NPM | Yarn |\n|---|---|---|\n| 安装 | 新版的NodeJS 已经集成了NPM | `npm install -g yarn` |\n| 升级 | `npm install npm -g` | 见[Yarn升级](#Yarn升级) |\n| 安装所有的依赖包   | `npm install` | `yarn` |\n| 安装某个依赖 | `npm install [package] --save/-S` | `yarn add [package]` |\n| 安装某个开发时依赖项目 | `npm install [package] --save-dev/-D` | `yarn add [package] --dev/-D` |\n| 安装某个全局依赖项目 | `npm install [package] -g` | `yarn global add [package]` |\n| 更新某个依赖 | `npm update [package]` | `yarn upgrade [package]` |\n| 更新某个依赖到某个版本 | `npm update [package@version]` | `yarn upgrade [package@version]` |\n| 更新某个依赖到最新版本 | `npm update [package@latest]` | `yarn upgrade [package] --latest` |\n| 删除某个依赖 | `npm uninstall [package]` | `yarn remove [package]` |\n| 运行脚本 | `npm run` | `yarn run` |\n\n- 可以通过输入`npm -v`来测试是否成功安装\n\n```bash\nnpm -v\n6.2.0\n```\n\n### NPM 常用命令\n\n- NPM提供了很多命令，使用`npm help`可查看所有命令。\n- 使用`npm help <command>`可查看某条命令的详细帮助，例如`npm help install`\n\n### 使用淘宝 NPM 镜像\n\n[NPM和 Yarn添加淘宝镜像](/2018/07/01/前端开发环境配置/#NPM和Yarn添加淘宝镜像)\n\n### Yarn升级\n\n#### 通过msi安装升级 Yarn\n\n[下载最新的yarn更新包](https://yarnpkg.com/lang/zh-hans/docs/install/#windows-stable)\n\n- 通过 msi 安装的 yarn 并不会覆盖通过 npm 安装的 yarn，两者同时存在。卸载的话，也是分开卸载的。\n\n#### NPM加版本号安装\n\n虽然，我们不能通过`npm install yarn -g`的方法，获得最新的yarn。但是，我们已经知道了yarn的最新版的版本号，所以，我们可以直接指定版本号进行安装。\n\n```bash\nnpm install yarn@1.9.2 -g\n```\n\n这样的话，就可以不使用msi，而还是采用更高大上的命令行模式安装最新版的yarn了。\n我们可以用`npm view yarn version`，查看NPM上的最新版本。\n\n#### NPM 加 latest 安装\n\n```bash\nnpm install yarn@latest -g\n```","source":"_posts/Yarn和NPM命令.md","raw":"---\ntitle: 'Yarn 和 NPM 命令'\ntags:\n  - NPM\n  - Yarn\ncategories: 前端工具\ndescription: Yarn 和 NPM 命令\ndate: 2018-07-01 15:34:24\n---\n\nYarn 和 NPM 命令\n\n<!-- more -->\n<!-- markdownlint-disable MD041 MD002-->\n\n## Yarn和 NPM命令\n\n- NPM是随同 NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题\n- Yarn 是一个新的包管理器，用于替代现有的 npm 客户端或者其他兼容 npm 仓库的包管理工具。Yarn 保留了现有工作流的特性，优点是更快、更安全、更可靠。\n\n| 命令 | NPM | Yarn |\n|---|---|---|\n| 安装 | 新版的NodeJS 已经集成了NPM | `npm install -g yarn` |\n| 升级 | `npm install npm -g` | 见[Yarn升级](#Yarn升级) |\n| 安装所有的依赖包   | `npm install` | `yarn` |\n| 安装某个依赖 | `npm install [package] --save/-S` | `yarn add [package]` |\n| 安装某个开发时依赖项目 | `npm install [package] --save-dev/-D` | `yarn add [package] --dev/-D` |\n| 安装某个全局依赖项目 | `npm install [package] -g` | `yarn global add [package]` |\n| 更新某个依赖 | `npm update [package]` | `yarn upgrade [package]` |\n| 更新某个依赖到某个版本 | `npm update [package@version]` | `yarn upgrade [package@version]` |\n| 更新某个依赖到最新版本 | `npm update [package@latest]` | `yarn upgrade [package] --latest` |\n| 删除某个依赖 | `npm uninstall [package]` | `yarn remove [package]` |\n| 运行脚本 | `npm run` | `yarn run` |\n\n- 可以通过输入`npm -v`来测试是否成功安装\n\n```bash\nnpm -v\n6.2.0\n```\n\n### NPM 常用命令\n\n- NPM提供了很多命令，使用`npm help`可查看所有命令。\n- 使用`npm help <command>`可查看某条命令的详细帮助，例如`npm help install`\n\n### 使用淘宝 NPM 镜像\n\n[NPM和 Yarn添加淘宝镜像](/2018/07/01/前端开发环境配置/#NPM和Yarn添加淘宝镜像)\n\n### Yarn升级\n\n#### 通过msi安装升级 Yarn\n\n[下载最新的yarn更新包](https://yarnpkg.com/lang/zh-hans/docs/install/#windows-stable)\n\n- 通过 msi 安装的 yarn 并不会覆盖通过 npm 安装的 yarn，两者同时存在。卸载的话，也是分开卸载的。\n\n#### NPM加版本号安装\n\n虽然，我们不能通过`npm install yarn -g`的方法，获得最新的yarn。但是，我们已经知道了yarn的最新版的版本号，所以，我们可以直接指定版本号进行安装。\n\n```bash\nnpm install yarn@1.9.2 -g\n```\n\n这样的话，就可以不使用msi，而还是采用更高大上的命令行模式安装最新版的yarn了。\n我们可以用`npm view yarn version`，查看NPM上的最新版本。\n\n#### NPM 加 latest 安装\n\n```bash\nnpm install yarn@latest -g\n```","slug":"Yarn和NPM命令","published":1,"updated":"2018-11-05T14:37:17.234Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo4i575m00062wsxz1ru74a3","content":"<p>Yarn 和 NPM 命令</p>\n<a id=\"more\"></a>\n<!-- markdownlint-disable MD041 MD002-->\n<h2 id=\"Yarn和-NPM命令\"><a href=\"#Yarn和-NPM命令\" class=\"headerlink\" title=\"Yarn和 NPM命令\"></a>Yarn和 NPM命令</h2><ul>\n<li>NPM是随同 NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题</li>\n<li>Yarn 是一个新的包管理器，用于替代现有的 npm 客户端或者其他兼容 npm 仓库的包管理工具。Yarn 保留了现有工作流的特性，优点是更快、更安全、更可靠。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>NPM</th>\n<th>Yarn</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>安装</td>\n<td>新版的NodeJS 已经集成了NPM</td>\n<td><code>npm install -g yarn</code></td>\n</tr>\n<tr>\n<td>升级</td>\n<td><code>npm install npm -g</code></td>\n<td>见<a href=\"#Yarn升级\">Yarn升级</a></td>\n</tr>\n<tr>\n<td>安装所有的依赖包</td>\n<td><code>npm install</code></td>\n<td><code>yarn</code></td>\n</tr>\n<tr>\n<td>安装某个依赖</td>\n<td><code>npm install [package] --save/-S</code></td>\n<td><code>yarn add [package]</code></td>\n</tr>\n<tr>\n<td>安装某个开发时依赖项目</td>\n<td><code>npm install [package] --save-dev/-D</code></td>\n<td><code>yarn add [package] --dev/-D</code></td>\n</tr>\n<tr>\n<td>安装某个全局依赖项目</td>\n<td><code>npm install [package] -g</code></td>\n<td><code>yarn global add [package]</code></td>\n</tr>\n<tr>\n<td>更新某个依赖</td>\n<td><code>npm update [package]</code></td>\n<td><code>yarn upgrade [package]</code></td>\n</tr>\n<tr>\n<td>更新某个依赖到某个版本</td>\n<td><code>npm update [package@version]</code></td>\n<td><code>yarn upgrade [package@version]</code></td>\n</tr>\n<tr>\n<td>更新某个依赖到最新版本</td>\n<td><code>npm update [package@latest]</code></td>\n<td><code>yarn upgrade [package] --latest</code></td>\n</tr>\n<tr>\n<td>删除某个依赖</td>\n<td><code>npm uninstall [package]</code></td>\n<td><code>yarn remove [package]</code></td>\n</tr>\n<tr>\n<td>运行脚本</td>\n<td><code>npm run</code></td>\n<td><code>yarn run</code></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>可以通过输入<code>npm -v</code>来测试是否成功安装</li>\n</ul>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> -v\n6.2.0\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"NPM-常用命令\"><a href=\"#NPM-常用命令\" class=\"headerlink\" title=\"NPM 常用命令\"></a>NPM 常用命令</h3><ul>\n<li>NPM提供了很多命令，使用<code>npm help</code>可查看所有命令。</li>\n<li>使用<code>npm help &lt;command&gt;</code>可查看某条命令的详细帮助，例如<code>npm help install</code></li>\n</ul>\n<h3 id=\"使用淘宝-NPM-镜像\"><a href=\"#使用淘宝-NPM-镜像\" class=\"headerlink\" title=\"使用淘宝 NPM 镜像\"></a>使用淘宝 NPM 镜像</h3><p><a href=\"/2018/07/01/前端开发环境配置/#NPM和Yarn添加淘宝镜像\">NPM和 Yarn添加淘宝镜像</a></p>\n<h3 id=\"Yarn升级\"><a href=\"#Yarn升级\" class=\"headerlink\" title=\"Yarn升级\"></a>Yarn升级</h3><h4 id=\"通过msi安装升级-Yarn\"><a href=\"#通过msi安装升级-Yarn\" class=\"headerlink\" title=\"通过msi安装升级 Yarn\"></a>通过msi安装升级 Yarn</h4><p><a href=\"https://yarnpkg.com/lang/zh-hans/docs/install/#windows-stable\" target=\"_blank\" rel=\"noopener\">下载最新的yarn更新包</a></p>\n<ul>\n<li>通过 msi 安装的 yarn 并不会覆盖通过 npm 安装的 yarn，两者同时存在。卸载的话，也是分开卸载的。</li>\n</ul>\n<h4 id=\"NPM加版本号安装\"><a href=\"#NPM加版本号安装\" class=\"headerlink\" title=\"NPM加版本号安装\"></a>NPM加版本号安装</h4><p>虽然，我们不能通过<code>npm install yarn -g</code>的方法，获得最新的yarn。但是，我们已经知道了yarn的最新版的版本号，所以，我们可以直接指定版本号进行安装。</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> yarn@1.9.2 -g\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这样的话，就可以不使用msi，而还是采用更高大上的命令行模式安装最新版的yarn了。<br>我们可以用<code>npm view yarn version</code>，查看NPM上的最新版本。</p>\n<h4 id=\"NPM-加-latest-安装\"><a href=\"#NPM-加-latest-安装\" class=\"headerlink\" title=\"NPM 加 latest 安装\"></a>NPM 加 latest 安装</h4><pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> yarn@latest -g\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"<p>Yarn 和 NPM 命令</p>","more":"<!-- markdownlint-disable MD041 MD002-->\n<h2 id=\"Yarn和-NPM命令\"><a href=\"#Yarn和-NPM命令\" class=\"headerlink\" title=\"Yarn和 NPM命令\"></a>Yarn和 NPM命令</h2><ul>\n<li>NPM是随同 NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题</li>\n<li>Yarn 是一个新的包管理器，用于替代现有的 npm 客户端或者其他兼容 npm 仓库的包管理工具。Yarn 保留了现有工作流的特性，优点是更快、更安全、更可靠。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>NPM</th>\n<th>Yarn</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>安装</td>\n<td>新版的NodeJS 已经集成了NPM</td>\n<td><code>npm install -g yarn</code></td>\n</tr>\n<tr>\n<td>升级</td>\n<td><code>npm install npm -g</code></td>\n<td>见<a href=\"#Yarn升级\">Yarn升级</a></td>\n</tr>\n<tr>\n<td>安装所有的依赖包</td>\n<td><code>npm install</code></td>\n<td><code>yarn</code></td>\n</tr>\n<tr>\n<td>安装某个依赖</td>\n<td><code>npm install [package] --save/-S</code></td>\n<td><code>yarn add [package]</code></td>\n</tr>\n<tr>\n<td>安装某个开发时依赖项目</td>\n<td><code>npm install [package] --save-dev/-D</code></td>\n<td><code>yarn add [package] --dev/-D</code></td>\n</tr>\n<tr>\n<td>安装某个全局依赖项目</td>\n<td><code>npm install [package] -g</code></td>\n<td><code>yarn global add [package]</code></td>\n</tr>\n<tr>\n<td>更新某个依赖</td>\n<td><code>npm update [package]</code></td>\n<td><code>yarn upgrade [package]</code></td>\n</tr>\n<tr>\n<td>更新某个依赖到某个版本</td>\n<td><code>npm update [package@version]</code></td>\n<td><code>yarn upgrade [package@version]</code></td>\n</tr>\n<tr>\n<td>更新某个依赖到最新版本</td>\n<td><code>npm update [package@latest]</code></td>\n<td><code>yarn upgrade [package] --latest</code></td>\n</tr>\n<tr>\n<td>删除某个依赖</td>\n<td><code>npm uninstall [package]</code></td>\n<td><code>yarn remove [package]</code></td>\n</tr>\n<tr>\n<td>运行脚本</td>\n<td><code>npm run</code></td>\n<td><code>yarn run</code></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>可以通过输入<code>npm -v</code>来测试是否成功安装</li>\n</ul>\n<pre><code class=\"bash\">npm -v\n6.2.0\n</code></pre>\n<h3 id=\"NPM-常用命令\"><a href=\"#NPM-常用命令\" class=\"headerlink\" title=\"NPM 常用命令\"></a>NPM 常用命令</h3><ul>\n<li>NPM提供了很多命令，使用<code>npm help</code>可查看所有命令。</li>\n<li>使用<code>npm help &lt;command&gt;</code>可查看某条命令的详细帮助，例如<code>npm help install</code></li>\n</ul>\n<h3 id=\"使用淘宝-NPM-镜像\"><a href=\"#使用淘宝-NPM-镜像\" class=\"headerlink\" title=\"使用淘宝 NPM 镜像\"></a>使用淘宝 NPM 镜像</h3><p><a href=\"/2018/07/01/前端开发环境配置/#NPM和Yarn添加淘宝镜像\">NPM和 Yarn添加淘宝镜像</a></p>\n<h3 id=\"Yarn升级\"><a href=\"#Yarn升级\" class=\"headerlink\" title=\"Yarn升级\"></a>Yarn升级</h3><h4 id=\"通过msi安装升级-Yarn\"><a href=\"#通过msi安装升级-Yarn\" class=\"headerlink\" title=\"通过msi安装升级 Yarn\"></a>通过msi安装升级 Yarn</h4><p><a href=\"https://yarnpkg.com/lang/zh-hans/docs/install/#windows-stable\" target=\"_blank\" rel=\"noopener\">下载最新的yarn更新包</a></p>\n<ul>\n<li>通过 msi 安装的 yarn 并不会覆盖通过 npm 安装的 yarn，两者同时存在。卸载的话，也是分开卸载的。</li>\n</ul>\n<h4 id=\"NPM加版本号安装\"><a href=\"#NPM加版本号安装\" class=\"headerlink\" title=\"NPM加版本号安装\"></a>NPM加版本号安装</h4><p>虽然，我们不能通过<code>npm install yarn -g</code>的方法，获得最新的yarn。但是，我们已经知道了yarn的最新版的版本号，所以，我们可以直接指定版本号进行安装。</p>\n<pre><code class=\"bash\">npm install yarn@1.9.2 -g\n</code></pre>\n<p>这样的话，就可以不使用msi，而还是采用更高大上的命令行模式安装最新版的yarn了。<br>我们可以用<code>npm view yarn version</code>，查看NPM上的最新版本。</p>\n<h4 id=\"NPM-加-latest-安装\"><a href=\"#NPM-加-latest-安装\" class=\"headerlink\" title=\"NPM 加 latest 安装\"></a>NPM 加 latest 安装</h4><pre><code class=\"bash\">npm install yarn@latest -g\n</code></pre>"},{"title":"path.join 和 path.resolve区别","description":"path.join 和 path.resolve区别","date":"2018-08-06T02:11:44.000Z","_content":"\npath.join & path.resolve\n\n<!-- more -->\n<!-- markdownlint-disable MD041 MD002-->\n\n## path.join([path1][, path2][, ...])\n\n`path.join()`: 连接任意多个路径字符串。\n\n注：如果连接后的路径字符串是一个长度为零的字符串, 则返回 `'.'`, 表示当前工作目录。\n\n```js\npath.join('foo', 'bar', 'baz')\n// 返回\n'/foo/bar/baz'\n\n// 不合法的字符串将抛出异常\npath.join('foo', {}, 'bar')\n// 抛出的异常\nTypeError: Arguments to path.join must be strings'\n```\n\n## path.resolve([from...], to)\n\n`path.resolve()`: 将多个路径解析为一个规范化的绝对路径。\n\n其处理方式类似于对这些路径逐一进行 `cd` 操作, 与 `cd` 操作不同的是, 这引起路径可以是文件, 并且可不必实际存在（`resolve()`方法不会利用底层的文件系统判断路径是否存在, 而只是进行路径字符串操作。）\n\n`path.resolve('foo/bar', '/tmp/file/', '..', 'a/../subFile')` 相当于:\n\n```bash\ncd foo/bar\ncd /tmp/file/\ncd ..\ncd a/../subFile\npwd\n# Linux pwd命令用于显示工作目录。执行 pwd 指令可立刻得知您目前所在的工作目录的绝对路径名称。\n```\n\n```js\npath.resolve('/foo/bar', './baz')\n// 输出结果为\n'/foo/bar/baz'\npath.resolve('/foo/bar', '/tmp/file/')\n// 输出结果为\n'/tmp/file'\n\npath.resolve('wwwroot', 'static_files/png/', '../gif/image.gif')\n// 当前的工作路径是 /home/myself/node, 则输出结果为\n'/home/myself/node/wwwroot/static_files/gif/image.gif'\n```\n\n## 两者的区别\n\n- `join` 是把各个 path 片段连接在一起， `resolve` 把`'/'` 当成根目录\n\n  ```js\n  path.join('/a', '/b') // '/a/b'\n  path.resolve('/a', '/b') // '/b'\n  ```\n\n- `join` 直接拼接字段，`resolve` 解析路径并返回绝对路径\n\n  ```js\n  path.join('a', 'b1', '..', 'b2')\n  // 'a/b2'\n\n  path.resolve('a', 'b1', '..', 'b2')\n  // '/home/myself/node/a/b2'\n  ```","source":"_posts/path.join和path.resolve区别.md","raw":"---\ntitle: path.join 和 path.resolve区别\ntags: JavaScript\ncategories: JavaScript\ndescription: path.join 和 path.resolve区别 \ndate: 2018-08-06 10:11:44\n---\n\npath.join & path.resolve\n\n<!-- more -->\n<!-- markdownlint-disable MD041 MD002-->\n\n## path.join([path1][, path2][, ...])\n\n`path.join()`: 连接任意多个路径字符串。\n\n注：如果连接后的路径字符串是一个长度为零的字符串, 则返回 `'.'`, 表示当前工作目录。\n\n```js\npath.join('foo', 'bar', 'baz')\n// 返回\n'/foo/bar/baz'\n\n// 不合法的字符串将抛出异常\npath.join('foo', {}, 'bar')\n// 抛出的异常\nTypeError: Arguments to path.join must be strings'\n```\n\n## path.resolve([from...], to)\n\n`path.resolve()`: 将多个路径解析为一个规范化的绝对路径。\n\n其处理方式类似于对这些路径逐一进行 `cd` 操作, 与 `cd` 操作不同的是, 这引起路径可以是文件, 并且可不必实际存在（`resolve()`方法不会利用底层的文件系统判断路径是否存在, 而只是进行路径字符串操作。）\n\n`path.resolve('foo/bar', '/tmp/file/', '..', 'a/../subFile')` 相当于:\n\n```bash\ncd foo/bar\ncd /tmp/file/\ncd ..\ncd a/../subFile\npwd\n# Linux pwd命令用于显示工作目录。执行 pwd 指令可立刻得知您目前所在的工作目录的绝对路径名称。\n```\n\n```js\npath.resolve('/foo/bar', './baz')\n// 输出结果为\n'/foo/bar/baz'\npath.resolve('/foo/bar', '/tmp/file/')\n// 输出结果为\n'/tmp/file'\n\npath.resolve('wwwroot', 'static_files/png/', '../gif/image.gif')\n// 当前的工作路径是 /home/myself/node, 则输出结果为\n'/home/myself/node/wwwroot/static_files/gif/image.gif'\n```\n\n## 两者的区别\n\n- `join` 是把各个 path 片段连接在一起， `resolve` 把`'/'` 当成根目录\n\n  ```js\n  path.join('/a', '/b') // '/a/b'\n  path.resolve('/a', '/b') // '/b'\n  ```\n\n- `join` 直接拼接字段，`resolve` 解析路径并返回绝对路径\n\n  ```js\n  path.join('a', 'b1', '..', 'b2')\n  // 'a/b2'\n\n  path.resolve('a', 'b1', '..', 'b2')\n  // '/home/myself/node/a/b2'\n  ```","slug":"path.join和path.resolve区别","published":1,"updated":"2018-11-05T15:56:07.229Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo4i575p00082wsxej1j3o8d","content":"<p>path.join &amp; path.resolve</p>\n<a id=\"more\"></a>\n<!-- markdownlint-disable MD041 MD002-->\n<h2 id=\"path-join-path1-path2-…\"><a href=\"#path-join-path1-path2-…\" class=\"headerlink\" title=\"path.join([path1][, path2][, …])\"></a>path.join([path1][, path2][, …])</h2><p><code>path.join()</code>: 连接任意多个路径字符串。</p>\n<p>注：如果连接后的路径字符串是一个长度为零的字符串, 则返回 <code>&#39;.&#39;</code>, 表示当前工作目录。</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\">path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'baz'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">// 返回</span>\n<span class=\"token string\">'/foo/bar/baz'</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 不合法的字符串将抛出异常</span>\npath<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">// 抛出的异常</span>\nTypeError<span class=\"token punctuation\">:</span> Arguments to path<span class=\"token punctuation\">.</span>join must be strings'\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"path-resolve-from…-to\"><a href=\"#path-resolve-from…-to\" class=\"headerlink\" title=\"path.resolve([from…], to)\"></a>path.resolve([from…], to)</h2><p><code>path.resolve()</code>: 将多个路径解析为一个规范化的绝对路径。</p>\n<p>其处理方式类似于对这些路径逐一进行 <code>cd</code> 操作, 与 <code>cd</code> 操作不同的是, 这引起路径可以是文件, 并且可不必实际存在（<code>resolve()</code>方法不会利用底层的文件系统判断路径是否存在, 而只是进行路径字符串操作。）</p>\n<p><code>path.resolve(&#39;foo/bar&#39;, &#39;/tmp/file/&#39;, &#39;..&#39;, &#39;a/../subFile&#39;)</code> 相当于:</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">cd</span> foo/bar\n<span class=\"token function\">cd</span> /tmp/file/\n<span class=\"token function\">cd</span> <span class=\"token punctuation\">..</span>\n<span class=\"token function\">cd</span> a/<span class=\"token punctuation\">..</span>/subFile\n<span class=\"token function\">pwd</span>\n<span class=\"token comment\" spellcheck=\"true\"># Linux pwd命令用于显示工作目录。执行 pwd 指令可立刻得知您目前所在的工作目录的绝对路径名称。</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\">path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/foo/bar'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'./baz'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">// 输出结果为</span>\n<span class=\"token string\">'/foo/bar/baz'</span>\npath<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/foo/bar'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/tmp/file/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">// 输出结果为</span>\n<span class=\"token string\">'/tmp/file'</span>\n\npath<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'wwwroot'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'static_files/png/'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'../gif/image.gif'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">// 当前的工作路径是 /home/myself/node, 则输出结果为</span>\n<span class=\"token string\">'/home/myself/node/wwwroot/static_files/gif/image.gif'</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"两者的区别\"><a href=\"#两者的区别\" class=\"headerlink\" title=\"两者的区别\"></a>两者的区别</h2><ul>\n<li><p><code>join</code> 是把各个 path 片段连接在一起， <code>resolve</code> 把<code>&#39;/&#39;</code> 当成根目录</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\">path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/b'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// '/a/b'</span>\npath<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/b'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// '/b'</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p><code>join</code> 直接拼接字段，<code>resolve</code> 解析路径并返回绝对路径</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\">path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'..'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b2'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">// 'a/b2'</span>\n\npath<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'..'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b2'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">// '/home/myself/node/a/b2'</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>path.join &amp; path.resolve</p>","more":"<!-- markdownlint-disable MD041 MD002-->\n<h2 id=\"path-join-path1-path2-…\"><a href=\"#path-join-path1-path2-…\" class=\"headerlink\" title=\"path.join([path1][, path2][, …])\"></a>path.join([path1][, path2][, …])</h2><p><code>path.join()</code>: 连接任意多个路径字符串。</p>\n<p>注：如果连接后的路径字符串是一个长度为零的字符串, 则返回 <code>&#39;.&#39;</code>, 表示当前工作目录。</p>\n<pre><code class=\"js\">path.join(&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;)\n// 返回\n&#39;/foo/bar/baz&#39;\n\n// 不合法的字符串将抛出异常\npath.join(&#39;foo&#39;, {}, &#39;bar&#39;)\n// 抛出的异常\nTypeError: Arguments to path.join must be strings&#39;\n</code></pre>\n<h2 id=\"path-resolve-from…-to\"><a href=\"#path-resolve-from…-to\" class=\"headerlink\" title=\"path.resolve([from…], to)\"></a>path.resolve([from…], to)</h2><p><code>path.resolve()</code>: 将多个路径解析为一个规范化的绝对路径。</p>\n<p>其处理方式类似于对这些路径逐一进行 <code>cd</code> 操作, 与 <code>cd</code> 操作不同的是, 这引起路径可以是文件, 并且可不必实际存在（<code>resolve()</code>方法不会利用底层的文件系统判断路径是否存在, 而只是进行路径字符串操作。）</p>\n<p><code>path.resolve(&#39;foo/bar&#39;, &#39;/tmp/file/&#39;, &#39;..&#39;, &#39;a/../subFile&#39;)</code> 相当于:</p>\n<pre><code class=\"bash\">cd foo/bar\ncd /tmp/file/\ncd ..\ncd a/../subFile\npwd\n# Linux pwd命令用于显示工作目录。执行 pwd 指令可立刻得知您目前所在的工作目录的绝对路径名称。\n</code></pre>\n<pre><code class=\"js\">path.resolve(&#39;/foo/bar&#39;, &#39;./baz&#39;)\n// 输出结果为\n&#39;/foo/bar/baz&#39;\npath.resolve(&#39;/foo/bar&#39;, &#39;/tmp/file/&#39;)\n// 输出结果为\n&#39;/tmp/file&#39;\n\npath.resolve(&#39;wwwroot&#39;, &#39;static_files/png/&#39;, &#39;../gif/image.gif&#39;)\n// 当前的工作路径是 /home/myself/node, 则输出结果为\n&#39;/home/myself/node/wwwroot/static_files/gif/image.gif&#39;\n</code></pre>\n<h2 id=\"两者的区别\"><a href=\"#两者的区别\" class=\"headerlink\" title=\"两者的区别\"></a>两者的区别</h2><ul>\n<li><p><code>join</code> 是把各个 path 片段连接在一起， <code>resolve</code> 把<code>&#39;/&#39;</code> 当成根目录</p>\n<pre><code class=\"js\">path.join(&#39;/a&#39;, &#39;/b&#39;) // &#39;/a/b&#39;\npath.resolve(&#39;/a&#39;, &#39;/b&#39;) // &#39;/b&#39;\n</code></pre>\n</li>\n<li><p><code>join</code> 直接拼接字段，<code>resolve</code> 解析路径并返回绝对路径</p>\n<pre><code class=\"js\">path.join(&#39;a&#39;, &#39;b1&#39;, &#39;..&#39;, &#39;b2&#39;)\n// &#39;a/b2&#39;\n\npath.resolve(&#39;a&#39;, &#39;b1&#39;, &#39;..&#39;, &#39;b2&#39;)\n// &#39;/home/myself/node/a/b2&#39;\n</code></pre>\n</li>\n</ul>"},{"title":"hexo文章模板设置","description":"hexo文章模板设置","date":"2018-11-05T14:57:26.000Z","_content":"\nhexo文章模板设置\n\n<!-- more -->\n<!-- markdownlint-disable MD041 MD002-->\n\n## hexo文章模板设置\n\nhexo 项目文件夹中的 scaffold 文件夹中的 `post.md` 和 `draft.md`\n\n对应就是 `hexo new [layout] <title>` 中的 `layout` , 默认为 `post`, 草稿为 `draft`, 如果标题包含空格的话，请使用引号括起来。\n\n```bash\n---\ntitle: {{ title }}\ntags:\ncategories:\ndescription:\ndate: {{ date }}\n---\n\n点击阅读前文前, 首页能看到的文章的简短描述\n\n<!-- more -->\n<!-- markdownlint-disable MD041 MD002--> # 防止 markdownlint 报错\n```\n\n## hexo 草稿\n\nHexo 的一种特殊布局：`draft`, 这种布局在建立时会被保存到 `source/_drafts` 文件夹, 您可通过 `publish` 命令将草稿移动到 `source/_posts` 文件夹。\n\n该命令的使用方式与 `new` 十分类似, 您也可在命令中指定 `layout` 来指定布局。\n\n```js\nhexo publish [layout] <title> # 发表草稿\n```\n\n草稿默认不会显示在页面中, 您可在执行时加上 `--draft` 参数, 或是把 `render_drafts` 参数设为 `true` 来预览草稿。\n\n## hexo 分类和标签\n\n**分类**具有顺序性和层次性。Hexo 不支持指定多个同级分类。\n\n**标签**没有顺序和层次。\n\n```yml\ncategories:\n- Diary\n- Life\ntags:\n- PS3\n- Games\n```\n\n以上会使分类 `Life` 成为 `Diary` 的子分类, 而不是并列分类。\n\n因此，有必要为您的文章选择**尽可能准确的一个分类**","source":"_posts/hexo文章模板设置.md","raw":"---\ntitle: hexo文章模板设置\ntags: Hexo\ncategories: Hexo\ndescription: hexo文章模板设置\ndate: 2018-11-05 22:57:26\n---\n\nhexo文章模板设置\n\n<!-- more -->\n<!-- markdownlint-disable MD041 MD002-->\n\n## hexo文章模板设置\n\nhexo 项目文件夹中的 scaffold 文件夹中的 `post.md` 和 `draft.md`\n\n对应就是 `hexo new [layout] <title>` 中的 `layout` , 默认为 `post`, 草稿为 `draft`, 如果标题包含空格的话，请使用引号括起来。\n\n```bash\n---\ntitle: {{ title }}\ntags:\ncategories:\ndescription:\ndate: {{ date }}\n---\n\n点击阅读前文前, 首页能看到的文章的简短描述\n\n<!-- more -->\n<!-- markdownlint-disable MD041 MD002--> # 防止 markdownlint 报错\n```\n\n## hexo 草稿\n\nHexo 的一种特殊布局：`draft`, 这种布局在建立时会被保存到 `source/_drafts` 文件夹, 您可通过 `publish` 命令将草稿移动到 `source/_posts` 文件夹。\n\n该命令的使用方式与 `new` 十分类似, 您也可在命令中指定 `layout` 来指定布局。\n\n```js\nhexo publish [layout] <title> # 发表草稿\n```\n\n草稿默认不会显示在页面中, 您可在执行时加上 `--draft` 参数, 或是把 `render_drafts` 参数设为 `true` 来预览草稿。\n\n## hexo 分类和标签\n\n**分类**具有顺序性和层次性。Hexo 不支持指定多个同级分类。\n\n**标签**没有顺序和层次。\n\n```yml\ncategories:\n- Diary\n- Life\ntags:\n- PS3\n- Games\n```\n\n以上会使分类 `Life` 成为 `Diary` 的子分类, 而不是并列分类。\n\n因此，有必要为您的文章选择**尽可能准确的一个分类**","slug":"hexo文章模板设置","published":1,"updated":"2018-11-05T16:04:32.129Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo4i575r00092wsxtwregh0y","content":"<p>hexo文章模板设置</p>\n<a id=\"more\"></a>\n<!-- markdownlint-disable MD041 MD002-->\n<h2 id=\"hexo文章模板设置\"><a href=\"#hexo文章模板设置\" class=\"headerlink\" title=\"hexo文章模板设置\"></a>hexo文章模板设置</h2><p>hexo 项目文件夹中的 scaffold 文件夹中的 <code>post.md</code> 和 <code>draft.md</code></p>\n<p>对应就是 <code>hexo new [layout] &lt;title&gt;</code> 中的 <code>layout</code> , 默认为 <code>post</code>, 草稿为 <code>draft</code>, 如果标题包含空格的话，请使用引号括起来。</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">---\ntitle: <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> title <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\ntags:\ncategories:\ndescription:\ndate: <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token function\">date</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n---\n\n点击阅读前文前, 首页能看到的文章的简短描述\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>-- <span class=\"token function\">more</span> --<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>-- markdownlint-disable MD041 MD002--<span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\"># 防止 markdownlint 报错</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"hexo-草稿\"><a href=\"#hexo-草稿\" class=\"headerlink\" title=\"hexo 草稿\"></a>hexo 草稿</h2><p>Hexo 的一种特殊布局：<code>draft</code>, 这种布局在建立时会被保存到 <code>source/_drafts</code> 文件夹, 您可通过 <code>publish</code> 命令将草稿移动到 <code>source/_posts</code> 文件夹。</p>\n<p>该命令的使用方式与 <code>new</code> 十分类似, 您也可在命令中指定 <code>layout</code> 来指定布局。</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\">hexo publish <span class=\"token punctuation\">[</span>layout<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span> # 发表草稿\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>草稿默认不会显示在页面中, 您可在执行时加上 <code>--draft</code> 参数, 或是把 <code>render_drafts</code> 参数设为 <code>true</code> 来预览草稿。</p>\n<h2 id=\"hexo-分类和标签\"><a href=\"#hexo-分类和标签\" class=\"headerlink\" title=\"hexo 分类和标签\"></a>hexo 分类和标签</h2><p><strong>分类</strong>具有顺序性和层次性。Hexo 不支持指定多个同级分类。</p>\n<p><strong>标签</strong>没有顺序和层次。</p>\n<pre class=\"line-numbers language-yml\"><code class=\"language-yml\">categories:\n- Diary\n- Life\ntags:\n- PS3\n- Games\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>以上会使分类 <code>Life</code> 成为 <code>Diary</code> 的子分类, 而不是并列分类。</p>\n<p>因此，有必要为您的文章选择<strong>尽可能准确的一个分类</strong></p>\n","site":{"data":{}},"excerpt":"<p>hexo文章模板设置</p>","more":"<!-- markdownlint-disable MD041 MD002-->\n<h2 id=\"hexo文章模板设置\"><a href=\"#hexo文章模板设置\" class=\"headerlink\" title=\"hexo文章模板设置\"></a>hexo文章模板设置</h2><p>hexo 项目文件夹中的 scaffold 文件夹中的 <code>post.md</code> 和 <code>draft.md</code></p>\n<p>对应就是 <code>hexo new [layout] &lt;title&gt;</code> 中的 <code>layout</code> , 默认为 <code>post</code>, 草稿为 <code>draft</code>, 如果标题包含空格的话，请使用引号括起来。</p>\n<pre><code class=\"bash\">---\ntitle: {{ title }}\ntags:\ncategories:\ndescription:\ndate: {{ date }}\n---\n\n点击阅读前文前, 首页能看到的文章的简短描述\n\n&lt;!-- more --&gt;\n&lt;!-- markdownlint-disable MD041 MD002--&gt; # 防止 markdownlint 报错\n</code></pre>\n<h2 id=\"hexo-草稿\"><a href=\"#hexo-草稿\" class=\"headerlink\" title=\"hexo 草稿\"></a>hexo 草稿</h2><p>Hexo 的一种特殊布局：<code>draft</code>, 这种布局在建立时会被保存到 <code>source/_drafts</code> 文件夹, 您可通过 <code>publish</code> 命令将草稿移动到 <code>source/_posts</code> 文件夹。</p>\n<p>该命令的使用方式与 <code>new</code> 十分类似, 您也可在命令中指定 <code>layout</code> 来指定布局。</p>\n<pre><code class=\"js\">hexo publish [layout] &lt;title&gt; # 发表草稿\n</code></pre>\n<p>草稿默认不会显示在页面中, 您可在执行时加上 <code>--draft</code> 参数, 或是把 <code>render_drafts</code> 参数设为 <code>true</code> 来预览草稿。</p>\n<h2 id=\"hexo-分类和标签\"><a href=\"#hexo-分类和标签\" class=\"headerlink\" title=\"hexo 分类和标签\"></a>hexo 分类和标签</h2><p><strong>分类</strong>具有顺序性和层次性。Hexo 不支持指定多个同级分类。</p>\n<p><strong>标签</strong>没有顺序和层次。</p>\n<pre><code class=\"yml\">categories:\n- Diary\n- Life\ntags:\n- PS3\n- Games\n</code></pre>\n<p>以上会使分类 <code>Life</code> 成为 <code>Diary</code> 的子分类, 而不是并列分类。</p>\n<p>因此，有必要为您的文章选择<strong>尽可能准确的一个分类</strong></p>"},{"title":"前端开发环境配置","description":"前端开发环境配置","date":"2018-07-01T08:19:21.000Z","_content":"\n前端开发环境配置、淘宝镜像及跨域处理\n\n<!-- more -->\n<!-- markdownlint-disable MD041 MD002-->\n\n## 开发环境准备工作\n\n### 安装软件\n\n- [NodeJS](https://nodejs.org/en/) 10版本以上\n- [win][Cmder](http://cmder.net)\n- [VS Code](https://code.visualstudio.com)\n- [win][Git](https://github.com/waylau/git-for-win)\n\n### NPM和Yarn添加淘宝镜像\n\n#### NPM设置淘宝镜像\n\n- 查询当前配置的镜像\n\n```bash\nnpm get registry  // https://registry.npmjs.org/\n```\n\n- 设置成淘宝镜像\n\n```bash\nnpm config set registry http://registry.npm.taobao.org/\n```\n\n- 换成原来的\n\n```bash\nnpm config set registry https://registry.npmjs.org/\n```\n\n#### Yarn 设置淘宝镜像\n\n- 查询当前配置的镜像\n\n```bash\nyarn config get registry // https://registry.yarnpkg.com\n```\n\n- 设置成淘宝镜像\n\n```bash\nyarn config set registry http://registry.npm.taobao.org/\n```\n\n### 安装vue脚手架和 eslint\n\n```bash\n[sudo] yarn global add vue-cli\n[sudo] yarn global add eslint\n[sudo] yarn global add eslint mocha\n```\n\n### 安装VS code插件\n\n- Auto Close Tag\n- Auto Rename Tag\n- ESLint\n- HTML Snippets\n- JavaScript Standard Format\n- language-stylus\n- Path Intellisense\n- Vetur\n- Vue 2 Snippets\n- Settings Sync 同步插件\n\n### chrome浏览器跨域\n\n#### 版本号49之前的跨域设置\n\n1. 下载并安装好chrome浏览器后在桌面找到浏览器快捷图标并点击鼠标右键的属性一栏。\n2. 在属性页面中的目标输入框`...exe\"`后加上 `--disable-web-security`\n3. 点击应用和确定后关闭属性页面，并打开chrome浏览器。\n4. 如果浏览器出现提示“你使用的是不受支持的命令标记--disable-web-security”，那么说明配置成功。\n\n#### 版本号49之后的chrome跨域设置\n\n1. 在电脑上新建一个目录，例如：C:\\MyChromeDevUserData\n2. 在属性页面中的目标输入框`...exe\"`后加上 `--disable-web-security --user-data-dir=C:\\MyChromeDevUserData`,--user-data-dir的值就是刚才新建的目录。\n3. 点击应用和确定后关闭属性页面，并打开chrome浏览器。\n4. 再次打开chrome，发现有“--disable-web-security”相关的提示，说明chrome又能正常跨域工作了。\n\n### 其他\n\n- [Chai 断言语法](https://www.jianshu.com/p/f200a75a15d2)\n- [如何使用 Mocha, Chai 和 SuperTest 写测试代码](https://log.zvz.im/2016/06/07/Make-your-Nodejs-API-robust/)\n\n如果报错 `error An unexpected error occurred: \"https://registry.npm.taobao.org/axios: unable to verify the first certificate\".`\n就设置 `npm/yarn config set strict-ssl false`","source":"_posts/前端开发环境配置.md","raw":"---\ntitle: '前端开发环境配置'\ntags: \n  - VSCode\n  - 淘宝镜像\n  - 跨域\ncategories: 前端工具\ndescription: 前端开发环境配置\ndate: 2018-07-01 16:19:21\n---\n\n前端开发环境配置、淘宝镜像及跨域处理\n\n<!-- more -->\n<!-- markdownlint-disable MD041 MD002-->\n\n## 开发环境准备工作\n\n### 安装软件\n\n- [NodeJS](https://nodejs.org/en/) 10版本以上\n- [win][Cmder](http://cmder.net)\n- [VS Code](https://code.visualstudio.com)\n- [win][Git](https://github.com/waylau/git-for-win)\n\n### NPM和Yarn添加淘宝镜像\n\n#### NPM设置淘宝镜像\n\n- 查询当前配置的镜像\n\n```bash\nnpm get registry  // https://registry.npmjs.org/\n```\n\n- 设置成淘宝镜像\n\n```bash\nnpm config set registry http://registry.npm.taobao.org/\n```\n\n- 换成原来的\n\n```bash\nnpm config set registry https://registry.npmjs.org/\n```\n\n#### Yarn 设置淘宝镜像\n\n- 查询当前配置的镜像\n\n```bash\nyarn config get registry // https://registry.yarnpkg.com\n```\n\n- 设置成淘宝镜像\n\n```bash\nyarn config set registry http://registry.npm.taobao.org/\n```\n\n### 安装vue脚手架和 eslint\n\n```bash\n[sudo] yarn global add vue-cli\n[sudo] yarn global add eslint\n[sudo] yarn global add eslint mocha\n```\n\n### 安装VS code插件\n\n- Auto Close Tag\n- Auto Rename Tag\n- ESLint\n- HTML Snippets\n- JavaScript Standard Format\n- language-stylus\n- Path Intellisense\n- Vetur\n- Vue 2 Snippets\n- Settings Sync 同步插件\n\n### chrome浏览器跨域\n\n#### 版本号49之前的跨域设置\n\n1. 下载并安装好chrome浏览器后在桌面找到浏览器快捷图标并点击鼠标右键的属性一栏。\n2. 在属性页面中的目标输入框`...exe\"`后加上 `--disable-web-security`\n3. 点击应用和确定后关闭属性页面，并打开chrome浏览器。\n4. 如果浏览器出现提示“你使用的是不受支持的命令标记--disable-web-security”，那么说明配置成功。\n\n#### 版本号49之后的chrome跨域设置\n\n1. 在电脑上新建一个目录，例如：C:\\MyChromeDevUserData\n2. 在属性页面中的目标输入框`...exe\"`后加上 `--disable-web-security --user-data-dir=C:\\MyChromeDevUserData`,--user-data-dir的值就是刚才新建的目录。\n3. 点击应用和确定后关闭属性页面，并打开chrome浏览器。\n4. 再次打开chrome，发现有“--disable-web-security”相关的提示，说明chrome又能正常跨域工作了。\n\n### 其他\n\n- [Chai 断言语法](https://www.jianshu.com/p/f200a75a15d2)\n- [如何使用 Mocha, Chai 和 SuperTest 写测试代码](https://log.zvz.im/2016/06/07/Make-your-Nodejs-API-robust/)\n\n如果报错 `error An unexpected error occurred: \"https://registry.npm.taobao.org/axios: unable to verify the first certificate\".`\n就设置 `npm/yarn config set strict-ssl false`","slug":"前端开发环境配置","published":1,"updated":"2018-10-28T06:26:00.538Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo4i575u000d2wsxbdz65jyv","content":"<p>前端开发环境配置、淘宝镜像及跨域处理</p>\n<a id=\"more\"></a>\n<!-- markdownlint-disable MD041 MD002-->\n<h2 id=\"开发环境准备工作\"><a href=\"#开发环境准备工作\" class=\"headerlink\" title=\"开发环境准备工作\"></a>开发环境准备工作</h2><h3 id=\"安装软件\"><a href=\"#安装软件\" class=\"headerlink\" title=\"安装软件\"></a>安装软件</h3><ul>\n<li><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">NodeJS</a> 10版本以上</li>\n<li>[win]<a href=\"http://cmder.net\" target=\"_blank\" rel=\"noopener\">Cmder</a></li>\n<li><a href=\"https://code.visualstudio.com\" target=\"_blank\" rel=\"noopener\">VS Code</a></li>\n<li>[win]<a href=\"https://github.com/waylau/git-for-win\" target=\"_blank\" rel=\"noopener\">Git</a></li>\n</ul>\n<h3 id=\"NPM和Yarn添加淘宝镜像\"><a href=\"#NPM和Yarn添加淘宝镜像\" class=\"headerlink\" title=\"NPM和Yarn添加淘宝镜像\"></a>NPM和Yarn添加淘宝镜像</h3><h4 id=\"NPM设置淘宝镜像\"><a href=\"#NPM设置淘宝镜像\" class=\"headerlink\" title=\"NPM设置淘宝镜像\"></a>NPM设置淘宝镜像</h4><ul>\n<li>查询当前配置的镜像</li>\n</ul>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> get registry  // https://registry.npmjs.org/\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>设置成淘宝镜像</li>\n</ul>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> config <span class=\"token keyword\">set</span> registry http://registry.npm.taobao.org/\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>换成原来的</li>\n</ul>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> config <span class=\"token keyword\">set</span> registry https://registry.npmjs.org/\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"Yarn-设置淘宝镜像\"><a href=\"#Yarn-设置淘宝镜像\" class=\"headerlink\" title=\"Yarn 设置淘宝镜像\"></a>Yarn 设置淘宝镜像</h4><ul>\n<li>查询当前配置的镜像</li>\n</ul>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">yarn config get registry // https://registry.yarnpkg.com\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>设置成淘宝镜像</li>\n</ul>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">yarn config <span class=\"token keyword\">set</span> registry http://registry.npm.taobao.org/\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"安装vue脚手架和-eslint\"><a href=\"#安装vue脚手架和-eslint\" class=\"headerlink\" title=\"安装vue脚手架和 eslint\"></a>安装vue脚手架和 eslint</h3><pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>sudo<span class=\"token punctuation\">]</span> yarn global add vue-cli\n<span class=\"token punctuation\">[</span>sudo<span class=\"token punctuation\">]</span> yarn global add eslint\n<span class=\"token punctuation\">[</span>sudo<span class=\"token punctuation\">]</span> yarn global add eslint mocha\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"安装VS-code插件\"><a href=\"#安装VS-code插件\" class=\"headerlink\" title=\"安装VS code插件\"></a>安装VS code插件</h3><ul>\n<li>Auto Close Tag</li>\n<li>Auto Rename Tag</li>\n<li>ESLint</li>\n<li>HTML Snippets</li>\n<li>JavaScript Standard Format</li>\n<li>language-stylus</li>\n<li>Path Intellisense</li>\n<li>Vetur</li>\n<li>Vue 2 Snippets</li>\n<li>Settings Sync 同步插件</li>\n</ul>\n<h3 id=\"chrome浏览器跨域\"><a href=\"#chrome浏览器跨域\" class=\"headerlink\" title=\"chrome浏览器跨域\"></a>chrome浏览器跨域</h3><h4 id=\"版本号49之前的跨域设置\"><a href=\"#版本号49之前的跨域设置\" class=\"headerlink\" title=\"版本号49之前的跨域设置\"></a>版本号49之前的跨域设置</h4><ol>\n<li>下载并安装好chrome浏览器后在桌面找到浏览器快捷图标并点击鼠标右键的属性一栏。</li>\n<li>在属性页面中的目标输入框<code>...exe&quot;</code>后加上 <code>--disable-web-security</code></li>\n<li>点击应用和确定后关闭属性页面，并打开chrome浏览器。</li>\n<li>如果浏览器出现提示“你使用的是不受支持的命令标记–disable-web-security”，那么说明配置成功。</li>\n</ol>\n<h4 id=\"版本号49之后的chrome跨域设置\"><a href=\"#版本号49之后的chrome跨域设置\" class=\"headerlink\" title=\"版本号49之后的chrome跨域设置\"></a>版本号49之后的chrome跨域设置</h4><ol>\n<li>在电脑上新建一个目录，例如：C:\\MyChromeDevUserData</li>\n<li>在属性页面中的目标输入框<code>...exe&quot;</code>后加上 <code>--disable-web-security --user-data-dir=C:\\MyChromeDevUserData</code>,–user-data-dir的值就是刚才新建的目录。</li>\n<li>点击应用和确定后关闭属性页面，并打开chrome浏览器。</li>\n<li>再次打开chrome，发现有“–disable-web-security”相关的提示，说明chrome又能正常跨域工作了。</li>\n</ol>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ul>\n<li><a href=\"https://www.jianshu.com/p/f200a75a15d2\" target=\"_blank\" rel=\"noopener\">Chai 断言语法</a></li>\n<li><a href=\"https://log.zvz.im/2016/06/07/Make-your-Nodejs-API-robust/\" target=\"_blank\" rel=\"noopener\">如何使用 Mocha, Chai 和 SuperTest 写测试代码</a></li>\n</ul>\n<p>如果报错 <code>error An unexpected error occurred: &quot;https://registry.npm.taobao.org/axios: unable to verify the first certificate&quot;.</code><br>就设置 <code>npm/yarn config set strict-ssl false</code></p>\n","site":{"data":{}},"excerpt":"<p>前端开发环境配置、淘宝镜像及跨域处理</p>","more":"<!-- markdownlint-disable MD041 MD002-->\n<h2 id=\"开发环境准备工作\"><a href=\"#开发环境准备工作\" class=\"headerlink\" title=\"开发环境准备工作\"></a>开发环境准备工作</h2><h3 id=\"安装软件\"><a href=\"#安装软件\" class=\"headerlink\" title=\"安装软件\"></a>安装软件</h3><ul>\n<li><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">NodeJS</a> 10版本以上</li>\n<li>[win]<a href=\"http://cmder.net\" target=\"_blank\" rel=\"noopener\">Cmder</a></li>\n<li><a href=\"https://code.visualstudio.com\" target=\"_blank\" rel=\"noopener\">VS Code</a></li>\n<li>[win]<a href=\"https://github.com/waylau/git-for-win\" target=\"_blank\" rel=\"noopener\">Git</a></li>\n</ul>\n<h3 id=\"NPM和Yarn添加淘宝镜像\"><a href=\"#NPM和Yarn添加淘宝镜像\" class=\"headerlink\" title=\"NPM和Yarn添加淘宝镜像\"></a>NPM和Yarn添加淘宝镜像</h3><h4 id=\"NPM设置淘宝镜像\"><a href=\"#NPM设置淘宝镜像\" class=\"headerlink\" title=\"NPM设置淘宝镜像\"></a>NPM设置淘宝镜像</h4><ul>\n<li>查询当前配置的镜像</li>\n</ul>\n<pre><code class=\"bash\">npm get registry  // https://registry.npmjs.org/\n</code></pre>\n<ul>\n<li>设置成淘宝镜像</li>\n</ul>\n<pre><code class=\"bash\">npm config set registry http://registry.npm.taobao.org/\n</code></pre>\n<ul>\n<li>换成原来的</li>\n</ul>\n<pre><code class=\"bash\">npm config set registry https://registry.npmjs.org/\n</code></pre>\n<h4 id=\"Yarn-设置淘宝镜像\"><a href=\"#Yarn-设置淘宝镜像\" class=\"headerlink\" title=\"Yarn 设置淘宝镜像\"></a>Yarn 设置淘宝镜像</h4><ul>\n<li>查询当前配置的镜像</li>\n</ul>\n<pre><code class=\"bash\">yarn config get registry // https://registry.yarnpkg.com\n</code></pre>\n<ul>\n<li>设置成淘宝镜像</li>\n</ul>\n<pre><code class=\"bash\">yarn config set registry http://registry.npm.taobao.org/\n</code></pre>\n<h3 id=\"安装vue脚手架和-eslint\"><a href=\"#安装vue脚手架和-eslint\" class=\"headerlink\" title=\"安装vue脚手架和 eslint\"></a>安装vue脚手架和 eslint</h3><pre><code class=\"bash\">[sudo] yarn global add vue-cli\n[sudo] yarn global add eslint\n[sudo] yarn global add eslint mocha\n</code></pre>\n<h3 id=\"安装VS-code插件\"><a href=\"#安装VS-code插件\" class=\"headerlink\" title=\"安装VS code插件\"></a>安装VS code插件</h3><ul>\n<li>Auto Close Tag</li>\n<li>Auto Rename Tag</li>\n<li>ESLint</li>\n<li>HTML Snippets</li>\n<li>JavaScript Standard Format</li>\n<li>language-stylus</li>\n<li>Path Intellisense</li>\n<li>Vetur</li>\n<li>Vue 2 Snippets</li>\n<li>Settings Sync 同步插件</li>\n</ul>\n<h3 id=\"chrome浏览器跨域\"><a href=\"#chrome浏览器跨域\" class=\"headerlink\" title=\"chrome浏览器跨域\"></a>chrome浏览器跨域</h3><h4 id=\"版本号49之前的跨域设置\"><a href=\"#版本号49之前的跨域设置\" class=\"headerlink\" title=\"版本号49之前的跨域设置\"></a>版本号49之前的跨域设置</h4><ol>\n<li>下载并安装好chrome浏览器后在桌面找到浏览器快捷图标并点击鼠标右键的属性一栏。</li>\n<li>在属性页面中的目标输入框<code>...exe&quot;</code>后加上 <code>--disable-web-security</code></li>\n<li>点击应用和确定后关闭属性页面，并打开chrome浏览器。</li>\n<li>如果浏览器出现提示“你使用的是不受支持的命令标记–disable-web-security”，那么说明配置成功。</li>\n</ol>\n<h4 id=\"版本号49之后的chrome跨域设置\"><a href=\"#版本号49之后的chrome跨域设置\" class=\"headerlink\" title=\"版本号49之后的chrome跨域设置\"></a>版本号49之后的chrome跨域设置</h4><ol>\n<li>在电脑上新建一个目录，例如：C:\\MyChromeDevUserData</li>\n<li>在属性页面中的目标输入框<code>...exe&quot;</code>后加上 <code>--disable-web-security --user-data-dir=C:\\MyChromeDevUserData</code>,–user-data-dir的值就是刚才新建的目录。</li>\n<li>点击应用和确定后关闭属性页面，并打开chrome浏览器。</li>\n<li>再次打开chrome，发现有“–disable-web-security”相关的提示，说明chrome又能正常跨域工作了。</li>\n</ol>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ul>\n<li><a href=\"https://www.jianshu.com/p/f200a75a15d2\" target=\"_blank\" rel=\"noopener\">Chai 断言语法</a></li>\n<li><a href=\"https://log.zvz.im/2016/06/07/Make-your-Nodejs-API-robust/\" target=\"_blank\" rel=\"noopener\">如何使用 Mocha, Chai 和 SuperTest 写测试代码</a></li>\n</ul>\n<p>如果报错 <code>error An unexpected error occurred: &quot;https://registry.npm.taobao.org/axios: unable to verify the first certificate&quot;.</code><br>就设置 <code>npm/yarn config set strict-ssl false</code></p>"},{"title":"src目录结构分析","description":"src目录结构分析","date":"2018-07-08T15:15:22.000Z","_content":"\nsrc目录结构及命名原则分析\n\n<!-- more -->\n<!-- markdownlint-disable MD002 MD041-->\n\n## src目录结构分析\n\n```bash\n.\n├── adapter -----> 适配器,处理拿到的数据,整理成对象或者别的能直接使用的数据\n|   ├── report.js -----> (驼峰命名：与api命名一致)\n|   └── selectPhoneNumber.js -----> (驼峰命名: 与api命名一致)\n|\n├── api -----> 通过后台接口拿到数据\n|   ├── report.js -----> (驼峰命名)\n|   └── selectPhoneNumber.js -----> (驼峰命名)\n|\n├── assets -----> 存放图片\n|\n├── components -----> 组件,通过在 views 中的 vue 文件的调用并传入数据,然后渲染在页面中,复用性强\n|   ├── AreaCard.vue ----->  (Pascal命名)\n|   ├── Chart.vue\n|   └── Entry.vue\n|\n├── router -----> 路由\n|   └── index.js\n|\n├── store -----> vuex\n|   ├── modules -----> vuex模块\n|   |   ├── clothesSize.js -----> (驼峰命名)\n|   |   ├── login.js\n|   |   └── user.js\n|   └── index.js\n|\n├── util -----> 自己封装的 js\n|   ├── fetch.js\n|   └── index.js\n|\n└── views -----> 页面展示\n    ├── Report.vue -----> (Pascal命名: 与api命名一致)\n    ├── Dormitory\n    |   ├── DormitoryStudent.vue -----> (Pascal命名)\n    |   ├── Edit.vue\n    |   └── index.vue\n    └── Home.vue\n```\n\n注：api -----> adapter -----> views -----> 同一个页面：这三个文件夹的命名对应一致 或者 api、adapter 与 views 中的文件夹命名一致","source":"_posts/src目录结构分析.md","raw":"---\ntitle: 'src目录结构分析'\ntags: Vue\ncategories: Vue\ndescription: src目录结构分析\ndate: 2018-07-08 23:15:22\n---\n\nsrc目录结构及命名原则分析\n\n<!-- more -->\n<!-- markdownlint-disable MD002 MD041-->\n\n## src目录结构分析\n\n```bash\n.\n├── adapter -----> 适配器,处理拿到的数据,整理成对象或者别的能直接使用的数据\n|   ├── report.js -----> (驼峰命名：与api命名一致)\n|   └── selectPhoneNumber.js -----> (驼峰命名: 与api命名一致)\n|\n├── api -----> 通过后台接口拿到数据\n|   ├── report.js -----> (驼峰命名)\n|   └── selectPhoneNumber.js -----> (驼峰命名)\n|\n├── assets -----> 存放图片\n|\n├── components -----> 组件,通过在 views 中的 vue 文件的调用并传入数据,然后渲染在页面中,复用性强\n|   ├── AreaCard.vue ----->  (Pascal命名)\n|   ├── Chart.vue\n|   └── Entry.vue\n|\n├── router -----> 路由\n|   └── index.js\n|\n├── store -----> vuex\n|   ├── modules -----> vuex模块\n|   |   ├── clothesSize.js -----> (驼峰命名)\n|   |   ├── login.js\n|   |   └── user.js\n|   └── index.js\n|\n├── util -----> 自己封装的 js\n|   ├── fetch.js\n|   └── index.js\n|\n└── views -----> 页面展示\n    ├── Report.vue -----> (Pascal命名: 与api命名一致)\n    ├── Dormitory\n    |   ├── DormitoryStudent.vue -----> (Pascal命名)\n    |   ├── Edit.vue\n    |   └── index.vue\n    └── Home.vue\n```\n\n注：api -----> adapter -----> views -----> 同一个页面：这三个文件夹的命名对应一致 或者 api、adapter 与 views 中的文件夹命名一致","slug":"src目录结构分析","published":1,"updated":"2018-11-05T14:33:43.820Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo4i575w000e2wsxiuqz18rt","content":"<p>src目录结构及命名原则分析</p>\n<a id=\"more\"></a>\n<!-- markdownlint-disable MD002 MD041-->\n<h2 id=\"src目录结构分析\"><a href=\"#src目录结构分析\" class=\"headerlink\" title=\"src目录结构分析\"></a>src目录结构分析</h2><pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">.</span>\n├── adapter -----<span class=\"token operator\">></span> 适配器,处理拿到的数据,整理成对象或者别的能直接使用的数据\n<span class=\"token operator\">|</span>   ├── report.js -----<span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>驼峰命名：与api命名一致<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>   └── selectPhoneNumber.js -----<span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>驼峰命名: 与api命名一致<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>\n├── api -----<span class=\"token operator\">></span> 通过后台接口拿到数据\n<span class=\"token operator\">|</span>   ├── report.js -----<span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>驼峰命名<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>   └── selectPhoneNumber.js -----<span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>驼峰命名<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>\n├── assets -----<span class=\"token operator\">></span> 存放图片\n<span class=\"token operator\">|</span>\n├── components -----<span class=\"token operator\">></span> 组件,通过在 views 中的 vue 文件的调用并传入数据,然后渲染在页面中,复用性强\n<span class=\"token operator\">|</span>   ├── AreaCard.vue -----<span class=\"token operator\">></span>  <span class=\"token punctuation\">(</span>Pascal命名<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>   ├── Chart.vue\n<span class=\"token operator\">|</span>   └── Entry.vue\n<span class=\"token operator\">|</span>\n├── router -----<span class=\"token operator\">></span> 路由\n<span class=\"token operator\">|</span>   └── index.js\n<span class=\"token operator\">|</span>\n├── store -----<span class=\"token operator\">></span> vuex\n<span class=\"token operator\">|</span>   ├── modules -----<span class=\"token operator\">></span> vuex模块\n<span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>   ├── clothesSize.js -----<span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>驼峰命名<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>   ├── login.js\n<span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>   └── user.js\n<span class=\"token operator\">|</span>   └── index.js\n<span class=\"token operator\">|</span>\n├── util -----<span class=\"token operator\">></span> 自己封装的 js\n<span class=\"token operator\">|</span>   ├── fetch.js\n<span class=\"token operator\">|</span>   └── index.js\n<span class=\"token operator\">|</span>\n└── views -----<span class=\"token operator\">></span> 页面展示\n    ├── Report.vue -----<span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>Pascal命名: 与api命名一致<span class=\"token punctuation\">)</span>\n    ├── Dormitory\n    <span class=\"token operator\">|</span>   ├── DormitoryStudent.vue -----<span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>Pascal命名<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span>   ├── Edit.vue\n    <span class=\"token operator\">|</span>   └── index.vue\n    └── Home.vue\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>注：api —–&gt; adapter —–&gt; views —–&gt; 同一个页面：这三个文件夹的命名对应一致 或者 api、adapter 与 views 中的文件夹命名一致</p>\n","site":{"data":{}},"excerpt":"<p>src目录结构及命名原则分析</p>","more":"<!-- markdownlint-disable MD002 MD041-->\n<h2 id=\"src目录结构分析\"><a href=\"#src目录结构分析\" class=\"headerlink\" title=\"src目录结构分析\"></a>src目录结构分析</h2><pre><code class=\"bash\">.\n├── adapter -----&gt; 适配器,处理拿到的数据,整理成对象或者别的能直接使用的数据\n|   ├── report.js -----&gt; (驼峰命名：与api命名一致)\n|   └── selectPhoneNumber.js -----&gt; (驼峰命名: 与api命名一致)\n|\n├── api -----&gt; 通过后台接口拿到数据\n|   ├── report.js -----&gt; (驼峰命名)\n|   └── selectPhoneNumber.js -----&gt; (驼峰命名)\n|\n├── assets -----&gt; 存放图片\n|\n├── components -----&gt; 组件,通过在 views 中的 vue 文件的调用并传入数据,然后渲染在页面中,复用性强\n|   ├── AreaCard.vue -----&gt;  (Pascal命名)\n|   ├── Chart.vue\n|   └── Entry.vue\n|\n├── router -----&gt; 路由\n|   └── index.js\n|\n├── store -----&gt; vuex\n|   ├── modules -----&gt; vuex模块\n|   |   ├── clothesSize.js -----&gt; (驼峰命名)\n|   |   ├── login.js\n|   |   └── user.js\n|   └── index.js\n|\n├── util -----&gt; 自己封装的 js\n|   ├── fetch.js\n|   └── index.js\n|\n└── views -----&gt; 页面展示\n    ├── Report.vue -----&gt; (Pascal命名: 与api命名一致)\n    ├── Dormitory\n    |   ├── DormitoryStudent.vue -----&gt; (Pascal命名)\n    |   ├── Edit.vue\n    |   └── index.vue\n    └── Home.vue\n</code></pre>\n<p>注：api —–&gt; adapter —–&gt; views —–&gt; 同一个页面：这三个文件夹的命名对应一致 或者 api、adapter 与 views 中的文件夹命名一致</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjo4i575600002wsx7r6r3xwu","category_id":"cjo4i575k00042wsx7nc77kib","_id":"cjo4i5761000f2wsxzv7xkuj0"},{"post_id":"cjo4i575g00022wsx9zkfqlpx","category_id":"cjo4i575s000a2wsxd2zigb8a","_id":"cjo4i5763000j2wsx5y0gy238"},{"post_id":"cjo4i575w000e2wsxiuqz18rt","category_id":"cjo4i575s000a2wsxd2zigb8a","_id":"cjo4i5765000m2wsxx3u66gcz"},{"post_id":"cjo4i575m00062wsxz1ru74a3","category_id":"cjo4i5761000g2wsxbh313oc4","_id":"cjo4i5766000p2wsxapyl2ink"},{"post_id":"cjo4i575p00082wsxej1j3o8d","category_id":"cjo4i5763000k2wsxv49l1zxi","_id":"cjo4i5767000s2wsxuizqqcuq"},{"post_id":"cjo4i575r00092wsxtwregh0y","category_id":"cjo4i5766000q2wsx6ebjcwis","_id":"cjo4i576a000x2wsxlpqree6p"},{"post_id":"cjo4i575u000d2wsxbdz65jyv","category_id":"cjo4i5761000g2wsxbh313oc4","_id":"cjo4i576b00102wsxwshirahr"}],"PostTag":[{"post_id":"cjo4i575600002wsx7r6r3xwu","tag_id":"cjo4i575m00052wsxfox940er","_id":"cjo4i575t000c2wsxu7m7ff6t"},{"post_id":"cjo4i575w000e2wsxiuqz18rt","tag_id":"cjo4i575s000b2wsxvo9wjlz4","_id":"cjo4i5763000i2wsx6d9fjfp1"},{"post_id":"cjo4i575g00022wsx9zkfqlpx","tag_id":"cjo4i575s000b2wsxvo9wjlz4","_id":"cjo4i5765000n2wsxhllsqqdf"},{"post_id":"cjo4i575g00022wsx9zkfqlpx","tag_id":"cjo4i5762000h2wsxvngj36r6","_id":"cjo4i5766000o2wsx5nof2ggt"},{"post_id":"cjo4i575m00062wsxz1ru74a3","tag_id":"cjo4i5764000l2wsx5b8mv81w","_id":"cjo4i576a000v2wsxori5eh4e"},{"post_id":"cjo4i575m00062wsxz1ru74a3","tag_id":"cjo4i5766000r2wsxnmnemh5u","_id":"cjo4i576a000w2wsxy6b1x26r"},{"post_id":"cjo4i575p00082wsxej1j3o8d","tag_id":"cjo4i5768000u2wsxgkbogvs1","_id":"cjo4i576b000z2wsxx6kbtpvn"},{"post_id":"cjo4i575r00092wsxtwregh0y","tag_id":"cjo4i576b000y2wsxg3p731uk","_id":"cjo4i576c00122wsxl3hwpgjt"},{"post_id":"cjo4i575u000d2wsxbdz65jyv","tag_id":"cjo4i576c00112wsxmmols0iv","_id":"cjo4i576d00152wsxz2etw59f"},{"post_id":"cjo4i575u000d2wsxbdz65jyv","tag_id":"cjo4i576c00132wsx4fica34y","_id":"cjo4i576e00162wsx6mk20wym"},{"post_id":"cjo4i575u000d2wsxbdz65jyv","tag_id":"cjo4i576d00142wsxxetrkp66","_id":"cjo4i576e00172wsxmd49hb8k"}],"Tag":[{"name":"Git","_id":"cjo4i575m00052wsxfox940er"},{"name":"Vue","_id":"cjo4i575s000b2wsxvo9wjlz4"},{"name":"Webpack","_id":"cjo4i5762000h2wsxvngj36r6"},{"name":"NPM","_id":"cjo4i5764000l2wsx5b8mv81w"},{"name":"Yarn","_id":"cjo4i5766000r2wsxnmnemh5u"},{"name":"JavaScript","_id":"cjo4i5768000u2wsxgkbogvs1"},{"name":"Hexo","_id":"cjo4i576b000y2wsxg3p731uk"},{"name":"VSCode","_id":"cjo4i576c00112wsxmmols0iv"},{"name":"淘宝镜像","_id":"cjo4i576c00132wsx4fica34y"},{"name":"跨域","_id":"cjo4i576d00142wsxxetrkp66"}]}}