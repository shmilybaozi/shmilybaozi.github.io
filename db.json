{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/indigo/source/img/cc.png","path":"img/cc.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/brand.jpg","path":"img/brand.jpg","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/img-loading.png","path":"img/img-loading.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/img-err.png","path":"img/img-err.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/style.less","path":"css/style.less","modified":1,"renderable":1},{"_id":"themes/indigo/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/indigo/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/indigo/source/js/main.min.js","path":"js/main.min.js","modified":1,"renderable":1},{"_id":"themes/indigo/source/js/search.min.js","path":"js/search.min.js","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/alipay.png","path":"img/alipay.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/wechat.png","path":"img/wechat.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","path":"css/fonts/roboto/Roboto-Bold.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","path":"css/fonts/roboto/Roboto-Bold.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","path":"css/fonts/roboto/Roboto-Light.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","path":"css/fonts/roboto/Roboto-Bold.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","path":"css/fonts/roboto/Roboto-Light.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","path":"css/fonts/roboto/Roboto-Medium.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","path":"css/fonts/roboto/Roboto-Medium.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","path":"css/fonts/roboto/Roboto-Regular.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","path":"css/fonts/roboto/Roboto-Thin.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","path":"css/fonts/roboto/Roboto-Regular.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","path":"css/fonts/roboto/Roboto-Thin.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","path":"css/fonts/roboto/Roboto-Thin.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","path":"css/fonts/roboto/Roboto-Light.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","path":"css/fonts/roboto/Roboto-Medium.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","path":"css/fonts/roboto/Roboto-Medium.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","path":"css/fonts/roboto/Roboto-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","path":"css/fonts/roboto/Roboto-Regular.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","path":"css/fonts/roboto/Roboto-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","path":"css/fonts/roboto/Roboto-Light.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","path":"css/fonts/roboto/Roboto-Thin.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/indigo/.editorconfig","hash":"67a03b88eadd7810f2e01866e73814074ecd3b87","modified":1551061604000},{"_id":"themes/indigo/README.md","hash":"cfc7d09fc2ce26003954d647e3bbf98f71574eb7","modified":1551061604000},{"_id":"themes/indigo/.gitignore","hash":"da3f11528aa77a26688498709b5a12eb39586c5d","modified":1551061604000},{"_id":"themes/indigo/LICENSE","hash":"9dd0f70bc72c9d575447655526aded395bb93754","modified":1551061604000},{"_id":"themes/indigo/_config.yml","hash":"26c65619b705b1e8aa7c127f4eb38382eacd6e5e","modified":1551061604000},{"_id":"themes/indigo/package.json","hash":"3ad9b9ccb1ddaad3136f179a7ebff7d7b1c193f7","modified":1551061604000},{"_id":"themes/indigo/layout/archive.ejs","hash":"6897178ba358379d6a4b7c0ba1bc2ab97ad5303a","modified":1551061604000},{"_id":"themes/indigo/layout/categories.ejs","hash":"efae06b4d83aaf73ab93260381e891825bf404ac","modified":1551061604000},{"_id":"themes/indigo/layout/category.ejs","hash":"e5ba5cc2e092c199285b8097ef12ffe70bf84c91","modified":1551061604000},{"_id":"themes/indigo/layout/index.ejs","hash":"772c1985c7743e101598b4eddc253f9174c5605b","modified":1551061604000},{"_id":"themes/indigo/layout/layout.ejs","hash":"770af84fff104c398ce8b6c995130cddd3e9a1e9","modified":1551061604000},{"_id":"themes/indigo/languages/en.yml","hash":"ba78def0453d08172248e220a1f9e145e99b4f23","modified":1551061604000},{"_id":"themes/indigo/layout/post.ejs","hash":"efc3352828351f8574c51e8a93dc56c66660c3b1","modified":1551061604000},{"_id":"themes/indigo/layout/page.ejs","hash":"567c42b978da4c39b8b4982df19b940c26bc32a4","modified":1551061604000},{"_id":"themes/indigo/layout/tag.ejs","hash":"90a231dea3a364b329a740e5d6c49c8cf5664fe9","modified":1551061604000},{"_id":"themes/indigo/languages/ja.yml","hash":"65a32717335211a45771a21fb7d7778808c6f0aa","modified":1551061604000},{"_id":"themes/indigo/languages/nl-NL","hash":"b540b76af76c1a180c517089ed2ad770cbded170","modified":1551061604000},{"_id":"themes/indigo/layout/tags.ejs","hash":"1fc0461e9602b53899ec756e4361beb8cce74740","modified":1551061604000},{"_id":"themes/indigo/languages/zh-TW.yml","hash":"9b8bdd9c8b68716f364503926dca6ba8571ee5ff","modified":1551061604000},{"_id":"themes/indigo/languages/zh-CN.yml","hash":"6806e4c305facf19cbe4e37ccc5d6b00cb56e199","modified":1551061604000},{"_id":"themes/indigo/scripts/plugins.js","hash":"00ea278ea77733f546439aed507ce69a298da362","modified":1551061604000},{"_id":"source/_posts/Yarn和NPM命令.md","hash":"0a54474a0f413b044ebda6ac6c7b0d4fcdb54311","modified":1570808701495},{"_id":"source/_posts/hexo&github创建个人博客.md","hash":"4ffbf7db84bdf4c82337dc8a0b71edcc6b04df89","modified":1570622849196},{"_id":"source/_posts/src目录结构分析.md","hash":"748444dfc9264b6248345b336ecfc768058e49a5","modified":1570807906166},{"_id":"source/_posts/Git更新与推送流程.md","hash":"dcfc52c88a07f7f4ec08e1e94a6b9afb375df166","modified":1551061604000},{"_id":"source/_posts/path.join和path.resolve区别.md","hash":"a8cb7ded0603db9fda3fe931f84ae8b1d587b3b4","modified":1570622849197},{"_id":"source/_posts/前端调试方法.md","hash":"0e3258fcdef0a4d1c24160120aabef59fde1f9af","modified":1570622849199},{"_id":"source/_posts/Vue中使用Webpack总结.md","hash":"227294bef96064921619e74816ac0ae05bad38a0","modified":1551061604000},{"_id":"source/_posts/前端开发环境配置.md","hash":"eccd56f7f12930adf6a3141921f2d725124177c2","modified":1570622849198},{"_id":"source/categories/index.md","hash":"37494a069ac7cb7b557570039fd93779821d8fd2","modified":1551061604000},{"_id":"source/_posts/hexo文章模板设置.md","hash":"a457636a26d5aa53ebdc71fdef3746841a536460","modified":1551076620000},{"_id":"source/about/index.md","hash":"d13c2708728c1ba5d5a9d6a5169f64c1dece824b","modified":1570622849200},{"_id":"source/timeline/index.md","hash":"02933db69f6f140fc92432021b2a71c8413b5c90","modified":1551061604000},{"_id":"source/tags/index.md","hash":"450f6027fc98b10331fce2c4eb13db5df9255f59","modified":1551061604000},{"_id":"themes/indigo/layout/_partial/after-footer.ejs","hash":"1351dbfca311f0d50a939f9e1a91c4f65bbcdf5f","modified":1551061604000},{"_id":"themes/indigo/layout/_partial/archive.ejs","hash":"c294c98617ce14082f9b3d5eec83328f480f5597","modified":1551061604000},{"_id":"themes/indigo/layout/_partial/header.ejs","hash":"648db446567a81371b8a29d719d13636aa157012","modified":1551061604000},{"_id":"themes/indigo/layout/_partial/footer.ejs","hash":"c78444f5b350ca79b260361bf3e5b6361d2661ba","modified":1551061604000},{"_id":"themes/indigo/layout/_partial/loading.ejs","hash":"8b3e037dd5f3d4564012689c5cd6f63caf73df0f","modified":1551061604000},{"_id":"themes/indigo/layout/_partial/head.ejs","hash":"9dfc591ec6c918c5b60b6ccbc5d1e18fea9faf8e","modified":1551061604000},{"_id":"themes/indigo/layout/_partial/menu.ejs","hash":"ea6aded24a68de0914f24b3760f766b5e1c9835a","modified":1551061604000},{"_id":"themes/indigo/layout/_partial/index-item.ejs","hash":"7208d4083ee3355aa969972a2ce249a67d56b3a6","modified":1551061604000},{"_id":"themes/indigo/layout/_partial/paginator.ejs","hash":"13952250463f70d1c1bbbfdd7f4ee8160dd6d99b","modified":1551061604000},{"_id":"themes/indigo/layout/_partial/script.ejs","hash":"31052bc524a10abd6871aed2415448ce585faff2","modified":1551061604000},{"_id":"themes/indigo/layout/_partial/search.ejs","hash":"752109904304fdb8e988ee1254df2af9c0701466","modified":1551061604000},{"_id":"themes/indigo/layout/_partial/tags-bar.ejs","hash":"30ec74f081cc4c273a7bcd5d57da99072e9f0755","modified":1551061604000},{"_id":"themes/indigo/layout/_partial/post.ejs","hash":"20597ac0d547aea37680ecf195eb129fe5ee19d8","modified":1551061604000},{"_id":"themes/indigo/source/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1551061604000},{"_id":"themes/indigo/source/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1551061604000},{"_id":"themes/indigo/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1551061604000},{"_id":"themes/indigo/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1551061604000},{"_id":"themes/indigo/source/css/style.less","hash":"cf362925ae099b810fd5763e6b724b823612ed15","modified":1551061604000},{"_id":"themes/indigo/source/js/search.js","hash":"a4d6c9c566ec1ca71ddacfd14c58f7ddaf9db24d","modified":1551061604000},{"_id":"themes/indigo/source/js/main.js","hash":"ff44bb7b2f1f08757093fd6ffa92c9ac2b674109","modified":1551061604000},{"_id":"themes/indigo/source/js/main.min.js","hash":"e77a89fe5a9827ac590a288778176b233dd900ad","modified":1551061604000},{"_id":"themes/indigo/source/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1551061604000},{"_id":"themes/indigo/source/img/alipay.png","hash":"6923f412b20b050040cb471e818d82285ecb1b8a","modified":1551061604000},{"_id":"themes/indigo/layout/_partial/post/comment.ejs","hash":"b1a6984e19d3493fb327383ee76e09fdee090426","modified":1551061604000},{"_id":"themes/indigo/layout/_partial/post/copyright.ejs","hash":"dd1dcc7776021ab3d68065f8532efead4c2b8051","modified":1551061604000},{"_id":"themes/indigo/layout/_partial/post/category.ejs","hash":"c08e44cbd7315dec7afb6054b04d3c7b82c3bde8","modified":1551061604000},{"_id":"themes/indigo/layout/_partial/post/date.ejs","hash":"c5adcec8db1506c378d39855a697e1bb1165646c","modified":1551061604000},{"_id":"themes/indigo/layout/_partial/post/head-meta.ejs","hash":"f137c126672769e9571be2bb0a70ea8dda644b0e","modified":1551061604000},{"_id":"themes/indigo/layout/_partial/post/reward-btn.ejs","hash":"b46160005224821a439dec9f1ff183e2f66d9f4b","modified":1551061604000},{"_id":"themes/indigo/layout/_partial/post/share-fab.ejs","hash":"2ec7de870988cfbc8ea9872cddf7e4076ac64a57","modified":1551061604000},{"_id":"themes/indigo/layout/_partial/post/nav.ejs","hash":"03719097851575a2c1bb95774058b224f6402a1f","modified":1551061604000},{"_id":"themes/indigo/layout/_partial/post/reward.ejs","hash":"097c0276a61665e5ee96e5d5d85a7d6ae5ab2f49","modified":1551061604000},{"_id":"themes/indigo/layout/_partial/post/share.ejs","hash":"7d79a67b3e5e6989f22fb0e0904fa540bfca5fcc","modified":1551061604000},{"_id":"themes/indigo/layout/_partial/post/tag.ejs","hash":"412894001b1ac6e63012b26b1109a0856651c076","modified":1551061604000},{"_id":"themes/indigo/layout/_partial/post/title.ejs","hash":"eaad7af7888bddd7095243a43ff38f55ad8c494a","modified":1551061604000},{"_id":"themes/indigo/layout/_partial/post/updated.ejs","hash":"00fedf7971c0bda0623d968bc0614e512d19a985","modified":1551061604000},{"_id":"themes/indigo/layout/_partial/post/toc.ejs","hash":"d534b888d24df7703c632539d4bdd638fa764e98","modified":1551061604000},{"_id":"themes/indigo/layout/_partial/plugins/disqus.ejs","hash":"86fe837ab16cb60754b0a73bb9efa38b04f3023f","modified":1551061604000},{"_id":"themes/indigo/layout/_partial/plugins/gitment.ejs","hash":"5f6ceb7f4b9b579e8e3f87894447f556a53f9385","modified":1551061604000},{"_id":"themes/indigo/layout/_partial/plugins/google-analytics.ejs","hash":"b5b87761751a897949e085a8f1ace78b0b8babd5","modified":1551061604000},{"_id":"themes/indigo/layout/_partial/plugins/dynamic-title.ejs","hash":"3b877868c4a6fc217ea6f3314544830280a77472","modified":1551061604000},{"_id":"themes/indigo/layout/_partial/plugins/mathjax.ejs","hash":"3a5c9f7d22d30cd8ffa4e83a8d3976db22815994","modified":1551061604000},{"_id":"themes/indigo/layout/_partial/plugins/baidu.ejs","hash":"da1355eea131952031e54c45560555e6d3aa5a33","modified":1551061604000},{"_id":"themes/indigo/layout/_partial/plugins/page-visit.ejs","hash":"bb9deb32c54ea6820f622b923e62592915e9f21f","modified":1551061604000},{"_id":"themes/indigo/layout/_partial/plugins/site-visit.ejs","hash":"a2c247c2e32016563dd6a22c21474072d93f4dbd","modified":1551061604000},{"_id":"themes/indigo/layout/_partial/plugins/hyper-comments.ejs","hash":"d0e6f1d713e7a1c0cc5fe25f3e574a4b791f938a","modified":1551061604000},{"_id":"themes/indigo/layout/_partial/plugins/tajs.ejs","hash":"ef9c77d8c6e004b014c83c5f9333e7174f8bafa3","modified":1551061604000},{"_id":"themes/indigo/layout/_partial/plugins/valine.ejs","hash":"0a6245da90d54177441d32a6f1766b4f434660db","modified":1551061604000},{"_id":"themes/indigo/layout/_partial/plugins/uyan.ejs","hash":"ddf290e90dc1c779f42a48e1bd852ca932148dfb","modified":1551061604000},{"_id":"themes/indigo/source/css/_partial/archives.less","hash":"382fc22cd5cc073e881768a65600d97eba9f1d21","modified":1551061604000},{"_id":"themes/indigo/source/css/_partial/article.less","hash":"f047c8ca92f9e6a8e1299ace0cce91514631a21c","modified":1551061604000},{"_id":"themes/indigo/source/css/_partial/header.less","hash":"880b4a28e97d556ed15b07642d25115f9b6ba4f6","modified":1551061604000},{"_id":"themes/indigo/source/css/_partial/gotop.less","hash":"bad63006b3bd4849bf53ad38482af0d9971061d3","modified":1551061604000},{"_id":"themes/indigo/source/css/_partial/highlight.less","hash":"99e48793dc0b4ffb66ecaf2d1315145872f9bb98","modified":1551061604000},{"_id":"themes/indigo/source/css/_partial/layout.less","hash":"5f783f34bf093e654e8922ed4a2af8b7b2cd41c4","modified":1551061604000},{"_id":"themes/indigo/source/css/_partial/lightbox.less","hash":"38419aaf3c1832e84ade331f051f110fdc8b960f","modified":1551061604000},{"_id":"themes/indigo/source/css/_partial/page.less","hash":"33b0a5edcedc26a4c592c812c5785bb20d3c93db","modified":1551061604000},{"_id":"themes/indigo/source/css/_partial/loading.less","hash":"85157ddf3877b5c58e8f1d737dda3dfb1bfd540b","modified":1551061604000},{"_id":"themes/indigo/source/css/_partial/postlist.less","hash":"516cded3c7f1db4cacfa898bcaf0adfae7f3a2e1","modified":1551061604000},{"_id":"themes/indigo/source/css/_partial/reward.less","hash":"f5e89ea5414e3096a28c8c96e86c3f669040a892","modified":1551061604000},{"_id":"themes/indigo/source/css/_partial/roboto.less","hash":"3e457942995da8840e7662fa6cb551a7e12ea294","modified":1551061604000},{"_id":"themes/indigo/source/css/_partial/search.less","hash":"dbc23e77e586ee682a21475f5eb568628ea6720f","modified":1551061604000},{"_id":"themes/indigo/source/css/_partial/share.less","hash":"a683c96a59470efd35722b763c55149a46e35156","modified":1551061604000},{"_id":"themes/indigo/source/css/_partial/tags.less","hash":"01eb7f84193180928a6ed4796ee8802f6c1628e7","modified":1551061604000},{"_id":"themes/indigo/source/css/_partial/variable.less","hash":"3232e75f4653402c9fbd7bda5b97c05ecc31db2b","modified":1551061604000},{"_id":"themes/indigo/source/css/_partial/waves.less","hash":"a02eaa601887f947257f6016679b62dc96a61c0c","modified":1551061604000},{"_id":"themes/indigo/source/img/wechat.png","hash":"78f79036ebbc92b5d9762bec90ad937047b61451","modified":1551061604000},{"_id":"themes/indigo/source/css/_plugin/valine.less","hash":"b8f8d8037fb3c8525da12e580bd9e2ff9f298132","modified":1551061604000},{"_id":"themes/indigo/source/css/_partial/fontawesome.less","hash":"a3ecbd6ccf5b56ac39df710c34a149b82989a498","modified":1551061604000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1551061604000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1551061604000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1551061604000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1551061604000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1551061604000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1551061604000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1551061604000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1551061604000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1551061604000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1551061604000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1551061604000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1551061604000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1551061604000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1551061604000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1551061604000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1551061604000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1551061604000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1551061604000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1551061604000},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1551061604000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1551061604000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1551061604000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1551061604000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1551061604000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1551061604000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1551061604000},{"_id":"themes/indigo/source/img/favicon.ico","hash":"66ea2284099d42642d5eb8648aad5d1ff179240c","modified":1551061604000},{"_id":"themes/indigo/source/img/avatar.jpg","hash":"1ba75ecb13fa4c134ce7eb86b77b73c2ddda8539","modified":1551061604000},{"_id":"public/search.xml","hash":"f211a3943caf85507ed96d6790583c5b25e0895b","modified":1570809045162},{"_id":"public/content.json","hash":"50948d0de8221341498cf55d6a93bf71e6421f10","modified":1570809045162},{"_id":"public/timeline/index.html","hash":"34100f43d793ac346f35abf18c23ce69a69e3f5a","modified":1570809045479},{"_id":"public/archives/2018/07/index.html","hash":"6cd085a8acd6979d523b15ab6922c20de128f1db","modified":1570809045479},{"_id":"public/archives/2018/08/index.html","hash":"9f6ea101b4281133bde636011fab0707c59391d6","modified":1570809045479},{"_id":"public/archives/2019/09/index.html","hash":"50f7d69fea74b650fd65522fb7f8de848e778627","modified":1570809045479},{"_id":"public/categories/Vue/index.html","hash":"64c99cc67ff79e9af00d47bcd70d2eb4d9dcff8e","modified":1570809045479},{"_id":"public/archives/2019/index.html","hash":"285934b24a18d47e0ae2f7b1e140bddeb631771b","modified":1570809045479},{"_id":"public/archives/2018/11/index.html","hash":"165a9779e3884bfaa5ae4631965885287acfc6bc","modified":1570809045479},{"_id":"public/categories/Git/index.html","hash":"d322091e99d491318313f4a2fa956e469af3e19a","modified":1570809045479},{"_id":"public/categories/JavaScript/index.html","hash":"639fbac9e8d4be5fda4dbef708f9e4de4ddfb97e","modified":1570809045479},{"_id":"public/tags/Vue/index.html","hash":"bf13d80e761606d46b0211899de34e638c6e60a4","modified":1570809045480},{"_id":"public/tags/NPM/index.html","hash":"44aaff3b8e28b6bdd994d10f302f0523a584b5f3","modified":1570809045480},{"_id":"public/tags/Github/index.html","hash":"a70b305d6f1b57e0a654a1b092fa5f7e9c9f48cf","modified":1570809045480},{"_id":"public/tags/Git/index.html","hash":"be23c879c557d444f57a180d82cfc4df33b090f0","modified":1570809045480},{"_id":"public/tags/Yarn/index.html","hash":"6cb98f4256c3a7bc3f0119d6d99af6feea6f24bd","modified":1570809045480},{"_id":"public/tags/Hexo/index.html","hash":"0d05520082870d2cc01d4cf5d6c2b367d7506b08","modified":1570809045480},{"_id":"public/tags/JavaScript/index.html","hash":"2f172f3ef159bf60194ab30325517a1f54fd54e3","modified":1570809045480},{"_id":"public/tags/Webpack/index.html","hash":"1041027ddac84d50ffd546930239102cb2945db8","modified":1570809045480},{"_id":"public/tags/VSCode/index.html","hash":"d35fc452f3b54f7343bf865fc024d222b13fdf40","modified":1570809045480},{"_id":"public/tags/跨域/index.html","hash":"869e27d338317ba3922eb4c8e4402a17f571a5e8","modified":1570809045480},{"_id":"public/tags/淘宝镜像/index.html","hash":"3e3a28f6df16d890fe60af45ed2a5e5b1c49ed1c","modified":1570809045480},{"_id":"public/categories/index.html","hash":"2d9789b68db51625b3adfc49f447980f1e3eb6ab","modified":1570809045480},{"_id":"public/2019/09/09/前端调试方法/index.html","hash":"04099c118d45f60648e077d14046ee21277d8979","modified":1570809045480},{"_id":"public/about/index.html","hash":"0afa7c24da37d78a93467048a361bff559b4dce7","modified":1570809045480},{"_id":"public/tags/index.html","hash":"b7a99d52b9fc09564077fa16c8b55f58637eaba3","modified":1570809045480},{"_id":"public/2018/11/07/hexo&github创建个人博客/index.html","hash":"4838ffb9f7c8b3ada0de955de187820588ee8059","modified":1570809045480},{"_id":"public/2018/11/05/hexo文章模板设置/index.html","hash":"710cbe28213e38bac0baab6bc58aefab668b92dc","modified":1570809045480},{"_id":"public/2018/07/29/Git更新与推送流程/index.html","hash":"48b1f77a862579cc13b10be419fbaae07ea4bf9f","modified":1570809045480},{"_id":"public/2018/07/08/src目录结构分析/index.html","hash":"5de5954c383c00616d52f75e0ed5412af4e522bd","modified":1570809045480},{"_id":"public/2018/08/07/Vue中使用Webpack总结/index.html","hash":"a9edb61cea2c06f472955f218a0a3335159f016e","modified":1570809045480},{"_id":"public/2018/08/06/path.join和path.resolve区别/index.html","hash":"1a95d48e8b834dfebe6cc06c73284d08bde0bd5a","modified":1570809045480},{"_id":"public/2018/07/01/前端开发环境配置/index.html","hash":"79a0e7f919db6218a17e2b9b1c5bed0e02e07fa3","modified":1570809045481},{"_id":"public/2018/07/01/Yarn和NPM命令/index.html","hash":"95dde4c72a19149accf26617c689311eb21c2240","modified":1570809045481},{"_id":"public/archives/index.html","hash":"815b00db8c5365feaccf7570fa94953239a9810c","modified":1570809045481},{"_id":"public/archives/2018/index.html","hash":"778ad3f26cb2bf11fef2f46c460611e75f2507b9","modified":1570809045481},{"_id":"public/categories/前端工具/index.html","hash":"30bff34132d1df4c73de1b24aac198eaccb621c5","modified":1570809045481},{"_id":"public/index.html","hash":"761bcf0306dd33f101e738b023e74c4b9c22192a","modified":1570809045481},{"_id":"public/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1570809045486},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1570809045486},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1570809045486},{"_id":"public/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1570809045486},{"_id":"public/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1570809045486},{"_id":"public/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1570809045508},{"_id":"public/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1570809045508},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1570809045509},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1570809045509},{"_id":"public/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1570809045509},{"_id":"public/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1570809045509},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1570809045509},{"_id":"public/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1570809045509},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1570809045509},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1570809045509},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1570809045509},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1570809045509},{"_id":"public/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1570809045509},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1570809045509},{"_id":"public/css/prism-line-numbers.css","hash":"e0db113a99e4a09d2161a539b1652d96e4a22fac","modified":1570809045509},{"_id":"public/css/prism.css","hash":"9ff88ae307098176655ee460023e68ac80358ef4","modified":1570809045509},{"_id":"public/img/alipay.png","hash":"6923f412b20b050040cb471e818d82285ecb1b8a","modified":1570809045509},{"_id":"public/js/search.js","hash":"a1de7e7a2ef8330ebcd9f3a7a4622b3bac44e4f3","modified":1570809045513},{"_id":"public/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1570809045513},{"_id":"public/js/main.min.js","hash":"8acf4480f8ab859423b8926b9b790c67b5a77276","modified":1570809045513},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1570809045513},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1570809045513},{"_id":"public/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1570809045513},{"_id":"public/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1570809045513},{"_id":"public/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1570809045513},{"_id":"public/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1570809045514},{"_id":"public/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1570809045514},{"_id":"public/img/wechat.png","hash":"78f79036ebbc92b5d9762bec90ad937047b61451","modified":1570809045514},{"_id":"public/js/main.js","hash":"300b2e963683ced162e28afcd24ffc970fc23ac2","modified":1570809045678},{"_id":"public/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1570809045678},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1570809045683},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1570809045683},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1570809045871},{"_id":"public/css/style.css","hash":"4f59712181405c963fe7e80740071022050bc096","modified":1570809046079},{"_id":"public/img/favicon.ico","hash":"66ea2284099d42642d5eb8648aad5d1ff179240c","modified":1570809046081},{"_id":"public/img/avatar.jpg","hash":"1ba75ecb13fa4c134ce7eb86b77b73c2ddda8539","modified":1570809046120}],"Category":[{"name":"Vue","_id":"ck1mb5bu50004u4keuqbh5flb"},{"name":"前端工具","_id":"ck1mb5buc0009u4keuqorb2b2"},{"name":"Git","_id":"ck1mb5bum000ku4kep11y0z6j"},{"name":"JavaScript","_id":"ck1mb5bup000ru4keraevvnbf"}],"Data":[],"Page":[{"title":"categories","date":"2019-04-16T02:09:40.221Z","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate:\nlayout: categories\n---\n","updated":"2019-02-25T02:26:44.000Z","path":"categories/index.html","comments":1,"_id":"ck1mb5bu10001u4keuqxfkjx9","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"About Me","date":"2018-07-29T08:19:21.000Z","tags":null,"_content":"\n<!-- markdownlint-disable MD002 MD041-->\n\n## 关于我\n\n- 汤佳人\n\n  - 喜欢宅，心态肥宅，爱好二次元\n  - 养了两只猫，图图和胖虎\n  - 自学前端开发\n  - 喜欢所见即所得的工作方式\n  - 成功减肥20斤\n\n## 联系方式\n\n- 主页: [https://shmilybaozi.github.io/](https://shmilybaozi.github.io/)\n- GitHub: shmilybaozi\n- QQ: 35772502\n- WeChat: shmilybaozi\n- Location: 湖南长沙\n","source":"about/index.md","raw":"---\ntitle: 'About Me'\ndate: 2018-07-29 16:19:21\ntags: \n---\n\n<!-- markdownlint-disable MD002 MD041-->\n\n## 关于我\n\n- 汤佳人\n\n  - 喜欢宅，心态肥宅，爱好二次元\n  - 养了两只猫，图图和胖虎\n  - 自学前端开发\n  - 喜欢所见即所得的工作方式\n  - 成功减肥20斤\n\n## 联系方式\n\n- 主页: [https://shmilybaozi.github.io/](https://shmilybaozi.github.io/)\n- GitHub: shmilybaozi\n- QQ: 35772502\n- WeChat: shmilybaozi\n- Location: 湖南长沙\n","updated":"2019-10-09T12:07:29.200Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck1mb5bu40003u4kexrcv2gg4","content":"<!-- markdownlint-disable MD002 MD041-->\n<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><ul>\n<li><p>汤佳人</p>\n<ul>\n<li>喜欢宅，心态肥宅，爱好二次元</li>\n<li>养了两只猫，图图和胖虎</li>\n<li>自学前端开发</li>\n<li>喜欢所见即所得的工作方式</li>\n<li>成功减肥20斤</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><ul>\n<li>主页: <a href=\"https://shmilybaozi.github.io/\">https://shmilybaozi.github.io/</a></li>\n<li>GitHub: shmilybaozi</li>\n<li>QQ: 35772502</li>\n<li>WeChat: shmilybaozi</li>\n<li>Location: 湖南长沙</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<!-- markdownlint-disable MD002 MD041-->\n<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><ul>\n<li><p>汤佳人</p>\n<ul>\n<li>喜欢宅，心态肥宅，爱好二次元</li>\n<li>养了两只猫，图图和胖虎</li>\n<li>自学前端开发</li>\n<li>喜欢所见即所得的工作方式</li>\n<li>成功减肥20斤</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><ul>\n<li>主页: <a href=\"https://shmilybaozi.github.io/\">https://shmilybaozi.github.io/</a></li>\n<li>GitHub: shmilybaozi</li>\n<li>QQ: 35772502</li>\n<li>WeChat: shmilybaozi</li>\n<li>Location: 湖南长沙</li>\n</ul>\n"},{"title":"timeline","date":"2019-04-16T02:09:40.268Z","layout":"timeline","_content":"","source":"timeline/index.md","raw":"---\ntitle: timeline\ndate:\nlayout: timeline\n---\n","updated":"2019-02-25T02:26:44.000Z","path":"timeline/index.html","comments":1,"_id":"ck1mb5bv6001gu4kez16xw2fa","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-04-16T02:09:40.252Z","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate:\nlayout: tags\n---\n","updated":"2019-02-25T02:26:44.000Z","path":"tags/index.html","comments":1,"_id":"ck1mb5bv7001hu4kejucyukn8","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"src目录结构分析","description":"src目录结构分析","date":"2018-07-08T15:15:22.000Z","_content":"\nsrc目录结构及命名原则分析\n\n<!-- more -->\n<!-- markdownlint-disable MD002 MD041-->\n\n## src目录结构分析\n\n```bash\n.\n├── adapter # 适配器,处理拿到的数据,整理成对象或者别的能直接使用的数据\n|   ├── report.js # (驼峰命名：与api命名一致)\n|   └── selectPhoneNumber.js # (驼峰命名: 与api命名一致)\n|\n├── api # 通过后台接口拿到数据\n|   ├── report.js # (驼峰命名)\n|   └── selectPhoneNumber.js # (驼峰命名)\n|\n├── assets # 存放图片\n|\n├── components # 组件,通过在 views 中的 vue 文件的调用并传入数据,然后渲染在页面中,复用性强\n|   ├── AreaCard.vue #  (Pascal命名)\n|   ├── Chart.vue\n|   └── Entry.vue\n|\n├── router # 路由\n|   └── index.js\n|\n├── store # vuex\n|   ├── modules # vuex模块\n|   |   ├── clothesSize.js # (驼峰命名)\n|   |   ├── login.js\n|   |   └── user.js\n|   └── index.js\n|\n├── util # 自己封装的 js\n|   ├── fetch.js\n|   └── index.js\n|\n└── views # 页面展示\n    ├── Report.vue # (Pascal命名: 与api命名一致)\n    ├── Dormitory\n    |   ├── DormitoryStudent.vue # (Pascal命名)\n    |   ├── Edit.vue\n    |   └── index.vue\n    └── Home.vue\n```\n\n注：api -----> adapter -----> views -----> 同一个页面：这三个文件夹的命名对应一致 或者 api、adapter 与 views 中的文件夹命名一致\n","source":"_posts/src目录结构分析.md","raw":"---\ntitle: 'src目录结构分析'\ntags: Vue\ncategories: Vue\ndescription: src目录结构分析\ndate: 2018-07-08 23:15:22\n---\n\nsrc目录结构及命名原则分析\n\n<!-- more -->\n<!-- markdownlint-disable MD002 MD041-->\n\n## src目录结构分析\n\n```bash\n.\n├── adapter # 适配器,处理拿到的数据,整理成对象或者别的能直接使用的数据\n|   ├── report.js # (驼峰命名：与api命名一致)\n|   └── selectPhoneNumber.js # (驼峰命名: 与api命名一致)\n|\n├── api # 通过后台接口拿到数据\n|   ├── report.js # (驼峰命名)\n|   └── selectPhoneNumber.js # (驼峰命名)\n|\n├── assets # 存放图片\n|\n├── components # 组件,通过在 views 中的 vue 文件的调用并传入数据,然后渲染在页面中,复用性强\n|   ├── AreaCard.vue #  (Pascal命名)\n|   ├── Chart.vue\n|   └── Entry.vue\n|\n├── router # 路由\n|   └── index.js\n|\n├── store # vuex\n|   ├── modules # vuex模块\n|   |   ├── clothesSize.js # (驼峰命名)\n|   |   ├── login.js\n|   |   └── user.js\n|   └── index.js\n|\n├── util # 自己封装的 js\n|   ├── fetch.js\n|   └── index.js\n|\n└── views # 页面展示\n    ├── Report.vue # (Pascal命名: 与api命名一致)\n    ├── Dormitory\n    |   ├── DormitoryStudent.vue # (Pascal命名)\n    |   ├── Edit.vue\n    |   └── index.vue\n    └── Home.vue\n```\n\n注：api -----> adapter -----> views -----> 同一个页面：这三个文件夹的命名对应一致 或者 api、adapter 与 views 中的文件夹命名一致\n","slug":"src目录结构分析","published":1,"updated":"2019-10-11T15:31:46.166Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1mb5btx0000u4kelhmewe94","content":"<p>src目录结构及命名原则分析</p>\n<a id=\"more\"></a>\n<!-- markdownlint-disable MD002 MD041-->\n<h2 id=\"src目录结构分析\"><a href=\"#src目录结构分析\" class=\"headerlink\" title=\"src目录结构分析\"></a>src目录结构分析</h2><pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">.</span>\n├── adapter <span class=\"token comment\" spellcheck=\"true\"># 适配器,处理拿到的数据,整理成对象或者别的能直接使用的数据</span>\n<span class=\"token operator\">|</span>   ├── report.js <span class=\"token comment\" spellcheck=\"true\"># (驼峰命名：与api命名一致)</span>\n<span class=\"token operator\">|</span>   └── selectPhoneNumber.js <span class=\"token comment\" spellcheck=\"true\"># (驼峰命名: 与api命名一致)</span>\n<span class=\"token operator\">|</span>\n├── api <span class=\"token comment\" spellcheck=\"true\"># 通过后台接口拿到数据</span>\n<span class=\"token operator\">|</span>   ├── report.js <span class=\"token comment\" spellcheck=\"true\"># (驼峰命名)</span>\n<span class=\"token operator\">|</span>   └── selectPhoneNumber.js <span class=\"token comment\" spellcheck=\"true\"># (驼峰命名)</span>\n<span class=\"token operator\">|</span>\n├── assets <span class=\"token comment\" spellcheck=\"true\"># 存放图片</span>\n<span class=\"token operator\">|</span>\n├── components <span class=\"token comment\" spellcheck=\"true\"># 组件,通过在 views 中的 vue 文件的调用并传入数据,然后渲染在页面中,复用性强</span>\n<span class=\"token operator\">|</span>   ├── AreaCard.vue <span class=\"token comment\" spellcheck=\"true\">#  (Pascal命名)</span>\n<span class=\"token operator\">|</span>   ├── Chart.vue\n<span class=\"token operator\">|</span>   └── Entry.vue\n<span class=\"token operator\">|</span>\n├── router <span class=\"token comment\" spellcheck=\"true\"># 路由</span>\n<span class=\"token operator\">|</span>   └── index.js\n<span class=\"token operator\">|</span>\n├── store <span class=\"token comment\" spellcheck=\"true\"># vuex</span>\n<span class=\"token operator\">|</span>   ├── modules <span class=\"token comment\" spellcheck=\"true\"># vuex模块</span>\n<span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>   ├── clothesSize.js <span class=\"token comment\" spellcheck=\"true\"># (驼峰命名)</span>\n<span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>   ├── login.js\n<span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>   └── user.js\n<span class=\"token operator\">|</span>   └── index.js\n<span class=\"token operator\">|</span>\n├── util <span class=\"token comment\" spellcheck=\"true\"># 自己封装的 js</span>\n<span class=\"token operator\">|</span>   ├── fetch.js\n<span class=\"token operator\">|</span>   └── index.js\n<span class=\"token operator\">|</span>\n└── views <span class=\"token comment\" spellcheck=\"true\"># 页面展示</span>\n    ├── Report.vue <span class=\"token comment\" spellcheck=\"true\"># (Pascal命名: 与api命名一致)</span>\n    ├── Dormitory\n    <span class=\"token operator\">|</span>   ├── DormitoryStudent.vue <span class=\"token comment\" spellcheck=\"true\"># (Pascal命名)</span>\n    <span class=\"token operator\">|</span>   ├── Edit.vue\n    <span class=\"token operator\">|</span>   └── index.vue\n    └── Home.vue\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>注：api —–&gt; adapter —–&gt; views —–&gt; 同一个页面：这三个文件夹的命名对应一致 或者 api、adapter 与 views 中的文件夹命名一致</p>\n","site":{"data":{}},"excerpt":"<p>src目录结构及命名原则分析</p>","more":"<!-- markdownlint-disable MD002 MD041-->\n<h2 id=\"src目录结构分析\"><a href=\"#src目录结构分析\" class=\"headerlink\" title=\"src目录结构分析\"></a>src目录结构分析</h2><pre><code class=\"bash\">.\n├── adapter # 适配器,处理拿到的数据,整理成对象或者别的能直接使用的数据\n|   ├── report.js # (驼峰命名：与api命名一致)\n|   └── selectPhoneNumber.js # (驼峰命名: 与api命名一致)\n|\n├── api # 通过后台接口拿到数据\n|   ├── report.js # (驼峰命名)\n|   └── selectPhoneNumber.js # (驼峰命名)\n|\n├── assets # 存放图片\n|\n├── components # 组件,通过在 views 中的 vue 文件的调用并传入数据,然后渲染在页面中,复用性强\n|   ├── AreaCard.vue #  (Pascal命名)\n|   ├── Chart.vue\n|   └── Entry.vue\n|\n├── router # 路由\n|   └── index.js\n|\n├── store # vuex\n|   ├── modules # vuex模块\n|   |   ├── clothesSize.js # (驼峰命名)\n|   |   ├── login.js\n|   |   └── user.js\n|   └── index.js\n|\n├── util # 自己封装的 js\n|   ├── fetch.js\n|   └── index.js\n|\n└── views # 页面展示\n    ├── Report.vue # (Pascal命名: 与api命名一致)\n    ├── Dormitory\n    |   ├── DormitoryStudent.vue # (Pascal命名)\n    |   ├── Edit.vue\n    |   └── index.vue\n    └── Home.vue\n</code></pre>\n<p>注：api —–&gt; adapter —–&gt; views —–&gt; 同一个页面：这三个文件夹的命名对应一致 或者 api、adapter 与 views 中的文件夹命名一致</p>"},{"title":"Yarn 和 NPM 命令","description":"Yarn 和 NPM 命令","date":"2018-07-01T07:34:24.000Z","_content":"\nYarn 和 NPM 命令\n\n<!-- more -->\n<!-- markdownlint-disable MD041 MD002-->\n\n## Yarn和 NPM命令\n\n- NPM是随同 NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题\n- Yarn 是一个新的包管理器，用于替代现有的 npm 客户端或者其他兼容 npm 仓库的包管理工具。Yarn 保留了现有工作流的特性，优点是更快、更安全、更可靠。\n\n| 命令 | NPM | Yarn |\n|---|---|---|\n| 安装 | 新版的NodeJS 已经集成了NPM | `npm install -g yarn` 或者[通过msi安装升级](https://yarnpkg.com/lang/zh-hans/docs/install/#windows-stable) |\n| 升级 | `npm install npm -g` | 见[Yarn安装和升级](#Yarn安装和升级) |\n| 安装所有的依赖包   | `npm install` | `yarn` |\n| 安装某个依赖 | `npm install [package] --save/-S` | `yarn add [package]` |\n| 安装某个开发时依赖项目 | `npm install [package] --save-dev/-D` | `yarn add [package] --dev/-D` |\n| 安装某个全局依赖项目 | `npm install [package] -g` | `yarn global add [package]` |\n| 更新某个依赖 | `npm update [package]` | `yarn upgrade [package]` |\n| 更新某个依赖到某个版本 | `npm update [package@version]` | `yarn upgrade [package@version]` |\n| 更新某个依赖到最新版本 | `npm update [package@latest]` | `yarn upgrade [package] --latest` |\n| 删除某个依赖 | `npm uninstall [package]` | `yarn remove [package]` |\n| 运行脚本 | `npm run` | `yarn run` |\n\n- 可以通过输入`npm -v`来测试是否成功安装\n\n```bash\nnpm -v\n6.2.0\n```\n\n### NPM 常用命令\n\n- NPM提供了很多命令，使用`npm help`可查看所有命令。\n- 使用`npm help <command>`可查看某条命令的详细帮助，例如`npm help install`\n\n### 使用淘宝 NPM 镜像\n\n[NPM和 Yarn添加淘宝镜像](/2018/07/01/前端开发环境配置/#NPM和Yarn添加淘宝镜像)\n\n### Yarn安装和升级\n\n#### 通过msi安装升级 Yarn\n\n[下载最新的yarn更新包](https://yarnpkg.com/lang/zh-hans/docs/install/#windows-stable)\n\n- 通过 msi 安装的 yarn 并不会覆盖通过 npm 安装的 yarn，两者同时存在。卸载的话，也是分开卸载的。\n\n#### NPM加版本号安装\n\n```bash\nnpm install yarn -g\n```\n\n这样的话，就可以不使用msi，而还是采用更高大上的命令行模式安装最新版的yarn了。\n我们可以用`npm view yarn version`，查看NPM上的最新版本号。\n\n```bash\nnpm install yarn@最新版本号 -g\n```\n\n在官方给出的[备选安装方案](https://yarnpkg.com/zh-Hans/docs/install#alternatives-stable)中提到\n\n> 注意: 一般来说, 不推荐通过 npm 安装 Yarn 在用基于 Node 的包管理器安装 Yarn 时，该包未被签名，并且只通过基本的 SHA1 散列进行唯一完整性检查。\n> 这在安装系统级应用时有安全风险。\n> 因为这些原因，高度推荐用你的操作系统最适合的方式来安装 Yarn。\n\n#### NPM 加 latest 安装\n\n```bash\nnpm install yarn@latest -g\n```\n\n### 更新 package.json 的所有依赖\n\n- 安装 `npm-check-updates`\n\n```bash\nyarn global add npm-check-updates\n# OR\nnpm i npm-check-updates -g\n```\n\n- 手动执行 `ncu` （或 `npm-check-updates`）检查更新\n\n```bash\nncu\n```\n\n- 更新 `dependencies` 到新版本\n\n```bash\nncu -u\n```\n\n- 更新全部 `dependencies` 到最新版本(包括当前指定版本范围满足最新版本号的,比如^4.2.0 -> ^4.3.0)：\n\n```bash\nncu -a\n```\n","source":"_posts/Yarn和NPM命令.md","raw":"---\ntitle: 'Yarn 和 NPM 命令'\ntags:\n  - NPM\n  - Yarn\ncategories: 前端工具\ndescription: Yarn 和 NPM 命令\ndate: 2018-07-01 15:34:24\n---\n\nYarn 和 NPM 命令\n\n<!-- more -->\n<!-- markdownlint-disable MD041 MD002-->\n\n## Yarn和 NPM命令\n\n- NPM是随同 NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题\n- Yarn 是一个新的包管理器，用于替代现有的 npm 客户端或者其他兼容 npm 仓库的包管理工具。Yarn 保留了现有工作流的特性，优点是更快、更安全、更可靠。\n\n| 命令 | NPM | Yarn |\n|---|---|---|\n| 安装 | 新版的NodeJS 已经集成了NPM | `npm install -g yarn` 或者[通过msi安装升级](https://yarnpkg.com/lang/zh-hans/docs/install/#windows-stable) |\n| 升级 | `npm install npm -g` | 见[Yarn安装和升级](#Yarn安装和升级) |\n| 安装所有的依赖包   | `npm install` | `yarn` |\n| 安装某个依赖 | `npm install [package] --save/-S` | `yarn add [package]` |\n| 安装某个开发时依赖项目 | `npm install [package] --save-dev/-D` | `yarn add [package] --dev/-D` |\n| 安装某个全局依赖项目 | `npm install [package] -g` | `yarn global add [package]` |\n| 更新某个依赖 | `npm update [package]` | `yarn upgrade [package]` |\n| 更新某个依赖到某个版本 | `npm update [package@version]` | `yarn upgrade [package@version]` |\n| 更新某个依赖到最新版本 | `npm update [package@latest]` | `yarn upgrade [package] --latest` |\n| 删除某个依赖 | `npm uninstall [package]` | `yarn remove [package]` |\n| 运行脚本 | `npm run` | `yarn run` |\n\n- 可以通过输入`npm -v`来测试是否成功安装\n\n```bash\nnpm -v\n6.2.0\n```\n\n### NPM 常用命令\n\n- NPM提供了很多命令，使用`npm help`可查看所有命令。\n- 使用`npm help <command>`可查看某条命令的详细帮助，例如`npm help install`\n\n### 使用淘宝 NPM 镜像\n\n[NPM和 Yarn添加淘宝镜像](/2018/07/01/前端开发环境配置/#NPM和Yarn添加淘宝镜像)\n\n### Yarn安装和升级\n\n#### 通过msi安装升级 Yarn\n\n[下载最新的yarn更新包](https://yarnpkg.com/lang/zh-hans/docs/install/#windows-stable)\n\n- 通过 msi 安装的 yarn 并不会覆盖通过 npm 安装的 yarn，两者同时存在。卸载的话，也是分开卸载的。\n\n#### NPM加版本号安装\n\n```bash\nnpm install yarn -g\n```\n\n这样的话，就可以不使用msi，而还是采用更高大上的命令行模式安装最新版的yarn了。\n我们可以用`npm view yarn version`，查看NPM上的最新版本号。\n\n```bash\nnpm install yarn@最新版本号 -g\n```\n\n在官方给出的[备选安装方案](https://yarnpkg.com/zh-Hans/docs/install#alternatives-stable)中提到\n\n> 注意: 一般来说, 不推荐通过 npm 安装 Yarn 在用基于 Node 的包管理器安装 Yarn 时，该包未被签名，并且只通过基本的 SHA1 散列进行唯一完整性检查。\n> 这在安装系统级应用时有安全风险。\n> 因为这些原因，高度推荐用你的操作系统最适合的方式来安装 Yarn。\n\n#### NPM 加 latest 安装\n\n```bash\nnpm install yarn@latest -g\n```\n\n### 更新 package.json 的所有依赖\n\n- 安装 `npm-check-updates`\n\n```bash\nyarn global add npm-check-updates\n# OR\nnpm i npm-check-updates -g\n```\n\n- 手动执行 `ncu` （或 `npm-check-updates`）检查更新\n\n```bash\nncu\n```\n\n- 更新 `dependencies` 到新版本\n\n```bash\nncu -u\n```\n\n- 更新全部 `dependencies` 到最新版本(包括当前指定版本范围满足最新版本号的,比如^4.2.0 -> ^4.3.0)：\n\n```bash\nncu -a\n```\n","slug":"Yarn和NPM命令","published":1,"updated":"2019-10-11T15:45:01.495Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1mb5bu30002u4keb8tv3qsd","content":"<p>Yarn 和 NPM 命令</p>\n<a id=\"more\"></a>\n<!-- markdownlint-disable MD041 MD002-->\n<h2 id=\"Yarn和-NPM命令\"><a href=\"#Yarn和-NPM命令\" class=\"headerlink\" title=\"Yarn和 NPM命令\"></a>Yarn和 NPM命令</h2><ul>\n<li>NPM是随同 NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题</li>\n<li>Yarn 是一个新的包管理器，用于替代现有的 npm 客户端或者其他兼容 npm 仓库的包管理工具。Yarn 保留了现有工作流的特性，优点是更快、更安全、更可靠。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>NPM</th>\n<th>Yarn</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>安装</td>\n<td>新版的NodeJS 已经集成了NPM</td>\n<td><code>npm install -g yarn</code> 或者<a href=\"https://yarnpkg.com/lang/zh-hans/docs/install/#windows-stable\" target=\"_blank\" rel=\"noopener\">通过msi安装升级</a></td>\n</tr>\n<tr>\n<td>升级</td>\n<td><code>npm install npm -g</code></td>\n<td>见<a href=\"#Yarn安装和升级\">Yarn安装和升级</a></td>\n</tr>\n<tr>\n<td>安装所有的依赖包</td>\n<td><code>npm install</code></td>\n<td><code>yarn</code></td>\n</tr>\n<tr>\n<td>安装某个依赖</td>\n<td><code>npm install [package] --save/-S</code></td>\n<td><code>yarn add [package]</code></td>\n</tr>\n<tr>\n<td>安装某个开发时依赖项目</td>\n<td><code>npm install [package] --save-dev/-D</code></td>\n<td><code>yarn add [package] --dev/-D</code></td>\n</tr>\n<tr>\n<td>安装某个全局依赖项目</td>\n<td><code>npm install [package] -g</code></td>\n<td><code>yarn global add [package]</code></td>\n</tr>\n<tr>\n<td>更新某个依赖</td>\n<td><code>npm update [package]</code></td>\n<td><code>yarn upgrade [package]</code></td>\n</tr>\n<tr>\n<td>更新某个依赖到某个版本</td>\n<td><code>npm update [package@version]</code></td>\n<td><code>yarn upgrade [package@version]</code></td>\n</tr>\n<tr>\n<td>更新某个依赖到最新版本</td>\n<td><code>npm update [package@latest]</code></td>\n<td><code>yarn upgrade [package] --latest</code></td>\n</tr>\n<tr>\n<td>删除某个依赖</td>\n<td><code>npm uninstall [package]</code></td>\n<td><code>yarn remove [package]</code></td>\n</tr>\n<tr>\n<td>运行脚本</td>\n<td><code>npm run</code></td>\n<td><code>yarn run</code></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>可以通过输入<code>npm -v</code>来测试是否成功安装</li>\n</ul>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> -v\n6.2.0\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"NPM-常用命令\"><a href=\"#NPM-常用命令\" class=\"headerlink\" title=\"NPM 常用命令\"></a>NPM 常用命令</h3><ul>\n<li>NPM提供了很多命令，使用<code>npm help</code>可查看所有命令。</li>\n<li>使用<code>npm help &lt;command&gt;</code>可查看某条命令的详细帮助，例如<code>npm help install</code></li>\n</ul>\n<h3 id=\"使用淘宝-NPM-镜像\"><a href=\"#使用淘宝-NPM-镜像\" class=\"headerlink\" title=\"使用淘宝 NPM 镜像\"></a>使用淘宝 NPM 镜像</h3><p><a href=\"/2018/07/01/前端开发环境配置/#NPM和Yarn添加淘宝镜像\">NPM和 Yarn添加淘宝镜像</a></p>\n<h3 id=\"Yarn安装和升级\"><a href=\"#Yarn安装和升级\" class=\"headerlink\" title=\"Yarn安装和升级\"></a>Yarn安装和升级</h3><h4 id=\"通过msi安装升级-Yarn\"><a href=\"#通过msi安装升级-Yarn\" class=\"headerlink\" title=\"通过msi安装升级 Yarn\"></a>通过msi安装升级 Yarn</h4><p><a href=\"https://yarnpkg.com/lang/zh-hans/docs/install/#windows-stable\" target=\"_blank\" rel=\"noopener\">下载最新的yarn更新包</a></p>\n<ul>\n<li>通过 msi 安装的 yarn 并不会覆盖通过 npm 安装的 yarn，两者同时存在。卸载的话，也是分开卸载的。</li>\n</ul>\n<h4 id=\"NPM加版本号安装\"><a href=\"#NPM加版本号安装\" class=\"headerlink\" title=\"NPM加版本号安装\"></a>NPM加版本号安装</h4><pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> yarn -g\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这样的话，就可以不使用msi，而还是采用更高大上的命令行模式安装最新版的yarn了。<br>我们可以用<code>npm view yarn version</code>，查看NPM上的最新版本号。</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> yarn@最新版本号 -g\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在官方给出的<a href=\"https://yarnpkg.com/zh-Hans/docs/install#alternatives-stable\" target=\"_blank\" rel=\"noopener\">备选安装方案</a>中提到</p>\n<blockquote>\n<p>注意: 一般来说, 不推荐通过 npm 安装 Yarn 在用基于 Node 的包管理器安装 Yarn 时，该包未被签名，并且只通过基本的 SHA1 散列进行唯一完整性检查。<br>这在安装系统级应用时有安全风险。<br>因为这些原因，高度推荐用你的操作系统最适合的方式来安装 Yarn。</p>\n</blockquote>\n<h4 id=\"NPM-加-latest-安装\"><a href=\"#NPM-加-latest-安装\" class=\"headerlink\" title=\"NPM 加 latest 安装\"></a>NPM 加 latest 安装</h4><pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> yarn@latest -g\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"更新-package-json-的所有依赖\"><a href=\"#更新-package-json-的所有依赖\" class=\"headerlink\" title=\"更新 package.json 的所有依赖\"></a>更新 package.json 的所有依赖</h3><ul>\n<li>安装 <code>npm-check-updates</code></li>\n</ul>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">yarn global add npm-check-updates\n<span class=\"token comment\" spellcheck=\"true\"># OR</span>\n<span class=\"token function\">npm</span> i npm-check-updates -g\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>手动执行 <code>ncu</code> （或 <code>npm-check-updates</code>）检查更新</li>\n</ul>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">ncu\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>更新 <code>dependencies</code> 到新版本</li>\n</ul>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">ncu -u\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>更新全部 <code>dependencies</code> 到最新版本(包括当前指定版本范围满足最新版本号的,比如^4.2.0 -&gt; ^4.3.0)：</li>\n</ul>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">ncu -a\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"<p>Yarn 和 NPM 命令</p>","more":"<!-- markdownlint-disable MD041 MD002-->\n<h2 id=\"Yarn和-NPM命令\"><a href=\"#Yarn和-NPM命令\" class=\"headerlink\" title=\"Yarn和 NPM命令\"></a>Yarn和 NPM命令</h2><ul>\n<li>NPM是随同 NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题</li>\n<li>Yarn 是一个新的包管理器，用于替代现有的 npm 客户端或者其他兼容 npm 仓库的包管理工具。Yarn 保留了现有工作流的特性，优点是更快、更安全、更可靠。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>NPM</th>\n<th>Yarn</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>安装</td>\n<td>新版的NodeJS 已经集成了NPM</td>\n<td><code>npm install -g yarn</code> 或者<a href=\"https://yarnpkg.com/lang/zh-hans/docs/install/#windows-stable\" target=\"_blank\" rel=\"noopener\">通过msi安装升级</a></td>\n</tr>\n<tr>\n<td>升级</td>\n<td><code>npm install npm -g</code></td>\n<td>见<a href=\"#Yarn安装和升级\">Yarn安装和升级</a></td>\n</tr>\n<tr>\n<td>安装所有的依赖包</td>\n<td><code>npm install</code></td>\n<td><code>yarn</code></td>\n</tr>\n<tr>\n<td>安装某个依赖</td>\n<td><code>npm install [package] --save/-S</code></td>\n<td><code>yarn add [package]</code></td>\n</tr>\n<tr>\n<td>安装某个开发时依赖项目</td>\n<td><code>npm install [package] --save-dev/-D</code></td>\n<td><code>yarn add [package] --dev/-D</code></td>\n</tr>\n<tr>\n<td>安装某个全局依赖项目</td>\n<td><code>npm install [package] -g</code></td>\n<td><code>yarn global add [package]</code></td>\n</tr>\n<tr>\n<td>更新某个依赖</td>\n<td><code>npm update [package]</code></td>\n<td><code>yarn upgrade [package]</code></td>\n</tr>\n<tr>\n<td>更新某个依赖到某个版本</td>\n<td><code>npm update [package@version]</code></td>\n<td><code>yarn upgrade [package@version]</code></td>\n</tr>\n<tr>\n<td>更新某个依赖到最新版本</td>\n<td><code>npm update [package@latest]</code></td>\n<td><code>yarn upgrade [package] --latest</code></td>\n</tr>\n<tr>\n<td>删除某个依赖</td>\n<td><code>npm uninstall [package]</code></td>\n<td><code>yarn remove [package]</code></td>\n</tr>\n<tr>\n<td>运行脚本</td>\n<td><code>npm run</code></td>\n<td><code>yarn run</code></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>可以通过输入<code>npm -v</code>来测试是否成功安装</li>\n</ul>\n<pre><code class=\"bash\">npm -v\n6.2.0\n</code></pre>\n<h3 id=\"NPM-常用命令\"><a href=\"#NPM-常用命令\" class=\"headerlink\" title=\"NPM 常用命令\"></a>NPM 常用命令</h3><ul>\n<li>NPM提供了很多命令，使用<code>npm help</code>可查看所有命令。</li>\n<li>使用<code>npm help &lt;command&gt;</code>可查看某条命令的详细帮助，例如<code>npm help install</code></li>\n</ul>\n<h3 id=\"使用淘宝-NPM-镜像\"><a href=\"#使用淘宝-NPM-镜像\" class=\"headerlink\" title=\"使用淘宝 NPM 镜像\"></a>使用淘宝 NPM 镜像</h3><p><a href=\"/2018/07/01/前端开发环境配置/#NPM和Yarn添加淘宝镜像\">NPM和 Yarn添加淘宝镜像</a></p>\n<h3 id=\"Yarn安装和升级\"><a href=\"#Yarn安装和升级\" class=\"headerlink\" title=\"Yarn安装和升级\"></a>Yarn安装和升级</h3><h4 id=\"通过msi安装升级-Yarn\"><a href=\"#通过msi安装升级-Yarn\" class=\"headerlink\" title=\"通过msi安装升级 Yarn\"></a>通过msi安装升级 Yarn</h4><p><a href=\"https://yarnpkg.com/lang/zh-hans/docs/install/#windows-stable\" target=\"_blank\" rel=\"noopener\">下载最新的yarn更新包</a></p>\n<ul>\n<li>通过 msi 安装的 yarn 并不会覆盖通过 npm 安装的 yarn，两者同时存在。卸载的话，也是分开卸载的。</li>\n</ul>\n<h4 id=\"NPM加版本号安装\"><a href=\"#NPM加版本号安装\" class=\"headerlink\" title=\"NPM加版本号安装\"></a>NPM加版本号安装</h4><pre><code class=\"bash\">npm install yarn -g\n</code></pre>\n<p>这样的话，就可以不使用msi，而还是采用更高大上的命令行模式安装最新版的yarn了。<br>我们可以用<code>npm view yarn version</code>，查看NPM上的最新版本号。</p>\n<pre><code class=\"bash\">npm install yarn@最新版本号 -g\n</code></pre>\n<p>在官方给出的<a href=\"https://yarnpkg.com/zh-Hans/docs/install#alternatives-stable\" target=\"_blank\" rel=\"noopener\">备选安装方案</a>中提到</p>\n<blockquote>\n<p>注意: 一般来说, 不推荐通过 npm 安装 Yarn 在用基于 Node 的包管理器安装 Yarn 时，该包未被签名，并且只通过基本的 SHA1 散列进行唯一完整性检查。<br>这在安装系统级应用时有安全风险。<br>因为这些原因，高度推荐用你的操作系统最适合的方式来安装 Yarn。</p>\n</blockquote>\n<h4 id=\"NPM-加-latest-安装\"><a href=\"#NPM-加-latest-安装\" class=\"headerlink\" title=\"NPM 加 latest 安装\"></a>NPM 加 latest 安装</h4><pre><code class=\"bash\">npm install yarn@latest -g\n</code></pre>\n<h3 id=\"更新-package-json-的所有依赖\"><a href=\"#更新-package-json-的所有依赖\" class=\"headerlink\" title=\"更新 package.json 的所有依赖\"></a>更新 package.json 的所有依赖</h3><ul>\n<li>安装 <code>npm-check-updates</code></li>\n</ul>\n<pre><code class=\"bash\">yarn global add npm-check-updates\n# OR\nnpm i npm-check-updates -g\n</code></pre>\n<ul>\n<li>手动执行 <code>ncu</code> （或 <code>npm-check-updates</code>）检查更新</li>\n</ul>\n<pre><code class=\"bash\">ncu\n</code></pre>\n<ul>\n<li>更新 <code>dependencies</code> 到新版本</li>\n</ul>\n<pre><code class=\"bash\">ncu -u\n</code></pre>\n<ul>\n<li>更新全部 <code>dependencies</code> 到最新版本(包括当前指定版本范围满足最新版本号的,比如^4.2.0 -&gt; ^4.3.0)：</li>\n</ul>\n<pre><code class=\"bash\">ncu -a\n</code></pre>"},{"title":"hexo&github创建个人博客","date":"2018-11-07T06:27:37.000Z","description":"hexo&github创建个人博客","_content":"\n利用 hexo 和 github 搭载个人博客\n\n<!-- more -->\n<!-- markdownlint-disable MD041 MD002-->\n\n## 准备工作\n\n- 安装了 node.js, npm, 并会使用\n- 了解git\n\n## 配置 SSH key\n\n- 用 git 或者 cmder 等命令行工具执行：\n\n  ```bash\n  cd ~/. ssh # 检查本机已存在的ssh密钥\n  ```\n\n  如果显示 `No such file or directory` 说明还未设置过 SSH key\n\n- 执行：\n\n  ```bash\n  ssh-keygen -t rsa -C \"邮件地址\"\n  ```\n\n  然后持续回车, 最后会生成一个文件在 `.ssh\\id_rsa.pub` 中, 用记事本打开该文件, 复制里面的内容。\n\n- 打开你的 github 主页, 进入个人设置 -> SSH and GPG keys -> New SSH key\n- 将刚复制的内容粘贴到 key 那里, title 取个自己喜欢的, 然后保存。\n- 测试是否成功\n\n  ```bash\n  ssh -T git@github.com # 注意邮箱地址不用改\n  ```\n\n  如果提示 `Are you sure you want to continue connecting (yes/no)?` , 输入yes, 然后就会提示 `...You’ve successfully authenticated, but GitHub does not provide shell access.`, 就是成功了。\n\n- 配置 git 用户名和邮箱\n\n  ```bash\n  git config --global user.name \"username\"\n  git config --global user.email  \"email\"\n  ```\n\n## github\n\n- 创建 github 账号\n- 创建 github 个人项目 `username.github.io`\n- 创建分支 hexo\n- 设置 hexo 为默认分支\n- 使用 `git clone git@github.com:username/username.github.io.git` 拷贝仓库\n\n## Hexo\n\n[hexo官网](http://hexo.io)\n\n[hexo github](https://github.com/hexojs/hexo)\n\n### 安装\n\n```bash\n# npm 安装\nnpm install -g hexo-cli\n```\n\n### 初始化\n\n在刚刚 `git clone` 的这个文件夹中, 执行：\n\n```bash\n# 此时当前分支应显示为 hexo\nnpm install hexo\nhexo init\nnpm install\nnpm install hexo-deployer-git\n```\n\n执行以上命令之后, hexo 就会在文件夹中生成博客相关文件\n\n### 将 hexo 部署到 username.github.io\n\n在 `_config.yml` 中修改：\n\n```yml\ndeploy:\n  type: git\n  repository: git@github.com:shmilybaozi/shmilybaozi.github.io.git\n  branch: master\n```\n\n```bash\nhexo g # hexo generate 生成静态文件\nhexo g -d # 文件生成后立即部署网站\n```\n\n### 开始使用\n\n一些 hexo 命令\n\n```bash\nhexo new [layout] <title> # 新建一篇文章, 如果标题包含空格的话, 请使用引号括起来。layout 为 draft 即为草稿\nhexo publish [layout] <filename> # 发表草稿, 如果标题包含空格的话, 请使用引号括起来。\nhexo g # hexo generate 生成静态文件\nhexo g -d # 文件生成后立即部署网站\nhexo s # hexo server 启动服务器\nhexo d # hexo deploy 部署网站\nhexo clean # 清除缓存\nhexo s --debug # 调试模式, 更改了配置或文章后随时刷新页面来查看效果\n```\n\n### 部署文章的步骤\n\n```bash\nhexo clean # 清除缓存\nhexo g -d # 文件生成后立即部署网站\n```\n\n### 将 hexo 中的代码提交到 git 上\n\n```bash\ngit add .\ngit commit -m \"...\"\ngit push origin hexo\n```\n\n这样一来, 在 github 上的 `username.github.io` 仓库就有两个分支, 一个 `hexo` 分支用来存放网站的原始文件, 一个 `master` 分支用来存放生成的静态网页。\n\n访问 `username.github.io` 就能看到个人博客的样子。","source":"_posts/hexo&github创建个人博客.md","raw":"---\ntitle: hexo&github创建个人博客\ndate: 2018-11-07 14:27:37\ntags: \n- Hexo\n- Github\ncategories: 前端工具\ndescription: hexo&github创建个人博客 \n---\n\n利用 hexo 和 github 搭载个人博客\n\n<!-- more -->\n<!-- markdownlint-disable MD041 MD002-->\n\n## 准备工作\n\n- 安装了 node.js, npm, 并会使用\n- 了解git\n\n## 配置 SSH key\n\n- 用 git 或者 cmder 等命令行工具执行：\n\n  ```bash\n  cd ~/. ssh # 检查本机已存在的ssh密钥\n  ```\n\n  如果显示 `No such file or directory` 说明还未设置过 SSH key\n\n- 执行：\n\n  ```bash\n  ssh-keygen -t rsa -C \"邮件地址\"\n  ```\n\n  然后持续回车, 最后会生成一个文件在 `.ssh\\id_rsa.pub` 中, 用记事本打开该文件, 复制里面的内容。\n\n- 打开你的 github 主页, 进入个人设置 -> SSH and GPG keys -> New SSH key\n- 将刚复制的内容粘贴到 key 那里, title 取个自己喜欢的, 然后保存。\n- 测试是否成功\n\n  ```bash\n  ssh -T git@github.com # 注意邮箱地址不用改\n  ```\n\n  如果提示 `Are you sure you want to continue connecting (yes/no)?` , 输入yes, 然后就会提示 `...You’ve successfully authenticated, but GitHub does not provide shell access.`, 就是成功了。\n\n- 配置 git 用户名和邮箱\n\n  ```bash\n  git config --global user.name \"username\"\n  git config --global user.email  \"email\"\n  ```\n\n## github\n\n- 创建 github 账号\n- 创建 github 个人项目 `username.github.io`\n- 创建分支 hexo\n- 设置 hexo 为默认分支\n- 使用 `git clone git@github.com:username/username.github.io.git` 拷贝仓库\n\n## Hexo\n\n[hexo官网](http://hexo.io)\n\n[hexo github](https://github.com/hexojs/hexo)\n\n### 安装\n\n```bash\n# npm 安装\nnpm install -g hexo-cli\n```\n\n### 初始化\n\n在刚刚 `git clone` 的这个文件夹中, 执行：\n\n```bash\n# 此时当前分支应显示为 hexo\nnpm install hexo\nhexo init\nnpm install\nnpm install hexo-deployer-git\n```\n\n执行以上命令之后, hexo 就会在文件夹中生成博客相关文件\n\n### 将 hexo 部署到 username.github.io\n\n在 `_config.yml` 中修改：\n\n```yml\ndeploy:\n  type: git\n  repository: git@github.com:shmilybaozi/shmilybaozi.github.io.git\n  branch: master\n```\n\n```bash\nhexo g # hexo generate 生成静态文件\nhexo g -d # 文件生成后立即部署网站\n```\n\n### 开始使用\n\n一些 hexo 命令\n\n```bash\nhexo new [layout] <title> # 新建一篇文章, 如果标题包含空格的话, 请使用引号括起来。layout 为 draft 即为草稿\nhexo publish [layout] <filename> # 发表草稿, 如果标题包含空格的话, 请使用引号括起来。\nhexo g # hexo generate 生成静态文件\nhexo g -d # 文件生成后立即部署网站\nhexo s # hexo server 启动服务器\nhexo d # hexo deploy 部署网站\nhexo clean # 清除缓存\nhexo s --debug # 调试模式, 更改了配置或文章后随时刷新页面来查看效果\n```\n\n### 部署文章的步骤\n\n```bash\nhexo clean # 清除缓存\nhexo g -d # 文件生成后立即部署网站\n```\n\n### 将 hexo 中的代码提交到 git 上\n\n```bash\ngit add .\ngit commit -m \"...\"\ngit push origin hexo\n```\n\n这样一来, 在 github 上的 `username.github.io` 仓库就有两个分支, 一个 `hexo` 分支用来存放网站的原始文件, 一个 `master` 分支用来存放生成的静态网页。\n\n访问 `username.github.io` 就能看到个人博客的样子。","slug":"hexo&github创建个人博客","published":1,"updated":"2019-10-09T12:07:29.196Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1mb5bu70006u4ke4owu1n24","content":"<p>利用 hexo 和 github 搭载个人博客</p>\n<a id=\"more\"></a>\n<!-- markdownlint-disable MD041 MD002-->\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ul>\n<li>安装了 node.js, npm, 并会使用</li>\n<li>了解git</li>\n</ul>\n<h2 id=\"配置-SSH-key\"><a href=\"#配置-SSH-key\" class=\"headerlink\" title=\"配置 SSH key\"></a>配置 SSH key</h2><ul>\n<li><p>用 git 或者 cmder 等命令行工具执行：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">cd</span> ~/. <span class=\"token function\">ssh</span> <span class=\"token comment\" spellcheck=\"true\"># 检查本机已存在的ssh密钥</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果显示 <code>No such file or directory</code> 说明还未设置过 SSH key</p>\n</li>\n<li><p>执行：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">ssh-keygen -t rsa -C <span class=\"token string\">\"邮件地址\"</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>然后持续回车, 最后会生成一个文件在 <code>.ssh\\id_rsa.pub</code> 中, 用记事本打开该文件, 复制里面的内容。</p>\n</li>\n<li><p>打开你的 github 主页, 进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key</p>\n</li>\n<li>将刚复制的内容粘贴到 key 那里, title 取个自己喜欢的, 然后保存。</li>\n<li><p>测试是否成功</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">ssh</span> -T git@github.com <span class=\"token comment\" spellcheck=\"true\"># 注意邮箱地址不用改</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果提示 <code>Are you sure you want to continue connecting (yes/no)?</code> , 输入yes, 然后就会提示 <code>...You’ve successfully authenticated, but GitHub does not provide shell access.</code>, 就是成功了。</p>\n</li>\n<li><p>配置 git 用户名和邮箱</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global user.name <span class=\"token string\">\"username\"</span>\n<span class=\"token function\">git</span> config --global user.email  <span class=\"token string\">\"email\"</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h2 id=\"github\"><a href=\"#github\" class=\"headerlink\" title=\"github\"></a>github</h2><ul>\n<li>创建 github 账号</li>\n<li>创建 github 个人项目 <code>username.github.io</code></li>\n<li>创建分支 hexo</li>\n<li>设置 hexo 为默认分支</li>\n<li>使用 <code>git clone git@github.com:username/username.github.io.git</code> 拷贝仓库</li>\n</ul>\n<h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h2><p><a href=\"http://hexo.io\" target=\"_blank\" rel=\"noopener\">hexo官网</a></p>\n<p><a href=\"https://github.com/hexojs/hexo\" target=\"_blank\" rel=\"noopener\">hexo github</a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># npm 安装</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g hexo-cli\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>在刚刚 <code>git clone</code> 的这个文件夹中, 执行：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># 此时当前分支应显示为 hexo</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo\nhexo init\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行以上命令之后, hexo 就会在文件夹中生成博客相关文件</p>\n<h3 id=\"将-hexo-部署到-username-github-io\"><a href=\"#将-hexo-部署到-username-github-io\" class=\"headerlink\" title=\"将 hexo 部署到 username.github.io\"></a>将 hexo 部署到 username.github.io</h3><p>在 <code>_config.yml</code> 中修改：</p>\n<pre class=\"line-numbers language-yml\"><code class=\"language-yml\">deploy:\n  type: git\n  repository: git@github.com:shmilybaozi/shmilybaozi.github.io.git\n  branch: master\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">hexo g <span class=\"token comment\" spellcheck=\"true\"># hexo generate 生成静态文件</span>\nhexo g -d <span class=\"token comment\" spellcheck=\"true\"># 文件生成后立即部署网站</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h3><p>一些 hexo 命令</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">hexo new <span class=\"token punctuation\">[</span>layout<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\"># 新建一篇文章, 如果标题包含空格的话, 请使用引号括起来。layout 为 draft 即为草稿</span>\nhexo publish <span class=\"token punctuation\">[</span>layout<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span>filename<span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\"># 发表草稿, 如果标题包含空格的话, 请使用引号括起来。</span>\nhexo g <span class=\"token comment\" spellcheck=\"true\"># hexo generate 生成静态文件</span>\nhexo g -d <span class=\"token comment\" spellcheck=\"true\"># 文件生成后立即部署网站</span>\nhexo s <span class=\"token comment\" spellcheck=\"true\"># hexo server 启动服务器</span>\nhexo d <span class=\"token comment\" spellcheck=\"true\"># hexo deploy 部署网站</span>\nhexo clean <span class=\"token comment\" spellcheck=\"true\"># 清除缓存</span>\nhexo s --debug <span class=\"token comment\" spellcheck=\"true\"># 调试模式, 更改了配置或文章后随时刷新页面来查看效果</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"部署文章的步骤\"><a href=\"#部署文章的步骤\" class=\"headerlink\" title=\"部署文章的步骤\"></a>部署文章的步骤</h3><pre class=\"line-numbers language-bash\"><code class=\"language-bash\">hexo clean <span class=\"token comment\" spellcheck=\"true\"># 清除缓存</span>\nhexo g -d <span class=\"token comment\" spellcheck=\"true\"># 文件生成后立即部署网站</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"将-hexo-中的代码提交到-git-上\"><a href=\"#将-hexo-中的代码提交到-git-上\" class=\"headerlink\" title=\"将 hexo 中的代码提交到 git 上\"></a>将 hexo 中的代码提交到 git 上</h3><pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> add <span class=\"token keyword\">.</span>\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">\"...\"</span>\n<span class=\"token function\">git</span> push origin hexo\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>这样一来, 在 github 上的 <code>username.github.io</code> 仓库就有两个分支, 一个 <code>hexo</code> 分支用来存放网站的原始文件, 一个 <code>master</code> 分支用来存放生成的静态网页。</p>\n<p>访问 <code>username.github.io</code> 就能看到个人博客的样子。</p>\n","site":{"data":{}},"excerpt":"<p>利用 hexo 和 github 搭载个人博客</p>","more":"<!-- markdownlint-disable MD041 MD002-->\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ul>\n<li>安装了 node.js, npm, 并会使用</li>\n<li>了解git</li>\n</ul>\n<h2 id=\"配置-SSH-key\"><a href=\"#配置-SSH-key\" class=\"headerlink\" title=\"配置 SSH key\"></a>配置 SSH key</h2><ul>\n<li><p>用 git 或者 cmder 等命令行工具执行：</p>\n<pre><code class=\"bash\">cd ~/. ssh # 检查本机已存在的ssh密钥\n</code></pre>\n<p>如果显示 <code>No such file or directory</code> 说明还未设置过 SSH key</p>\n</li>\n<li><p>执行：</p>\n<pre><code class=\"bash\">ssh-keygen -t rsa -C &quot;邮件地址&quot;\n</code></pre>\n<p>然后持续回车, 最后会生成一个文件在 <code>.ssh\\id_rsa.pub</code> 中, 用记事本打开该文件, 复制里面的内容。</p>\n</li>\n<li><p>打开你的 github 主页, 进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key</p>\n</li>\n<li>将刚复制的内容粘贴到 key 那里, title 取个自己喜欢的, 然后保存。</li>\n<li><p>测试是否成功</p>\n<pre><code class=\"bash\">ssh -T git@github.com # 注意邮箱地址不用改\n</code></pre>\n<p>如果提示 <code>Are you sure you want to continue connecting (yes/no)?</code> , 输入yes, 然后就会提示 <code>...You’ve successfully authenticated, but GitHub does not provide shell access.</code>, 就是成功了。</p>\n</li>\n<li><p>配置 git 用户名和邮箱</p>\n<pre><code class=\"bash\">git config --global user.name &quot;username&quot;\ngit config --global user.email  &quot;email&quot;\n</code></pre>\n</li>\n</ul>\n<h2 id=\"github\"><a href=\"#github\" class=\"headerlink\" title=\"github\"></a>github</h2><ul>\n<li>创建 github 账号</li>\n<li>创建 github 个人项目 <code>username.github.io</code></li>\n<li>创建分支 hexo</li>\n<li>设置 hexo 为默认分支</li>\n<li>使用 <code>git clone git@github.com:username/username.github.io.git</code> 拷贝仓库</li>\n</ul>\n<h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h2><p><a href=\"http://hexo.io\" target=\"_blank\" rel=\"noopener\">hexo官网</a></p>\n<p><a href=\"https://github.com/hexojs/hexo\" target=\"_blank\" rel=\"noopener\">hexo github</a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><pre><code class=\"bash\"># npm 安装\nnpm install -g hexo-cli\n</code></pre>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>在刚刚 <code>git clone</code> 的这个文件夹中, 执行：</p>\n<pre><code class=\"bash\"># 此时当前分支应显示为 hexo\nnpm install hexo\nhexo init\nnpm install\nnpm install hexo-deployer-git\n</code></pre>\n<p>执行以上命令之后, hexo 就会在文件夹中生成博客相关文件</p>\n<h3 id=\"将-hexo-部署到-username-github-io\"><a href=\"#将-hexo-部署到-username-github-io\" class=\"headerlink\" title=\"将 hexo 部署到 username.github.io\"></a>将 hexo 部署到 username.github.io</h3><p>在 <code>_config.yml</code> 中修改：</p>\n<pre><code class=\"yml\">deploy:\n  type: git\n  repository: git@github.com:shmilybaozi/shmilybaozi.github.io.git\n  branch: master\n</code></pre>\n<pre><code class=\"bash\">hexo g # hexo generate 生成静态文件\nhexo g -d # 文件生成后立即部署网站\n</code></pre>\n<h3 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h3><p>一些 hexo 命令</p>\n<pre><code class=\"bash\">hexo new [layout] &lt;title&gt; # 新建一篇文章, 如果标题包含空格的话, 请使用引号括起来。layout 为 draft 即为草稿\nhexo publish [layout] &lt;filename&gt; # 发表草稿, 如果标题包含空格的话, 请使用引号括起来。\nhexo g # hexo generate 生成静态文件\nhexo g -d # 文件生成后立即部署网站\nhexo s # hexo server 启动服务器\nhexo d # hexo deploy 部署网站\nhexo clean # 清除缓存\nhexo s --debug # 调试模式, 更改了配置或文章后随时刷新页面来查看效果\n</code></pre>\n<h3 id=\"部署文章的步骤\"><a href=\"#部署文章的步骤\" class=\"headerlink\" title=\"部署文章的步骤\"></a>部署文章的步骤</h3><pre><code class=\"bash\">hexo clean # 清除缓存\nhexo g -d # 文件生成后立即部署网站\n</code></pre>\n<h3 id=\"将-hexo-中的代码提交到-git-上\"><a href=\"#将-hexo-中的代码提交到-git-上\" class=\"headerlink\" title=\"将 hexo 中的代码提交到 git 上\"></a>将 hexo 中的代码提交到 git 上</h3><pre><code class=\"bash\">git add .\ngit commit -m &quot;...&quot;\ngit push origin hexo\n</code></pre>\n<p>这样一来, 在 github 上的 <code>username.github.io</code> 仓库就有两个分支, 一个 <code>hexo</code> 分支用来存放网站的原始文件, 一个 <code>master</code> 分支用来存放生成的静态网页。</p>\n<p>访问 <code>username.github.io</code> 就能看到个人博客的样子。</p>"},{"title":"Git更新与推送流程","description":"Git更新与推送流程","date":"2018-07-29T07:48:01.000Z","_content":"\nGit更新与推送流程\n\n<!-- more -->\n<!-- markdownlint-disable MD041 MD002-->\n\n## Git更新与推送流程\n\n- 设置主仓库地址\n\n```bash\ngit remote add upstream https://repo-address\n```\n\n- 获取主仓库最新提交\n\n```bash\ngit pull upstream\n```\n\n- 将主仓库的 `master` 分支合并到本地的 `master` 分支\n\n```bash\ngit merge upstream/master master\n```\n\n- 解决冲突并提交合并\n\n```bash\ngit commit -a -m 'merge upstream master'\n```\n\n- 推送至远程仓库\n\n```bash\ngit push\n```\n\n- 提交Pull Request\n\n## 自定义Git\n\n### 让Git显示颜色\n\n```bash\ngit config --global color.ui true\n```\n\n### 配置别名\n\n- `git st`表示`git status`\n- `git co`表示`git checkout`\n- `git ci`表示`git commit`\n- `git br`表示`git branch`\n\n```bash\ngit config --global alias.st status\ngit config --global alias.co checkout\ngit config --global alias.ci commit\ngit config --global alias.br branch\n```\n\n- 命令`git reset HEAD file`可以把暂存区的修改撤销掉（unstage），重新放回工作区。既然是一个unstage操作，就可以配置一个unstage别名：\n\n```bash\ngit config --global alias.unstage 'reset HEAD'\n```\n\n- 配置一个`git last`，让其显示最后一次提交信息：\n\n```bash\ngit config --global alias.last 'log -1'\n```\n\n- 还有人丧心病狂地把`lg`配置成了：\n\n```bash\ngit config --global alias.lg \"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit\"\n```\n\n### 配置文件\n\n配置Git的时候，加上`--global`是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。\n配置文件放哪了?每个仓库的Git配置文件都放在`.git/config`文件中\n而当前用户的Git配置文件放在用户主目录下的一个隐藏文件`.gitconfig`中\n别名就在`[alias]`后面，要删除别名，直接把对应的行删掉即可。\n配置别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置。\n\n```bash\n[alias]\n  st = status\n  co = checkout\n  ci = commit\n  br = branch\n  unstage = reset HEAD\n  last = log -1\n  lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit\n  up = upstream\n  og = origin\n  ms = master\n  mg = merge\n  plp = pull upstream\n  mgums = merge upstream/master master\n  rap = remote add upstream\n  rag = remote add origin\n  psg = push -u origin\n```","source":"_posts/Git更新与推送流程.md","raw":"---\ntitle: Git更新与推送流程\ntags: Git\ncategories: Git\ndescription: Git更新与推送流程\ndate: 2018-07-29 15:48:01\n---\n\nGit更新与推送流程\n\n<!-- more -->\n<!-- markdownlint-disable MD041 MD002-->\n\n## Git更新与推送流程\n\n- 设置主仓库地址\n\n```bash\ngit remote add upstream https://repo-address\n```\n\n- 获取主仓库最新提交\n\n```bash\ngit pull upstream\n```\n\n- 将主仓库的 `master` 分支合并到本地的 `master` 分支\n\n```bash\ngit merge upstream/master master\n```\n\n- 解决冲突并提交合并\n\n```bash\ngit commit -a -m 'merge upstream master'\n```\n\n- 推送至远程仓库\n\n```bash\ngit push\n```\n\n- 提交Pull Request\n\n## 自定义Git\n\n### 让Git显示颜色\n\n```bash\ngit config --global color.ui true\n```\n\n### 配置别名\n\n- `git st`表示`git status`\n- `git co`表示`git checkout`\n- `git ci`表示`git commit`\n- `git br`表示`git branch`\n\n```bash\ngit config --global alias.st status\ngit config --global alias.co checkout\ngit config --global alias.ci commit\ngit config --global alias.br branch\n```\n\n- 命令`git reset HEAD file`可以把暂存区的修改撤销掉（unstage），重新放回工作区。既然是一个unstage操作，就可以配置一个unstage别名：\n\n```bash\ngit config --global alias.unstage 'reset HEAD'\n```\n\n- 配置一个`git last`，让其显示最后一次提交信息：\n\n```bash\ngit config --global alias.last 'log -1'\n```\n\n- 还有人丧心病狂地把`lg`配置成了：\n\n```bash\ngit config --global alias.lg \"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit\"\n```\n\n### 配置文件\n\n配置Git的时候，加上`--global`是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。\n配置文件放哪了?每个仓库的Git配置文件都放在`.git/config`文件中\n而当前用户的Git配置文件放在用户主目录下的一个隐藏文件`.gitconfig`中\n别名就在`[alias]`后面，要删除别名，直接把对应的行删掉即可。\n配置别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置。\n\n```bash\n[alias]\n  st = status\n  co = checkout\n  ci = commit\n  br = branch\n  unstage = reset HEAD\n  last = log -1\n  lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit\n  up = upstream\n  og = origin\n  ms = master\n  mg = merge\n  plp = pull upstream\n  mgums = merge upstream/master master\n  rap = remote add upstream\n  rag = remote add origin\n  psg = push -u origin\n```","slug":"Git更新与推送流程","published":1,"updated":"2019-02-25T02:26:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1mb5bu90007u4keusy30t8l","content":"<p>Git更新与推送流程</p>\n<a id=\"more\"></a>\n<!-- markdownlint-disable MD041 MD002-->\n<h2 id=\"Git更新与推送流程\"><a href=\"#Git更新与推送流程\" class=\"headerlink\" title=\"Git更新与推送流程\"></a>Git更新与推送流程</h2><ul>\n<li>设置主仓库地址</li>\n</ul>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> remote add upstream https://repo-address\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>获取主仓库最新提交</li>\n</ul>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> pull upstream\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>将主仓库的 <code>master</code> 分支合并到本地的 <code>master</code> 分支</li>\n</ul>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> merge upstream/master master\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>解决冲突并提交合并</li>\n</ul>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> commit -a -m <span class=\"token string\">'merge upstream master'</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>推送至远程仓库</li>\n</ul>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>提交Pull Request</li>\n</ul>\n<h2 id=\"自定义Git\"><a href=\"#自定义Git\" class=\"headerlink\" title=\"自定义Git\"></a>自定义Git</h2><h3 id=\"让Git显示颜色\"><a href=\"#让Git显示颜色\" class=\"headerlink\" title=\"让Git显示颜色\"></a>让Git显示颜色</h3><pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global color.ui <span class=\"token boolean\">true</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"配置别名\"><a href=\"#配置别名\" class=\"headerlink\" title=\"配置别名\"></a>配置别名</h3><ul>\n<li><code>git st</code>表示<code>git status</code></li>\n<li><code>git co</code>表示<code>git checkout</code></li>\n<li><code>git ci</code>表示<code>git commit</code></li>\n<li><code>git br</code>表示<code>git branch</code></li>\n</ul>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global alias.st status\n<span class=\"token function\">git</span> config --global alias.co checkout\n<span class=\"token function\">git</span> config --global alias.ci commit\n<span class=\"token function\">git</span> config --global alias.br branch\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>命令<code>git reset HEAD file</code>可以把暂存区的修改撤销掉（unstage），重新放回工作区。既然是一个unstage操作，就可以配置一个unstage别名：</li>\n</ul>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global alias.unstage <span class=\"token string\">'reset HEAD'</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>配置一个<code>git last</code>，让其显示最后一次提交信息：</li>\n</ul>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global alias.last <span class=\"token string\">'log -1'</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>还有人丧心病狂地把<code>lg</code>配置成了：</li>\n</ul>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global alias.lg <span class=\"token string\">\"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an>%Creset' --abbrev-commit\"</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><p>配置Git的时候，加上<code>--global</code>是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。<br>配置文件放哪了?每个仓库的Git配置文件都放在<code>.git/config</code>文件中<br>而当前用户的Git配置文件放在用户主目录下的一个隐藏文件<code>.gitconfig</code>中<br>别名就在<code>[alias]</code>后面，要删除别名，直接把对应的行删掉即可。<br>配置别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置。</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>alias<span class=\"token punctuation\">]</span>\n  st <span class=\"token operator\">=</span> status\n  co <span class=\"token operator\">=</span> checkout\n  ci <span class=\"token operator\">=</span> commit\n  br <span class=\"token operator\">=</span> branch\n  unstage <span class=\"token operator\">=</span> reset HEAD\n  last <span class=\"token operator\">=</span> log -1\n  lg <span class=\"token operator\">=</span> log --color --graph --pretty<span class=\"token operator\">=</span>format:<span class=\"token string\">'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an>%Creset'</span> --abbrev-commit\n  up <span class=\"token operator\">=</span> upstream\n  og <span class=\"token operator\">=</span> origin\n  ms <span class=\"token operator\">=</span> master\n  mg <span class=\"token operator\">=</span> merge\n  plp <span class=\"token operator\">=</span> pull upstream\n  mgums <span class=\"token operator\">=</span> merge upstream/master master\n  rap <span class=\"token operator\">=</span> remote add upstream\n  rag <span class=\"token operator\">=</span> remote add origin\n  psg <span class=\"token operator\">=</span> push -u origin\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"<p>Git更新与推送流程</p>","more":"<!-- markdownlint-disable MD041 MD002-->\n<h2 id=\"Git更新与推送流程\"><a href=\"#Git更新与推送流程\" class=\"headerlink\" title=\"Git更新与推送流程\"></a>Git更新与推送流程</h2><ul>\n<li>设置主仓库地址</li>\n</ul>\n<pre><code class=\"bash\">git remote add upstream https://repo-address\n</code></pre>\n<ul>\n<li>获取主仓库最新提交</li>\n</ul>\n<pre><code class=\"bash\">git pull upstream\n</code></pre>\n<ul>\n<li>将主仓库的 <code>master</code> 分支合并到本地的 <code>master</code> 分支</li>\n</ul>\n<pre><code class=\"bash\">git merge upstream/master master\n</code></pre>\n<ul>\n<li>解决冲突并提交合并</li>\n</ul>\n<pre><code class=\"bash\">git commit -a -m &#39;merge upstream master&#39;\n</code></pre>\n<ul>\n<li>推送至远程仓库</li>\n</ul>\n<pre><code class=\"bash\">git push\n</code></pre>\n<ul>\n<li>提交Pull Request</li>\n</ul>\n<h2 id=\"自定义Git\"><a href=\"#自定义Git\" class=\"headerlink\" title=\"自定义Git\"></a>自定义Git</h2><h3 id=\"让Git显示颜色\"><a href=\"#让Git显示颜色\" class=\"headerlink\" title=\"让Git显示颜色\"></a>让Git显示颜色</h3><pre><code class=\"bash\">git config --global color.ui true\n</code></pre>\n<h3 id=\"配置别名\"><a href=\"#配置别名\" class=\"headerlink\" title=\"配置别名\"></a>配置别名</h3><ul>\n<li><code>git st</code>表示<code>git status</code></li>\n<li><code>git co</code>表示<code>git checkout</code></li>\n<li><code>git ci</code>表示<code>git commit</code></li>\n<li><code>git br</code>表示<code>git branch</code></li>\n</ul>\n<pre><code class=\"bash\">git config --global alias.st status\ngit config --global alias.co checkout\ngit config --global alias.ci commit\ngit config --global alias.br branch\n</code></pre>\n<ul>\n<li>命令<code>git reset HEAD file</code>可以把暂存区的修改撤销掉（unstage），重新放回工作区。既然是一个unstage操作，就可以配置一个unstage别名：</li>\n</ul>\n<pre><code class=\"bash\">git config --global alias.unstage &#39;reset HEAD&#39;\n</code></pre>\n<ul>\n<li>配置一个<code>git last</code>，让其显示最后一次提交信息：</li>\n</ul>\n<pre><code class=\"bash\">git config --global alias.last &#39;log -1&#39;\n</code></pre>\n<ul>\n<li>还有人丧心病狂地把<code>lg</code>配置成了：</li>\n</ul>\n<pre><code class=\"bash\">git config --global alias.lg &quot;log --color --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit&quot;\n</code></pre>\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><p>配置Git的时候，加上<code>--global</code>是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。<br>配置文件放哪了?每个仓库的Git配置文件都放在<code>.git/config</code>文件中<br>而当前用户的Git配置文件放在用户主目录下的一个隐藏文件<code>.gitconfig</code>中<br>别名就在<code>[alias]</code>后面，要删除别名，直接把对应的行删掉即可。<br>配置别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置。</p>\n<pre><code class=\"bash\">[alias]\n  st = status\n  co = checkout\n  ci = commit\n  br = branch\n  unstage = reset HEAD\n  last = log -1\n  lg = log --color --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit\n  up = upstream\n  og = origin\n  ms = master\n  mg = merge\n  plp = pull upstream\n  mgums = merge upstream/master master\n  rap = remote add upstream\n  rag = remote add origin\n  psg = push -u origin\n</code></pre>"},{"title":"Vue中使用 Webpack总结","description":"Vue中使用 Webpack总结","date":"2018-08-07T07:42:09.000Z","_content":"\nWebpack 打包工具(模块打包器)\n\n<!-- more -->\n<!-- markdownlint-disable MD041 MD002-->\n\n## Webpack结构\n\nVue中 关于Webpack的配置文件有四个: (vue-cli版本@2.9.6)\n\n- build文件夹\n  - webpack.base.conf.js 主要配置文件\n  - webpack.dev.conf.js 开发环境配置文件\n  - webpack.prod.conf.js 生产环境配置文件\n  - webpack.test.conf.js 需要单元测试时的配置文件(不选择单元测试则没有该文件)\n\n## webpack.base.conf.js\n\n```js\n'use strict'\nconst path = require('path')\nconst utils = require('./utils')\nconst config = require('../config')\nconst vueLoaderConfig = require('./vue-loader.conf')\n\nfunction resolve (dir) {\n  return path.join(__dirname, '..', dir)\n}\n\nconst createLintingRule = () => ({\n  test: /\\.(js|vue)$/,\n  loader: 'eslint-loader',\n  enforce: 'pre',\n  include: [resolve('src'), resolve('test')],\n  options: {\n    formatter: require('eslint-friendly-formatter'),\n    emitWarning: !config.dev.showEslintErrorsInOverlay\n  }\n})\n\nmodule.exports = {\n  // 基础目录，绝对路径，用于从配置中解析入口起点(entry point)和 loader\n  context: path.resolve(__dirname, '../'),\n  // 入口配置: 可以配置多入口\n  entry: {\n    app: './src/main.js'\n  },\n  // 出口配置\n  output: {\n    // 出口路径: path必须是绝对路径\n    path: config.build.assetsRoot,\n    // 出口文件名\n    filename: '[name].js', // [name]即入口名称\n    // 对于按需加载(on-demand-load)或加载外部资源(external resources)（如图片、文件等）来说，output.publicPath 是很重要的选项。\n    // 该选项的值是以 runtime(运行时) 或 loader(载入时) 所创建的每个 URL 为前缀。因此，在多数情况下，此选项的值都会以/结束。\n    // 可能以下情况中的一种:\n    publicPath: 'https://cdn.example.com/assets/', // CDN（总是 HTTPS 协议）\n    publicPath: '//cdn.example.com/assets/', // CDN（协议相同）\n    publicPath: '/assets/', // 相对于服务(server-relative)\n    publicPath: 'assets/', // 相对于 HTML 页面\n    publicPath: '../assets/', // 相对于 HTML 页面\n    publicPath: '', // 相对于 HTML 页面（目录相同）\n    // Vue中: 判断环境变量的值,去对应的环境变量中寻找设置 config 文件夹中的 index.js\n    publicPath: process.env.NODE_ENV === 'production'\n      ? config.build.assetsPublicPath // 默认为\"/\"，一般会修改为\"./\"\n      : config.dev.assetsPublicPath // 默认为\"/\"\n  },\n  // 配置模块如何解析\n  resolve: {\n    // 自动解析确定的扩展: 能够使用户在引入模块时不带扩展\n    extensions: ['.js', '.vue', '.json'],\n    // 创建 import 或 require 的别名，来确保模块引入变得更简单。\n    alias: {\n      'vue$': 'vue/dist/vue.esm.js', // 在给定对象的键后的末尾添加 $,以表示精准匹配: 必须以 XXX 结尾\n      '@': resolve('src'), // js文件!!!中 @ 即表示为 src 文件夹, html 和 css 路径中不是\n    }\n  },\n  // 决定如何处理项目中的不同类型的模块\n  module: {\n    // 创建模块时，匹配请求的规则数组。这些规则能够修改模块的创建方式。这些规则能够对模块(module)应用 loader，或者修改解析器(parser)\n    rules: [\n      ...(config.dev.useEslint ? [createLintingRule()] : []),\n      {\n        test: /\\.vue$/,\n        loader: 'vue-loader',\n        options: vueLoaderConfig\n      },\n      {\n        test: /\\.js$/,\n        loader: 'babel-loader',\n        include: [resolve('src'), resolve('test'), resolve('node_modules/webpack-dev-server/client')]\n      },\n      {\n        test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000,\n          name: utils.assetsPath('img/[name].[hash:7].[ext]')\n        }\n      },\n      {\n        test: /\\.(mp4|webm|ogg|mp3|wav|flac|aac)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000,\n          name: utils.assetsPath('media/[name].[hash:7].[ext]')\n        }\n      },\n      {\n        test: /\\.(woff2?|eot|ttf|otf)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000,\n          name: utils.assetsPath('fonts/[name].[hash:7].[ext]')\n        }\n      }\n    ]\n  },\n  node: {\n    // prevent webpack from injecting useless setImmediate polyfill because Vue\n    // source contains it (although only uses it if it's native).\n    setImmediate: false,\n    // prevent webpack from injecting mocks to Node native modules\n    // that does not make sense for the client\n    dgram: 'empty',\n    fs: 'empty',\n    net: 'empty',\n    tls: 'empty',\n    child_process: 'empty'\n  }\n}\n```\n\n在最新的 vue-cli 3.0 中, webpack 中的设置都隐藏到了 vue 内部, 通过设置 `vue.config.js` 来覆盖相关 webpack 设置","source":"_posts/Vue中使用Webpack总结.md","raw":"---\ntitle: 'Vue中使用 Webpack总结'\ntags:\n  - Vue\n  - Webpack\ncategories: Vue\ndescription: Vue中使用 Webpack总结\ndate: 2018-08-07 15:42:09\n---\n\nWebpack 打包工具(模块打包器)\n\n<!-- more -->\n<!-- markdownlint-disable MD041 MD002-->\n\n## Webpack结构\n\nVue中 关于Webpack的配置文件有四个: (vue-cli版本@2.9.6)\n\n- build文件夹\n  - webpack.base.conf.js 主要配置文件\n  - webpack.dev.conf.js 开发环境配置文件\n  - webpack.prod.conf.js 生产环境配置文件\n  - webpack.test.conf.js 需要单元测试时的配置文件(不选择单元测试则没有该文件)\n\n## webpack.base.conf.js\n\n```js\n'use strict'\nconst path = require('path')\nconst utils = require('./utils')\nconst config = require('../config')\nconst vueLoaderConfig = require('./vue-loader.conf')\n\nfunction resolve (dir) {\n  return path.join(__dirname, '..', dir)\n}\n\nconst createLintingRule = () => ({\n  test: /\\.(js|vue)$/,\n  loader: 'eslint-loader',\n  enforce: 'pre',\n  include: [resolve('src'), resolve('test')],\n  options: {\n    formatter: require('eslint-friendly-formatter'),\n    emitWarning: !config.dev.showEslintErrorsInOverlay\n  }\n})\n\nmodule.exports = {\n  // 基础目录，绝对路径，用于从配置中解析入口起点(entry point)和 loader\n  context: path.resolve(__dirname, '../'),\n  // 入口配置: 可以配置多入口\n  entry: {\n    app: './src/main.js'\n  },\n  // 出口配置\n  output: {\n    // 出口路径: path必须是绝对路径\n    path: config.build.assetsRoot,\n    // 出口文件名\n    filename: '[name].js', // [name]即入口名称\n    // 对于按需加载(on-demand-load)或加载外部资源(external resources)（如图片、文件等）来说，output.publicPath 是很重要的选项。\n    // 该选项的值是以 runtime(运行时) 或 loader(载入时) 所创建的每个 URL 为前缀。因此，在多数情况下，此选项的值都会以/结束。\n    // 可能以下情况中的一种:\n    publicPath: 'https://cdn.example.com/assets/', // CDN（总是 HTTPS 协议）\n    publicPath: '//cdn.example.com/assets/', // CDN（协议相同）\n    publicPath: '/assets/', // 相对于服务(server-relative)\n    publicPath: 'assets/', // 相对于 HTML 页面\n    publicPath: '../assets/', // 相对于 HTML 页面\n    publicPath: '', // 相对于 HTML 页面（目录相同）\n    // Vue中: 判断环境变量的值,去对应的环境变量中寻找设置 config 文件夹中的 index.js\n    publicPath: process.env.NODE_ENV === 'production'\n      ? config.build.assetsPublicPath // 默认为\"/\"，一般会修改为\"./\"\n      : config.dev.assetsPublicPath // 默认为\"/\"\n  },\n  // 配置模块如何解析\n  resolve: {\n    // 自动解析确定的扩展: 能够使用户在引入模块时不带扩展\n    extensions: ['.js', '.vue', '.json'],\n    // 创建 import 或 require 的别名，来确保模块引入变得更简单。\n    alias: {\n      'vue$': 'vue/dist/vue.esm.js', // 在给定对象的键后的末尾添加 $,以表示精准匹配: 必须以 XXX 结尾\n      '@': resolve('src'), // js文件!!!中 @ 即表示为 src 文件夹, html 和 css 路径中不是\n    }\n  },\n  // 决定如何处理项目中的不同类型的模块\n  module: {\n    // 创建模块时，匹配请求的规则数组。这些规则能够修改模块的创建方式。这些规则能够对模块(module)应用 loader，或者修改解析器(parser)\n    rules: [\n      ...(config.dev.useEslint ? [createLintingRule()] : []),\n      {\n        test: /\\.vue$/,\n        loader: 'vue-loader',\n        options: vueLoaderConfig\n      },\n      {\n        test: /\\.js$/,\n        loader: 'babel-loader',\n        include: [resolve('src'), resolve('test'), resolve('node_modules/webpack-dev-server/client')]\n      },\n      {\n        test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000,\n          name: utils.assetsPath('img/[name].[hash:7].[ext]')\n        }\n      },\n      {\n        test: /\\.(mp4|webm|ogg|mp3|wav|flac|aac)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000,\n          name: utils.assetsPath('media/[name].[hash:7].[ext]')\n        }\n      },\n      {\n        test: /\\.(woff2?|eot|ttf|otf)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000,\n          name: utils.assetsPath('fonts/[name].[hash:7].[ext]')\n        }\n      }\n    ]\n  },\n  node: {\n    // prevent webpack from injecting useless setImmediate polyfill because Vue\n    // source contains it (although only uses it if it's native).\n    setImmediate: false,\n    // prevent webpack from injecting mocks to Node native modules\n    // that does not make sense for the client\n    dgram: 'empty',\n    fs: 'empty',\n    net: 'empty',\n    tls: 'empty',\n    child_process: 'empty'\n  }\n}\n```\n\n在最新的 vue-cli 3.0 中, webpack 中的设置都隐藏到了 vue 内部, 通过设置 `vue.config.js` 来覆盖相关 webpack 设置","slug":"Vue中使用Webpack总结","published":1,"updated":"2019-02-25T02:26:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1mb5bub0008u4keqm16r3p6","content":"<p>Webpack 打包工具(模块打包器)</p>\n<a id=\"more\"></a>\n<!-- markdownlint-disable MD041 MD002-->\n<h2 id=\"Webpack结构\"><a href=\"#Webpack结构\" class=\"headerlink\" title=\"Webpack结构\"></a>Webpack结构</h2><p>Vue中 关于Webpack的配置文件有四个: (vue-cli版本@2.9.6)</p>\n<ul>\n<li>build文件夹<ul>\n<li>webpack.base.conf.js 主要配置文件</li>\n<li>webpack.dev.conf.js 开发环境配置文件</li>\n<li>webpack.prod.conf.js 生产环境配置文件</li>\n<li>webpack.test.conf.js 需要单元测试时的配置文件(不选择单元测试则没有该文件)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"webpack-base-conf-js\"><a href=\"#webpack-base-conf-js\" class=\"headerlink\" title=\"webpack.base.conf.js\"></a>webpack.base.conf.js</h2><pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token string\">'use strict'</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> utils <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./utils'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../config'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> vueLoaderConfig <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./vue-loader.conf'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> resolve <span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'..'</span><span class=\"token punctuation\">,</span> dir<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> createLintingRule <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.(js|vue)$/</span><span class=\"token punctuation\">,</span>\n  loader<span class=\"token punctuation\">:</span> <span class=\"token string\">'eslint-loader'</span><span class=\"token punctuation\">,</span>\n  enforce<span class=\"token punctuation\">:</span> <span class=\"token string\">'pre'</span><span class=\"token punctuation\">,</span>\n  include<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    formatter<span class=\"token punctuation\">:</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'eslint-friendly-formatter'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    emitWarning<span class=\"token punctuation\">:</span> <span class=\"token operator\">!</span>config<span class=\"token punctuation\">.</span>dev<span class=\"token punctuation\">.</span>showEslintErrorsInOverlay\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 基础目录，绝对路径，用于从配置中解析入口起点(entry point)和 loader</span>\n  context<span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 入口配置: 可以配置多入口</span>\n  entry<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    app<span class=\"token punctuation\">:</span> <span class=\"token string\">'./src/main.js'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 出口配置</span>\n  output<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 出口路径: path必须是绝对路径</span>\n    path<span class=\"token punctuation\">:</span> config<span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">.</span>assetsRoot<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 出口文件名</span>\n    filename<span class=\"token punctuation\">:</span> <span class=\"token string\">'[name].js'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// [name]即入口名称</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 对于按需加载(on-demand-load)或加载外部资源(external resources)（如图片、文件等）来说，output.publicPath 是很重要的选项。</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 该选项的值是以 runtime(运行时) 或 loader(载入时) 所创建的每个 URL 为前缀。因此，在多数情况下，此选项的值都会以/结束。</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 可能以下情况中的一种:</span>\n    publicPath<span class=\"token punctuation\">:</span> <span class=\"token string\">'https://cdn.example.com/assets/'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// CDN（总是 HTTPS 协议）</span>\n    publicPath<span class=\"token punctuation\">:</span> <span class=\"token string\">'//cdn.example.com/assets/'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">/</span><span class=\"token operator\">/</span> CDN（协议相同）\n    publicPath<span class=\"token punctuation\">:</span> <span class=\"token string\">'/assets/'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 相对于服务(server-relative)</span>\n    publicPath<span class=\"token punctuation\">:</span> <span class=\"token string\">'assets/'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 相对于 HTML 页面</span>\n    publicPath<span class=\"token punctuation\">:</span> <span class=\"token string\">'../assets/'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 相对于 HTML 页面</span>\n    publicPath<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 相对于 HTML 页面（目录相同）</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Vue中: 判断环境变量的值,去对应的环境变量中寻找设置 config 文件夹中的 index.js</span>\n    publicPath<span class=\"token punctuation\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span>NODE_ENV <span class=\"token operator\">===</span> <span class=\"token string\">'production'</span>\n      <span class=\"token operator\">?</span> config<span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">.</span>assetsPublicPath <span class=\"token comment\" spellcheck=\"true\">// 默认为\"/\"，一般会修改为\"./\"</span>\n      <span class=\"token punctuation\">:</span> config<span class=\"token punctuation\">.</span>dev<span class=\"token punctuation\">.</span>assetsPublicPath <span class=\"token comment\" spellcheck=\"true\">// 默认为\"/\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 配置模块如何解析</span>\n  resolve<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 自动解析确定的扩展: 能够使用户在引入模块时不带扩展</span>\n    extensions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'.js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.vue'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.json'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 创建 import 或 require 的别名，来确保模块引入变得更简单。</span>\n    alias<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'vue$'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'vue/dist/vue.esm.js'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 在给定对象的键后的末尾添加 $,以表示精准匹配: 必须以 XXX 结尾</span>\n      <span class=\"token string\">'@'</span><span class=\"token punctuation\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// js文件!!!中 @ 即表示为 src 文件夹, html 和 css 路径中不是</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 决定如何处理项目中的不同类型的模块</span>\n  module<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 创建模块时，匹配请求的规则数组。这些规则能够修改模块的创建方式。这些规则能够对模块(module)应用 loader，或者修改解析器(parser)</span>\n    rules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token operator\">...</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>dev<span class=\"token punctuation\">.</span>useEslint <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token function\">createLintingRule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.vue$/</span><span class=\"token punctuation\">,</span>\n        loader<span class=\"token punctuation\">:</span> <span class=\"token string\">'vue-loader'</span><span class=\"token punctuation\">,</span>\n        options<span class=\"token punctuation\">:</span> vueLoaderConfig\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.js$/</span><span class=\"token punctuation\">,</span>\n        loader<span class=\"token punctuation\">:</span> <span class=\"token string\">'babel-loader'</span><span class=\"token punctuation\">,</span>\n        include<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'node_modules/webpack-dev-server/client'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.(png|jpe?g|gif|svg)(\\?.*)?$/</span><span class=\"token punctuation\">,</span>\n        loader<span class=\"token punctuation\">:</span> <span class=\"token string\">'url-loader'</span><span class=\"token punctuation\">,</span>\n        options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          limit<span class=\"token punctuation\">:</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">,</span>\n          name<span class=\"token punctuation\">:</span> utils<span class=\"token punctuation\">.</span><span class=\"token function\">assetsPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img/[name].[hash:7].[ext]'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.(mp4|webm|ogg|mp3|wav|flac|aac)(\\?.*)?$/</span><span class=\"token punctuation\">,</span>\n        loader<span class=\"token punctuation\">:</span> <span class=\"token string\">'url-loader'</span><span class=\"token punctuation\">,</span>\n        options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          limit<span class=\"token punctuation\">:</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">,</span>\n          name<span class=\"token punctuation\">:</span> utils<span class=\"token punctuation\">.</span><span class=\"token function\">assetsPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">'media/[name].[hash:7].[ext]'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.(woff2?|eot|ttf|otf)(\\?.*)?$/</span><span class=\"token punctuation\">,</span>\n        loader<span class=\"token punctuation\">:</span> <span class=\"token string\">'url-loader'</span><span class=\"token punctuation\">,</span>\n        options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          limit<span class=\"token punctuation\">:</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">,</span>\n          name<span class=\"token punctuation\">:</span> utils<span class=\"token punctuation\">.</span><span class=\"token function\">assetsPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fonts/[name].[hash:7].[ext]'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  node<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// prevent webpack from injecting useless setImmediate polyfill because Vue</span>\n    <span class=\"token comment\" spellcheck=\"true\">// source contains it (although only uses it if it's native).</span>\n    setImmediate<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\" spellcheck=\"true\">// prevent webpack from injecting mocks to Node native modules</span>\n    <span class=\"token comment\" spellcheck=\"true\">// that does not make sense for the client</span>\n    dgram<span class=\"token punctuation\">:</span> <span class=\"token string\">'empty'</span><span class=\"token punctuation\">,</span>\n    fs<span class=\"token punctuation\">:</span> <span class=\"token string\">'empty'</span><span class=\"token punctuation\">,</span>\n    net<span class=\"token punctuation\">:</span> <span class=\"token string\">'empty'</span><span class=\"token punctuation\">,</span>\n    tls<span class=\"token punctuation\">:</span> <span class=\"token string\">'empty'</span><span class=\"token punctuation\">,</span>\n    child_process<span class=\"token punctuation\">:</span> <span class=\"token string\">'empty'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在最新的 vue-cli 3.0 中, webpack 中的设置都隐藏到了 vue 内部, 通过设置 <code>vue.config.js</code> 来覆盖相关 webpack 设置</p>\n","site":{"data":{}},"excerpt":"<p>Webpack 打包工具(模块打包器)</p>","more":"<!-- markdownlint-disable MD041 MD002-->\n<h2 id=\"Webpack结构\"><a href=\"#Webpack结构\" class=\"headerlink\" title=\"Webpack结构\"></a>Webpack结构</h2><p>Vue中 关于Webpack的配置文件有四个: (vue-cli版本@2.9.6)</p>\n<ul>\n<li>build文件夹<ul>\n<li>webpack.base.conf.js 主要配置文件</li>\n<li>webpack.dev.conf.js 开发环境配置文件</li>\n<li>webpack.prod.conf.js 生产环境配置文件</li>\n<li>webpack.test.conf.js 需要单元测试时的配置文件(不选择单元测试则没有该文件)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"webpack-base-conf-js\"><a href=\"#webpack-base-conf-js\" class=\"headerlink\" title=\"webpack.base.conf.js\"></a>webpack.base.conf.js</h2><pre><code class=\"js\">&#39;use strict&#39;\nconst path = require(&#39;path&#39;)\nconst utils = require(&#39;./utils&#39;)\nconst config = require(&#39;../config&#39;)\nconst vueLoaderConfig = require(&#39;./vue-loader.conf&#39;)\n\nfunction resolve (dir) {\n  return path.join(__dirname, &#39;..&#39;, dir)\n}\n\nconst createLintingRule = () =&gt; ({\n  test: /\\.(js|vue)$/,\n  loader: &#39;eslint-loader&#39;,\n  enforce: &#39;pre&#39;,\n  include: [resolve(&#39;src&#39;), resolve(&#39;test&#39;)],\n  options: {\n    formatter: require(&#39;eslint-friendly-formatter&#39;),\n    emitWarning: !config.dev.showEslintErrorsInOverlay\n  }\n})\n\nmodule.exports = {\n  // 基础目录，绝对路径，用于从配置中解析入口起点(entry point)和 loader\n  context: path.resolve(__dirname, &#39;../&#39;),\n  // 入口配置: 可以配置多入口\n  entry: {\n    app: &#39;./src/main.js&#39;\n  },\n  // 出口配置\n  output: {\n    // 出口路径: path必须是绝对路径\n    path: config.build.assetsRoot,\n    // 出口文件名\n    filename: &#39;[name].js&#39;, // [name]即入口名称\n    // 对于按需加载(on-demand-load)或加载外部资源(external resources)（如图片、文件等）来说，output.publicPath 是很重要的选项。\n    // 该选项的值是以 runtime(运行时) 或 loader(载入时) 所创建的每个 URL 为前缀。因此，在多数情况下，此选项的值都会以/结束。\n    // 可能以下情况中的一种:\n    publicPath: &#39;https://cdn.example.com/assets/&#39;, // CDN（总是 HTTPS 协议）\n    publicPath: &#39;//cdn.example.com/assets/&#39;, // CDN（协议相同）\n    publicPath: &#39;/assets/&#39;, // 相对于服务(server-relative)\n    publicPath: &#39;assets/&#39;, // 相对于 HTML 页面\n    publicPath: &#39;../assets/&#39;, // 相对于 HTML 页面\n    publicPath: &#39;&#39;, // 相对于 HTML 页面（目录相同）\n    // Vue中: 判断环境变量的值,去对应的环境变量中寻找设置 config 文件夹中的 index.js\n    publicPath: process.env.NODE_ENV === &#39;production&#39;\n      ? config.build.assetsPublicPath // 默认为&quot;/&quot;，一般会修改为&quot;./&quot;\n      : config.dev.assetsPublicPath // 默认为&quot;/&quot;\n  },\n  // 配置模块如何解析\n  resolve: {\n    // 自动解析确定的扩展: 能够使用户在引入模块时不带扩展\n    extensions: [&#39;.js&#39;, &#39;.vue&#39;, &#39;.json&#39;],\n    // 创建 import 或 require 的别名，来确保模块引入变得更简单。\n    alias: {\n      &#39;vue$&#39;: &#39;vue/dist/vue.esm.js&#39;, // 在给定对象的键后的末尾添加 $,以表示精准匹配: 必须以 XXX 结尾\n      &#39;@&#39;: resolve(&#39;src&#39;), // js文件!!!中 @ 即表示为 src 文件夹, html 和 css 路径中不是\n    }\n  },\n  // 决定如何处理项目中的不同类型的模块\n  module: {\n    // 创建模块时，匹配请求的规则数组。这些规则能够修改模块的创建方式。这些规则能够对模块(module)应用 loader，或者修改解析器(parser)\n    rules: [\n      ...(config.dev.useEslint ? [createLintingRule()] : []),\n      {\n        test: /\\.vue$/,\n        loader: &#39;vue-loader&#39;,\n        options: vueLoaderConfig\n      },\n      {\n        test: /\\.js$/,\n        loader: &#39;babel-loader&#39;,\n        include: [resolve(&#39;src&#39;), resolve(&#39;test&#39;), resolve(&#39;node_modules/webpack-dev-server/client&#39;)]\n      },\n      {\n        test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n        loader: &#39;url-loader&#39;,\n        options: {\n          limit: 10000,\n          name: utils.assetsPath(&#39;img/[name].[hash:7].[ext]&#39;)\n        }\n      },\n      {\n        test: /\\.(mp4|webm|ogg|mp3|wav|flac|aac)(\\?.*)?$/,\n        loader: &#39;url-loader&#39;,\n        options: {\n          limit: 10000,\n          name: utils.assetsPath(&#39;media/[name].[hash:7].[ext]&#39;)\n        }\n      },\n      {\n        test: /\\.(woff2?|eot|ttf|otf)(\\?.*)?$/,\n        loader: &#39;url-loader&#39;,\n        options: {\n          limit: 10000,\n          name: utils.assetsPath(&#39;fonts/[name].[hash:7].[ext]&#39;)\n        }\n      }\n    ]\n  },\n  node: {\n    // prevent webpack from injecting useless setImmediate polyfill because Vue\n    // source contains it (although only uses it if it&#39;s native).\n    setImmediate: false,\n    // prevent webpack from injecting mocks to Node native modules\n    // that does not make sense for the client\n    dgram: &#39;empty&#39;,\n    fs: &#39;empty&#39;,\n    net: &#39;empty&#39;,\n    tls: &#39;empty&#39;,\n    child_process: &#39;empty&#39;\n  }\n}\n</code></pre>\n<p>在最新的 vue-cli 3.0 中, webpack 中的设置都隐藏到了 vue 内部, 通过设置 <code>vue.config.js</code> 来覆盖相关 webpack 设置</p>"},{"title":"path.join 和 path.resolve区别","description":"path.join 和 path.resolve区别","date":"2018-08-06T02:11:44.000Z","_content":"\npath.join & path.resolve\n\n<!-- more -->\n<!-- markdownlint-disable MD041 MD002-->\n\n## path.join([path1][, path2][, ...])\n\n`path.join()`: 连接任意多个路径字符串。\n\n注：如果连接后的路径字符串是一个长度为零的字符串, 则返回 `'.'`, 表示当前工作目录。\n\n```js\npath.join('foo', 'bar', 'baz')\n// 返回\n'/foo/bar/baz'\n\n// 不合法的字符串将抛出异常\npath.join('foo', {}, 'bar')\n// 抛出的异常\nTypeError: Arguments to path.join must be strings'\n```\n\n## path.resolve([from...], to)\n\n`path.resolve()`: 将多个路径解析为一个规范化的绝对路径。\n\n其处理方式类似于对这些路径逐一进行 `cd` 操作, 与 `cd` 操作不同的是, 这引起路径可以是文件, 并且可不必实际存在（`resolve()`方法不会利用底层的文件系统判断路径是否存在, 而只是进行路径字符串操作。）\n\n`path.resolve('foo/bar', '/tmp/file/', '..', 'a/../subFile')` 相当于:\n\n```bash\ncd foo/bar\ncd /tmp/file/\ncd ..\ncd a/../subFile\npwd\n# Linux pwd命令用于显示工作目录。执行 pwd 指令可立刻得知您目前所在的工作目录的绝对路径名称。\n```\n\n```js\npath.resolve('/foo/bar', './baz')\n// 输出结果为\n'/foo/bar/baz'\npath.resolve('/foo/bar', '/tmp/file/')\n// 输出结果为\n'/tmp/file'\n\npath.resolve('wwwroot', 'static_files/png/', '../gif/image.gif')\n// 当前的工作路径是 /home/myself/node, 则输出结果为\n'/home/myself/node/wwwroot/static_files/gif/image.gif'\n```\n\n## 两者的区别\n\n- `join` 是把各个 path 片段连接在一起， `resolve` 把`'/'` 当成根目录\n\n```js\npath.join('/a', '/b') // '/a/b'\npath.resolve('/a', '/b') // '/b'\n```\n\n- `join` 直接拼接字段，`resolve` 解析路径并返回绝对路径\n\n```js\npath.join('a', 'b1', '..', 'b2')\n// 'a/b2'\n\npath.resolve('a', 'b1', '..', 'b2')\n// '/home/myself/node/a/b2'\n```","source":"_posts/path.join和path.resolve区别.md","raw":"---\ntitle: path.join 和 path.resolve区别\ntags: JavaScript\ncategories: JavaScript\ndescription: path.join 和 path.resolve区别 \ndate: 2018-08-06 10:11:44\n---\n\npath.join & path.resolve\n\n<!-- more -->\n<!-- markdownlint-disable MD041 MD002-->\n\n## path.join([path1][, path2][, ...])\n\n`path.join()`: 连接任意多个路径字符串。\n\n注：如果连接后的路径字符串是一个长度为零的字符串, 则返回 `'.'`, 表示当前工作目录。\n\n```js\npath.join('foo', 'bar', 'baz')\n// 返回\n'/foo/bar/baz'\n\n// 不合法的字符串将抛出异常\npath.join('foo', {}, 'bar')\n// 抛出的异常\nTypeError: Arguments to path.join must be strings'\n```\n\n## path.resolve([from...], to)\n\n`path.resolve()`: 将多个路径解析为一个规范化的绝对路径。\n\n其处理方式类似于对这些路径逐一进行 `cd` 操作, 与 `cd` 操作不同的是, 这引起路径可以是文件, 并且可不必实际存在（`resolve()`方法不会利用底层的文件系统判断路径是否存在, 而只是进行路径字符串操作。）\n\n`path.resolve('foo/bar', '/tmp/file/', '..', 'a/../subFile')` 相当于:\n\n```bash\ncd foo/bar\ncd /tmp/file/\ncd ..\ncd a/../subFile\npwd\n# Linux pwd命令用于显示工作目录。执行 pwd 指令可立刻得知您目前所在的工作目录的绝对路径名称。\n```\n\n```js\npath.resolve('/foo/bar', './baz')\n// 输出结果为\n'/foo/bar/baz'\npath.resolve('/foo/bar', '/tmp/file/')\n// 输出结果为\n'/tmp/file'\n\npath.resolve('wwwroot', 'static_files/png/', '../gif/image.gif')\n// 当前的工作路径是 /home/myself/node, 则输出结果为\n'/home/myself/node/wwwroot/static_files/gif/image.gif'\n```\n\n## 两者的区别\n\n- `join` 是把各个 path 片段连接在一起， `resolve` 把`'/'` 当成根目录\n\n```js\npath.join('/a', '/b') // '/a/b'\npath.resolve('/a', '/b') // '/b'\n```\n\n- `join` 直接拼接字段，`resolve` 解析路径并返回绝对路径\n\n```js\npath.join('a', 'b1', '..', 'b2')\n// 'a/b2'\n\npath.resolve('a', 'b1', '..', 'b2')\n// '/home/myself/node/a/b2'\n```","slug":"path.join和path.resolve区别","published":1,"updated":"2019-10-09T12:07:29.197Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1mb5bud000cu4kek7t1y0q0","content":"<p>path.join &amp; path.resolve</p>\n<a id=\"more\"></a>\n<!-- markdownlint-disable MD041 MD002-->\n<h2 id=\"path-join-path1-path2-…\"><a href=\"#path-join-path1-path2-…\" class=\"headerlink\" title=\"path.join([path1][, path2][, …])\"></a>path.join([path1][, path2][, …])</h2><p><code>path.join()</code>: 连接任意多个路径字符串。</p>\n<p>注：如果连接后的路径字符串是一个长度为零的字符串, 则返回 <code>&#39;.&#39;</code>, 表示当前工作目录。</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\">path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'baz'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">// 返回</span>\n<span class=\"token string\">'/foo/bar/baz'</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 不合法的字符串将抛出异常</span>\npath<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">// 抛出的异常</span>\nTypeError<span class=\"token punctuation\">:</span> Arguments to path<span class=\"token punctuation\">.</span>join must be strings'\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"path-resolve-from…-to\"><a href=\"#path-resolve-from…-to\" class=\"headerlink\" title=\"path.resolve([from…], to)\"></a>path.resolve([from…], to)</h2><p><code>path.resolve()</code>: 将多个路径解析为一个规范化的绝对路径。</p>\n<p>其处理方式类似于对这些路径逐一进行 <code>cd</code> 操作, 与 <code>cd</code> 操作不同的是, 这引起路径可以是文件, 并且可不必实际存在（<code>resolve()</code>方法不会利用底层的文件系统判断路径是否存在, 而只是进行路径字符串操作。）</p>\n<p><code>path.resolve(&#39;foo/bar&#39;, &#39;/tmp/file/&#39;, &#39;..&#39;, &#39;a/../subFile&#39;)</code> 相当于:</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">cd</span> foo/bar\n<span class=\"token function\">cd</span> /tmp/file/\n<span class=\"token function\">cd</span> <span class=\"token punctuation\">..</span>\n<span class=\"token function\">cd</span> a/<span class=\"token punctuation\">..</span>/subFile\n<span class=\"token function\">pwd</span>\n<span class=\"token comment\" spellcheck=\"true\"># Linux pwd命令用于显示工作目录。执行 pwd 指令可立刻得知您目前所在的工作目录的绝对路径名称。</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\">path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/foo/bar'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'./baz'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">// 输出结果为</span>\n<span class=\"token string\">'/foo/bar/baz'</span>\npath<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/foo/bar'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/tmp/file/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">// 输出结果为</span>\n<span class=\"token string\">'/tmp/file'</span>\n\npath<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'wwwroot'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'static_files/png/'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'../gif/image.gif'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">// 当前的工作路径是 /home/myself/node, 则输出结果为</span>\n<span class=\"token string\">'/home/myself/node/wwwroot/static_files/gif/image.gif'</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"两者的区别\"><a href=\"#两者的区别\" class=\"headerlink\" title=\"两者的区别\"></a>两者的区别</h2><ul>\n<li><code>join</code> 是把各个 path 片段连接在一起， <code>resolve</code> 把<code>&#39;/&#39;</code> 当成根目录</li>\n</ul>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\">path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/b'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// '/a/b'</span>\npath<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/b'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// '/b'</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li><code>join</code> 直接拼接字段，<code>resolve</code> 解析路径并返回绝对路径</li>\n</ul>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\">path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'..'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b2'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">// 'a/b2'</span>\n\npath<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'..'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b2'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">// '/home/myself/node/a/b2'</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"<p>path.join &amp; path.resolve</p>","more":"<!-- markdownlint-disable MD041 MD002-->\n<h2 id=\"path-join-path1-path2-…\"><a href=\"#path-join-path1-path2-…\" class=\"headerlink\" title=\"path.join([path1][, path2][, …])\"></a>path.join([path1][, path2][, …])</h2><p><code>path.join()</code>: 连接任意多个路径字符串。</p>\n<p>注：如果连接后的路径字符串是一个长度为零的字符串, 则返回 <code>&#39;.&#39;</code>, 表示当前工作目录。</p>\n<pre><code class=\"js\">path.join(&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;)\n// 返回\n&#39;/foo/bar/baz&#39;\n\n// 不合法的字符串将抛出异常\npath.join(&#39;foo&#39;, {}, &#39;bar&#39;)\n// 抛出的异常\nTypeError: Arguments to path.join must be strings&#39;\n</code></pre>\n<h2 id=\"path-resolve-from…-to\"><a href=\"#path-resolve-from…-to\" class=\"headerlink\" title=\"path.resolve([from…], to)\"></a>path.resolve([from…], to)</h2><p><code>path.resolve()</code>: 将多个路径解析为一个规范化的绝对路径。</p>\n<p>其处理方式类似于对这些路径逐一进行 <code>cd</code> 操作, 与 <code>cd</code> 操作不同的是, 这引起路径可以是文件, 并且可不必实际存在（<code>resolve()</code>方法不会利用底层的文件系统判断路径是否存在, 而只是进行路径字符串操作。）</p>\n<p><code>path.resolve(&#39;foo/bar&#39;, &#39;/tmp/file/&#39;, &#39;..&#39;, &#39;a/../subFile&#39;)</code> 相当于:</p>\n<pre><code class=\"bash\">cd foo/bar\ncd /tmp/file/\ncd ..\ncd a/../subFile\npwd\n# Linux pwd命令用于显示工作目录。执行 pwd 指令可立刻得知您目前所在的工作目录的绝对路径名称。\n</code></pre>\n<pre><code class=\"js\">path.resolve(&#39;/foo/bar&#39;, &#39;./baz&#39;)\n// 输出结果为\n&#39;/foo/bar/baz&#39;\npath.resolve(&#39;/foo/bar&#39;, &#39;/tmp/file/&#39;)\n// 输出结果为\n&#39;/tmp/file&#39;\n\npath.resolve(&#39;wwwroot&#39;, &#39;static_files/png/&#39;, &#39;../gif/image.gif&#39;)\n// 当前的工作路径是 /home/myself/node, 则输出结果为\n&#39;/home/myself/node/wwwroot/static_files/gif/image.gif&#39;\n</code></pre>\n<h2 id=\"两者的区别\"><a href=\"#两者的区别\" class=\"headerlink\" title=\"两者的区别\"></a>两者的区别</h2><ul>\n<li><code>join</code> 是把各个 path 片段连接在一起， <code>resolve</code> 把<code>&#39;/&#39;</code> 当成根目录</li>\n</ul>\n<pre><code class=\"js\">path.join(&#39;/a&#39;, &#39;/b&#39;) // &#39;/a/b&#39;\npath.resolve(&#39;/a&#39;, &#39;/b&#39;) // &#39;/b&#39;\n</code></pre>\n<ul>\n<li><code>join</code> 直接拼接字段，<code>resolve</code> 解析路径并返回绝对路径</li>\n</ul>\n<pre><code class=\"js\">path.join(&#39;a&#39;, &#39;b1&#39;, &#39;..&#39;, &#39;b2&#39;)\n// &#39;a/b2&#39;\n\npath.resolve(&#39;a&#39;, &#39;b1&#39;, &#39;..&#39;, &#39;b2&#39;)\n// &#39;/home/myself/node/a/b2&#39;\n</code></pre>"},{"title":"前端调试方法","description":"一些前端调试方法","date":"2019-09-09T08:23:20.000Z","_content":"\n一些前端调试方法\n\n<!-- more -->\n<!-- markdownlint-disable MD041 MD002-->\n\n## console\n\n### log\n\n`console.log()` 用于在控制台输出信息。参数类型 String 或 Object\n\n### info, warn, error\n\n这三个 API 更多的是给开发人员提供额外的信息，来查看页面的运行情况，更多用于被封装过后的组件或框架中。\n\n```js\n// Info\nconsole.info('Hi, This is message')\n\n// warning 警告\nconsole.warn('On, Your operation may cause a security breach!')\n\n// Error 报错\nconsole.error('Shit! Variable does not exist!')\n```\n\n### table\n\n`console.table()`只接受一个数组或者对象, 可以接受一个额外的参数来描述表格的列数。它会把数据通过表格的形式打印出来, 这样我们看数据的时候就能直观了很多。\n\n```js\nvar array = [\n  { name: 'Jack', age: 12 },\n  { name: 'Tome', age: 18 },\n  { name: 'baka', age: 15 }\n];\n\nconsole.table(array);\n```\n\n### group\n\n`console.group()` 和 `console.groupEnd()` 是成对出现的，就像我们使用的标签一样。\n`console.group()`在控制台创建一个新的分组, 输出到控制台上的内容都会被添加一个缩进, 表示该内容属于当前分组, 直到调用 `console.group()` 之后, 当前分组才结束。\n\n```js\nvar boys = [\n  { name: 'Jack', age: 12 },\n  { name: 'Tom', age: 18 },\n  { name: 'Rose', age: 15 }\n]\n\nboys.forEach(item => {\n  console.group(`${item.name}`)\n  console.log(`This is ${item.name}`);\n  console.log(`${item.name} is ${item.age} years old`);\n  console.log(`${item.name} is ${item.age * 7} years old`);\n  console.groupEnd(`${item.name}`)\n})\n```\n\n> 原文出自：[作者：anran758](https://zhuanlan.zhihu.com/p/80641572) 来源：知乎\n","source":"_posts/前端调试方法.md","raw":"---\ntitle: 前端调试方法\ntags: JavaScript\ncategories: 前端工具\ndescription: 一些前端调试方法\ndate: 2019-09-09 16:23:20\n---\n\n一些前端调试方法\n\n<!-- more -->\n<!-- markdownlint-disable MD041 MD002-->\n\n## console\n\n### log\n\n`console.log()` 用于在控制台输出信息。参数类型 String 或 Object\n\n### info, warn, error\n\n这三个 API 更多的是给开发人员提供额外的信息，来查看页面的运行情况，更多用于被封装过后的组件或框架中。\n\n```js\n// Info\nconsole.info('Hi, This is message')\n\n// warning 警告\nconsole.warn('On, Your operation may cause a security breach!')\n\n// Error 报错\nconsole.error('Shit! Variable does not exist!')\n```\n\n### table\n\n`console.table()`只接受一个数组或者对象, 可以接受一个额外的参数来描述表格的列数。它会把数据通过表格的形式打印出来, 这样我们看数据的时候就能直观了很多。\n\n```js\nvar array = [\n  { name: 'Jack', age: 12 },\n  { name: 'Tome', age: 18 },\n  { name: 'baka', age: 15 }\n];\n\nconsole.table(array);\n```\n\n### group\n\n`console.group()` 和 `console.groupEnd()` 是成对出现的，就像我们使用的标签一样。\n`console.group()`在控制台创建一个新的分组, 输出到控制台上的内容都会被添加一个缩进, 表示该内容属于当前分组, 直到调用 `console.group()` 之后, 当前分组才结束。\n\n```js\nvar boys = [\n  { name: 'Jack', age: 12 },\n  { name: 'Tom', age: 18 },\n  { name: 'Rose', age: 15 }\n]\n\nboys.forEach(item => {\n  console.group(`${item.name}`)\n  console.log(`This is ${item.name}`);\n  console.log(`${item.name} is ${item.age} years old`);\n  console.log(`${item.name} is ${item.age * 7} years old`);\n  console.groupEnd(`${item.name}`)\n})\n```\n\n> 原文出自：[作者：anran758](https://zhuanlan.zhihu.com/p/80641572) 来源：知乎\n","slug":"前端调试方法","published":1,"updated":"2019-10-09T12:07:29.199Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1mb5buf000du4kehc679lh3","content":"<p>一些前端调试方法</p>\n<a id=\"more\"></a>\n<!-- markdownlint-disable MD041 MD002-->\n<h2 id=\"console\"><a href=\"#console\" class=\"headerlink\" title=\"console\"></a>console</h2><h3 id=\"log\"><a href=\"#log\" class=\"headerlink\" title=\"log\"></a>log</h3><p><code>console.log()</code> 用于在控制台输出信息。参数类型 String 或 Object</p>\n<h3 id=\"info-warn-error\"><a href=\"#info-warn-error\" class=\"headerlink\" title=\"info, warn, error\"></a>info, warn, error</h3><p>这三个 API 更多的是给开发人员提供额外的信息，来查看页面的运行情况，更多用于被封装过后的组件或框架中。</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// Info</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hi, This is message'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// warning 警告</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'On, Your operation may cause a security breach!'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Error 报错</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Shit! Variable does not exist!'</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"table\"><a href=\"#table\" class=\"headerlink\" title=\"table\"></a>table</h3><p><code>console.table()</code>只接受一个数组或者对象, 可以接受一个额外的参数来描述表格的列数。它会把数据通过表格的形式打印出来, 这样我们看数据的时候就能直观了很多。</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Jack'</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">12</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Tome'</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">18</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'baka'</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">15</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"group\"><a href=\"#group\" class=\"headerlink\" title=\"group\"></a>group</h3><p><code>console.group()</code> 和 <code>console.groupEnd()</code> 是成对出现的，就像我们使用的标签一样。<br><code>console.group()</code>在控制台创建一个新的分组, 输出到控制台上的内容都会被添加一个缩进, 表示该内容属于当前分组, 直到调用 <code>console.group()</code> 之后, 当前分组才结束。</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> boys <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Jack'</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">12</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">18</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Rose'</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">15</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span>\n\nboys<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`This is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token punctuation\">.</span>age<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> years old`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token punctuation\">.</span>age <span class=\"token operator\">*</span> <span class=\"token number\">7</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> years old`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">groupEnd</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>原文出自：<a href=\"https://zhuanlan.zhihu.com/p/80641572\" target=\"_blank\" rel=\"noopener\">作者：anran758</a> 来源：知乎</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>一些前端调试方法</p>","more":"<!-- markdownlint-disable MD041 MD002-->\n<h2 id=\"console\"><a href=\"#console\" class=\"headerlink\" title=\"console\"></a>console</h2><h3 id=\"log\"><a href=\"#log\" class=\"headerlink\" title=\"log\"></a>log</h3><p><code>console.log()</code> 用于在控制台输出信息。参数类型 String 或 Object</p>\n<h3 id=\"info-warn-error\"><a href=\"#info-warn-error\" class=\"headerlink\" title=\"info, warn, error\"></a>info, warn, error</h3><p>这三个 API 更多的是给开发人员提供额外的信息，来查看页面的运行情况，更多用于被封装过后的组件或框架中。</p>\n<pre><code class=\"js\">// Info\nconsole.info(&#39;Hi, This is message&#39;)\n\n// warning 警告\nconsole.warn(&#39;On, Your operation may cause a security breach!&#39;)\n\n// Error 报错\nconsole.error(&#39;Shit! Variable does not exist!&#39;)\n</code></pre>\n<h3 id=\"table\"><a href=\"#table\" class=\"headerlink\" title=\"table\"></a>table</h3><p><code>console.table()</code>只接受一个数组或者对象, 可以接受一个额外的参数来描述表格的列数。它会把数据通过表格的形式打印出来, 这样我们看数据的时候就能直观了很多。</p>\n<pre><code class=\"js\">var array = [\n  { name: &#39;Jack&#39;, age: 12 },\n  { name: &#39;Tome&#39;, age: 18 },\n  { name: &#39;baka&#39;, age: 15 }\n];\n\nconsole.table(array);\n</code></pre>\n<h3 id=\"group\"><a href=\"#group\" class=\"headerlink\" title=\"group\"></a>group</h3><p><code>console.group()</code> 和 <code>console.groupEnd()</code> 是成对出现的，就像我们使用的标签一样。<br><code>console.group()</code>在控制台创建一个新的分组, 输出到控制台上的内容都会被添加一个缩进, 表示该内容属于当前分组, 直到调用 <code>console.group()</code> 之后, 当前分组才结束。</p>\n<pre><code class=\"js\">var boys = [\n  { name: &#39;Jack&#39;, age: 12 },\n  { name: &#39;Tom&#39;, age: 18 },\n  { name: &#39;Rose&#39;, age: 15 }\n]\n\nboys.forEach(item =&gt; {\n  console.group(`${item.name}`)\n  console.log(`This is ${item.name}`);\n  console.log(`${item.name} is ${item.age} years old`);\n  console.log(`${item.name} is ${item.age * 7} years old`);\n  console.groupEnd(`${item.name}`)\n})\n</code></pre>\n<blockquote>\n<p>原文出自：<a href=\"https://zhuanlan.zhihu.com/p/80641572\" target=\"_blank\" rel=\"noopener\">作者：anran758</a> 来源：知乎</p>\n</blockquote>"},{"title":"前端开发环境配置","description":"前端开发环境配置","date":"2018-07-01T08:19:21.000Z","_content":"\n前端开发环境配置、淘宝镜像及跨域处理\n\n<!-- more -->\n<!-- markdownlint-disable MD041 MD002-->\n\n## 开发环境准备工作\n\n### 安装软件\n\n- [NodeJS](https://nodejs.org/en/) 10版本以上( LTS 版)\n- [win][Cmder](http://cmder.net)\n- [VS Code](https://code.visualstudio.com)\n- [win][Git](https://github.com/waylau/git-for-win)\n\n### NPM 和 Yarn 添加淘宝镜像\n\n#### NPM 设置淘宝镜像\n\n- 查询当前配置的镜像\n\n```bash\nnpm get registry\n# https://registry.npmjs.org/\n```\n\n- 设置成淘宝镜像\n\n```bash\nnpm config set registry http://registry.npm.taobao.org/\n```\n\n- 换成原来的\n\n```bash\nnpm config set registry https://registry.npmjs.org/\n```\n\n##### 用 nrm 管理 npm 镜像\n\n###### 安装 nrm\n\n```bash\nnpm i nrm -g\n```\n\n###### 显示已有的镜像库\n\n```bash\nnrm ls\n```\n\n```bash\n  npm -------- https://registry.npmjs.org/\n  yarn ------- https://registry.yarnpkg.com/\n  cnpm ------- http://r.cnpmjs.org/\n* taobao ----- https://registry.npm.taobao.org/\n  nj --------- https://registry.nodejitsu.com/\n  npmMirror -- https://skimdb.npmjs.com/registry/\n  edunpm ----- http://registry.enpmjs.org/\n  dms -------- http://192.168.10.156:8082/repository/w-npm-group/\n```\n\n###### 切换镜像库\n\n```bash\nnrm use <name>\n```\n\n###### 添加内部镜像库\n\n```bash\nnrm add <name> <url>\n```\n\n#### Yarn 设置淘宝镜像\n\n- 安装 yarn\n\n```bash\nnpm install -g yarn\n```\n\n- 查询当前配置的镜像\n\n```bash\nyarn config get registry\n# https://registry.yarnpkg.com\n```\n\n- 设置成淘宝镜像\n\n```bash\nyarn config set registry http://registry.npm.taobao.org/\n```\n\n### 安装 Vue/React 脚手架 和 eslint\n\n```bash\n# Vue-cli 2.x\n[sudo] yarn global add vue-cli\n# Vue-cli 3.x\n[sudo] yarn global add @vue/cli\n# React\n[sudo] yarn global add create-react-app\n\n[sudo] yarn global add eslint\n[sudo] yarn global add mocha\n```\n\n### 安装VS code插件\n\n- [Settings Sync 同步插件](https://www.cnblogs.com/kenz520/p/7416836.html)\n- Auto Close Tag\n- Auto Rename Tag\n- ESLint\n- HTML Snippets\n- JavaScript Standard Format\n- language-stylus\n- Path Intellisense\n- Vetur\n- Vue 2 Snippets\n\n### chrome浏览器跨域\n\n#### 版本号49之前的跨域设置\n\n1. 下载并安装好chrome浏览器后在桌面找到浏览器快捷图标并点击鼠标右键的属性一栏。\n2. 在属性页面中的目标输入框`...exe\"`后加上 `--disable-web-security`\n3. 点击应用和确定后关闭属性页面，并打开chrome浏览器。\n4. 如果浏览器出现提示“你使用的是不受支持的命令标记--disable-web-security”，那么说明配置成功。\n\n#### 版本号49之后的chrome跨域设置\n\n1. 在电脑上新建一个目录，例如：C:\\MyChromeDevUserData\n2. 在属性页面中的目标输入框`...exe\"`后加上 `--disable-web-security --user-data-dir=C:\\MyChromeDevUserData`,--user-data-dir的值就是刚才新建的目录。\n3. 点击应用和确定后关闭属性页面，并打开chrome浏览器。\n4. 再次打开chrome，发现有“--disable-web-security”相关的提示，说明chrome又能正常跨域工作了。\n\n### 其他\n\n- [Chai 断言语法](https://www.jianshu.com/p/f200a75a15d2)\n- [如何使用 Mocha, Chai 和 SuperTest 写测试代码](https://log.zvz.im/2016/06/07/Make-your-Nodejs-API-robust/)\n\n如果报错 `error An unexpected error occurred: \"https://registry.npm.taobao.org/axios: unable to verify the first certificate\".`\n就设置 `npm/yarn config set strict-ssl false`\n","source":"_posts/前端开发环境配置.md","raw":"---\ntitle: '前端开发环境配置'\ntags: \n  - VSCode\n  - 淘宝镜像\n  - 跨域\ncategories: 前端工具\ndescription: 前端开发环境配置\ndate: 2018-07-01 16:19:21\n---\n\n前端开发环境配置、淘宝镜像及跨域处理\n\n<!-- more -->\n<!-- markdownlint-disable MD041 MD002-->\n\n## 开发环境准备工作\n\n### 安装软件\n\n- [NodeJS](https://nodejs.org/en/) 10版本以上( LTS 版)\n- [win][Cmder](http://cmder.net)\n- [VS Code](https://code.visualstudio.com)\n- [win][Git](https://github.com/waylau/git-for-win)\n\n### NPM 和 Yarn 添加淘宝镜像\n\n#### NPM 设置淘宝镜像\n\n- 查询当前配置的镜像\n\n```bash\nnpm get registry\n# https://registry.npmjs.org/\n```\n\n- 设置成淘宝镜像\n\n```bash\nnpm config set registry http://registry.npm.taobao.org/\n```\n\n- 换成原来的\n\n```bash\nnpm config set registry https://registry.npmjs.org/\n```\n\n##### 用 nrm 管理 npm 镜像\n\n###### 安装 nrm\n\n```bash\nnpm i nrm -g\n```\n\n###### 显示已有的镜像库\n\n```bash\nnrm ls\n```\n\n```bash\n  npm -------- https://registry.npmjs.org/\n  yarn ------- https://registry.yarnpkg.com/\n  cnpm ------- http://r.cnpmjs.org/\n* taobao ----- https://registry.npm.taobao.org/\n  nj --------- https://registry.nodejitsu.com/\n  npmMirror -- https://skimdb.npmjs.com/registry/\n  edunpm ----- http://registry.enpmjs.org/\n  dms -------- http://192.168.10.156:8082/repository/w-npm-group/\n```\n\n###### 切换镜像库\n\n```bash\nnrm use <name>\n```\n\n###### 添加内部镜像库\n\n```bash\nnrm add <name> <url>\n```\n\n#### Yarn 设置淘宝镜像\n\n- 安装 yarn\n\n```bash\nnpm install -g yarn\n```\n\n- 查询当前配置的镜像\n\n```bash\nyarn config get registry\n# https://registry.yarnpkg.com\n```\n\n- 设置成淘宝镜像\n\n```bash\nyarn config set registry http://registry.npm.taobao.org/\n```\n\n### 安装 Vue/React 脚手架 和 eslint\n\n```bash\n# Vue-cli 2.x\n[sudo] yarn global add vue-cli\n# Vue-cli 3.x\n[sudo] yarn global add @vue/cli\n# React\n[sudo] yarn global add create-react-app\n\n[sudo] yarn global add eslint\n[sudo] yarn global add mocha\n```\n\n### 安装VS code插件\n\n- [Settings Sync 同步插件](https://www.cnblogs.com/kenz520/p/7416836.html)\n- Auto Close Tag\n- Auto Rename Tag\n- ESLint\n- HTML Snippets\n- JavaScript Standard Format\n- language-stylus\n- Path Intellisense\n- Vetur\n- Vue 2 Snippets\n\n### chrome浏览器跨域\n\n#### 版本号49之前的跨域设置\n\n1. 下载并安装好chrome浏览器后在桌面找到浏览器快捷图标并点击鼠标右键的属性一栏。\n2. 在属性页面中的目标输入框`...exe\"`后加上 `--disable-web-security`\n3. 点击应用和确定后关闭属性页面，并打开chrome浏览器。\n4. 如果浏览器出现提示“你使用的是不受支持的命令标记--disable-web-security”，那么说明配置成功。\n\n#### 版本号49之后的chrome跨域设置\n\n1. 在电脑上新建一个目录，例如：C:\\MyChromeDevUserData\n2. 在属性页面中的目标输入框`...exe\"`后加上 `--disable-web-security --user-data-dir=C:\\MyChromeDevUserData`,--user-data-dir的值就是刚才新建的目录。\n3. 点击应用和确定后关闭属性页面，并打开chrome浏览器。\n4. 再次打开chrome，发现有“--disable-web-security”相关的提示，说明chrome又能正常跨域工作了。\n\n### 其他\n\n- [Chai 断言语法](https://www.jianshu.com/p/f200a75a15d2)\n- [如何使用 Mocha, Chai 和 SuperTest 写测试代码](https://log.zvz.im/2016/06/07/Make-your-Nodejs-API-robust/)\n\n如果报错 `error An unexpected error occurred: \"https://registry.npm.taobao.org/axios: unable to verify the first certificate\".`\n就设置 `npm/yarn config set strict-ssl false`\n","slug":"前端开发环境配置","published":1,"updated":"2019-10-09T12:07:29.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1mb5buh000hu4kesc3fccsm","content":"<p>前端开发环境配置、淘宝镜像及跨域处理</p>\n<a id=\"more\"></a>\n<!-- markdownlint-disable MD041 MD002-->\n<h2 id=\"开发环境准备工作\"><a href=\"#开发环境准备工作\" class=\"headerlink\" title=\"开发环境准备工作\"></a>开发环境准备工作</h2><h3 id=\"安装软件\"><a href=\"#安装软件\" class=\"headerlink\" title=\"安装软件\"></a>安装软件</h3><ul>\n<li><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">NodeJS</a> 10版本以上( LTS 版)</li>\n<li>[win]<a href=\"http://cmder.net\" target=\"_blank\" rel=\"noopener\">Cmder</a></li>\n<li><a href=\"https://code.visualstudio.com\" target=\"_blank\" rel=\"noopener\">VS Code</a></li>\n<li>[win]<a href=\"https://github.com/waylau/git-for-win\" target=\"_blank\" rel=\"noopener\">Git</a></li>\n</ul>\n<h3 id=\"NPM-和-Yarn-添加淘宝镜像\"><a href=\"#NPM-和-Yarn-添加淘宝镜像\" class=\"headerlink\" title=\"NPM 和 Yarn 添加淘宝镜像\"></a>NPM 和 Yarn 添加淘宝镜像</h3><h4 id=\"NPM-设置淘宝镜像\"><a href=\"#NPM-设置淘宝镜像\" class=\"headerlink\" title=\"NPM 设置淘宝镜像\"></a>NPM 设置淘宝镜像</h4><ul>\n<li>查询当前配置的镜像</li>\n</ul>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> get registry\n<span class=\"token comment\" spellcheck=\"true\"># https://registry.npmjs.org/</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li>设置成淘宝镜像</li>\n</ul>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> config <span class=\"token keyword\">set</span> registry http://registry.npm.taobao.org/\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>换成原来的</li>\n</ul>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> config <span class=\"token keyword\">set</span> registry https://registry.npmjs.org/\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h5 id=\"用-nrm-管理-npm-镜像\"><a href=\"#用-nrm-管理-npm-镜像\" class=\"headerlink\" title=\"用 nrm 管理 npm 镜像\"></a>用 nrm 管理 npm 镜像</h5><h6 id=\"安装-nrm\"><a href=\"#安装-nrm\" class=\"headerlink\" title=\"安装 nrm\"></a>安装 nrm</h6><pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i nrm -g\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h6 id=\"显示已有的镜像库\"><a href=\"#显示已有的镜像库\" class=\"headerlink\" title=\"显示已有的镜像库\"></a>显示已有的镜像库</h6><pre class=\"line-numbers language-bash\"><code class=\"language-bash\">nrm <span class=\"token function\">ls</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">  <span class=\"token function\">npm</span> -------- https://registry.npmjs.org/\n  yarn ------- https://registry.yarnpkg.com/\n  cnpm ------- http://r.cnpmjs.org/\n* taobao ----- https://registry.npm.taobao.org/\n  nj --------- https://registry.nodejitsu.com/\n  npmMirror -- https://skimdb.npmjs.com/registry/\n  edunpm ----- http://registry.enpmjs.org/\n  dms -------- http://192.168.10.156:8082/repository/w-npm-group/\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h6 id=\"切换镜像库\"><a href=\"#切换镜像库\" class=\"headerlink\" title=\"切换镜像库\"></a>切换镜像库</h6><pre class=\"line-numbers language-bash\"><code class=\"language-bash\">nrm use <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h6 id=\"添加内部镜像库\"><a href=\"#添加内部镜像库\" class=\"headerlink\" title=\"添加内部镜像库\"></a>添加内部镜像库</h6><pre class=\"line-numbers language-bash\"><code class=\"language-bash\">nrm add <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>url<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"Yarn-设置淘宝镜像\"><a href=\"#Yarn-设置淘宝镜像\" class=\"headerlink\" title=\"Yarn 设置淘宝镜像\"></a>Yarn 设置淘宝镜像</h4><ul>\n<li>安装 yarn</li>\n</ul>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g yarn\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>查询当前配置的镜像</li>\n</ul>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">yarn config get registry\n<span class=\"token comment\" spellcheck=\"true\"># https://registry.yarnpkg.com</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li>设置成淘宝镜像</li>\n</ul>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">yarn config <span class=\"token keyword\">set</span> registry http://registry.npm.taobao.org/\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"安装-Vue-React-脚手架-和-eslint\"><a href=\"#安装-Vue-React-脚手架-和-eslint\" class=\"headerlink\" title=\"安装 Vue/React 脚手架 和 eslint\"></a>安装 Vue/React 脚手架 和 eslint</h3><pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># Vue-cli 2.x</span>\n<span class=\"token punctuation\">[</span>sudo<span class=\"token punctuation\">]</span> yarn global add vue-cli\n<span class=\"token comment\" spellcheck=\"true\"># Vue-cli 3.x</span>\n<span class=\"token punctuation\">[</span>sudo<span class=\"token punctuation\">]</span> yarn global add @vue/cli\n<span class=\"token comment\" spellcheck=\"true\"># React</span>\n<span class=\"token punctuation\">[</span>sudo<span class=\"token punctuation\">]</span> yarn global add create-react-app\n\n<span class=\"token punctuation\">[</span>sudo<span class=\"token punctuation\">]</span> yarn global add eslint\n<span class=\"token punctuation\">[</span>sudo<span class=\"token punctuation\">]</span> yarn global add mocha\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"安装VS-code插件\"><a href=\"#安装VS-code插件\" class=\"headerlink\" title=\"安装VS code插件\"></a>安装VS code插件</h3><ul>\n<li><a href=\"https://www.cnblogs.com/kenz520/p/7416836.html\" target=\"_blank\" rel=\"noopener\">Settings Sync 同步插件</a></li>\n<li>Auto Close Tag</li>\n<li>Auto Rename Tag</li>\n<li>ESLint</li>\n<li>HTML Snippets</li>\n<li>JavaScript Standard Format</li>\n<li>language-stylus</li>\n<li>Path Intellisense</li>\n<li>Vetur</li>\n<li>Vue 2 Snippets</li>\n</ul>\n<h3 id=\"chrome浏览器跨域\"><a href=\"#chrome浏览器跨域\" class=\"headerlink\" title=\"chrome浏览器跨域\"></a>chrome浏览器跨域</h3><h4 id=\"版本号49之前的跨域设置\"><a href=\"#版本号49之前的跨域设置\" class=\"headerlink\" title=\"版本号49之前的跨域设置\"></a>版本号49之前的跨域设置</h4><ol>\n<li>下载并安装好chrome浏览器后在桌面找到浏览器快捷图标并点击鼠标右键的属性一栏。</li>\n<li>在属性页面中的目标输入框<code>...exe&quot;</code>后加上 <code>--disable-web-security</code></li>\n<li>点击应用和确定后关闭属性页面，并打开chrome浏览器。</li>\n<li>如果浏览器出现提示“你使用的是不受支持的命令标记–disable-web-security”，那么说明配置成功。</li>\n</ol>\n<h4 id=\"版本号49之后的chrome跨域设置\"><a href=\"#版本号49之后的chrome跨域设置\" class=\"headerlink\" title=\"版本号49之后的chrome跨域设置\"></a>版本号49之后的chrome跨域设置</h4><ol>\n<li>在电脑上新建一个目录，例如：C:\\MyChromeDevUserData</li>\n<li>在属性页面中的目标输入框<code>...exe&quot;</code>后加上 <code>--disable-web-security --user-data-dir=C:\\MyChromeDevUserData</code>,–user-data-dir的值就是刚才新建的目录。</li>\n<li>点击应用和确定后关闭属性页面，并打开chrome浏览器。</li>\n<li>再次打开chrome，发现有“–disable-web-security”相关的提示，说明chrome又能正常跨域工作了。</li>\n</ol>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ul>\n<li><a href=\"https://www.jianshu.com/p/f200a75a15d2\" target=\"_blank\" rel=\"noopener\">Chai 断言语法</a></li>\n<li><a href=\"https://log.zvz.im/2016/06/07/Make-your-Nodejs-API-robust/\" target=\"_blank\" rel=\"noopener\">如何使用 Mocha, Chai 和 SuperTest 写测试代码</a></li>\n</ul>\n<p>如果报错 <code>error An unexpected error occurred: &quot;https://registry.npm.taobao.org/axios: unable to verify the first certificate&quot;.</code><br>就设置 <code>npm/yarn config set strict-ssl false</code></p>\n","site":{"data":{}},"excerpt":"<p>前端开发环境配置、淘宝镜像及跨域处理</p>","more":"<!-- markdownlint-disable MD041 MD002-->\n<h2 id=\"开发环境准备工作\"><a href=\"#开发环境准备工作\" class=\"headerlink\" title=\"开发环境准备工作\"></a>开发环境准备工作</h2><h3 id=\"安装软件\"><a href=\"#安装软件\" class=\"headerlink\" title=\"安装软件\"></a>安装软件</h3><ul>\n<li><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">NodeJS</a> 10版本以上( LTS 版)</li>\n<li>[win]<a href=\"http://cmder.net\" target=\"_blank\" rel=\"noopener\">Cmder</a></li>\n<li><a href=\"https://code.visualstudio.com\" target=\"_blank\" rel=\"noopener\">VS Code</a></li>\n<li>[win]<a href=\"https://github.com/waylau/git-for-win\" target=\"_blank\" rel=\"noopener\">Git</a></li>\n</ul>\n<h3 id=\"NPM-和-Yarn-添加淘宝镜像\"><a href=\"#NPM-和-Yarn-添加淘宝镜像\" class=\"headerlink\" title=\"NPM 和 Yarn 添加淘宝镜像\"></a>NPM 和 Yarn 添加淘宝镜像</h3><h4 id=\"NPM-设置淘宝镜像\"><a href=\"#NPM-设置淘宝镜像\" class=\"headerlink\" title=\"NPM 设置淘宝镜像\"></a>NPM 设置淘宝镜像</h4><ul>\n<li>查询当前配置的镜像</li>\n</ul>\n<pre><code class=\"bash\">npm get registry\n# https://registry.npmjs.org/\n</code></pre>\n<ul>\n<li>设置成淘宝镜像</li>\n</ul>\n<pre><code class=\"bash\">npm config set registry http://registry.npm.taobao.org/\n</code></pre>\n<ul>\n<li>换成原来的</li>\n</ul>\n<pre><code class=\"bash\">npm config set registry https://registry.npmjs.org/\n</code></pre>\n<h5 id=\"用-nrm-管理-npm-镜像\"><a href=\"#用-nrm-管理-npm-镜像\" class=\"headerlink\" title=\"用 nrm 管理 npm 镜像\"></a>用 nrm 管理 npm 镜像</h5><h6 id=\"安装-nrm\"><a href=\"#安装-nrm\" class=\"headerlink\" title=\"安装 nrm\"></a>安装 nrm</h6><pre><code class=\"bash\">npm i nrm -g\n</code></pre>\n<h6 id=\"显示已有的镜像库\"><a href=\"#显示已有的镜像库\" class=\"headerlink\" title=\"显示已有的镜像库\"></a>显示已有的镜像库</h6><pre><code class=\"bash\">nrm ls\n</code></pre>\n<pre><code class=\"bash\">  npm -------- https://registry.npmjs.org/\n  yarn ------- https://registry.yarnpkg.com/\n  cnpm ------- http://r.cnpmjs.org/\n* taobao ----- https://registry.npm.taobao.org/\n  nj --------- https://registry.nodejitsu.com/\n  npmMirror -- https://skimdb.npmjs.com/registry/\n  edunpm ----- http://registry.enpmjs.org/\n  dms -------- http://192.168.10.156:8082/repository/w-npm-group/\n</code></pre>\n<h6 id=\"切换镜像库\"><a href=\"#切换镜像库\" class=\"headerlink\" title=\"切换镜像库\"></a>切换镜像库</h6><pre><code class=\"bash\">nrm use &lt;name&gt;\n</code></pre>\n<h6 id=\"添加内部镜像库\"><a href=\"#添加内部镜像库\" class=\"headerlink\" title=\"添加内部镜像库\"></a>添加内部镜像库</h6><pre><code class=\"bash\">nrm add &lt;name&gt; &lt;url&gt;\n</code></pre>\n<h4 id=\"Yarn-设置淘宝镜像\"><a href=\"#Yarn-设置淘宝镜像\" class=\"headerlink\" title=\"Yarn 设置淘宝镜像\"></a>Yarn 设置淘宝镜像</h4><ul>\n<li>安装 yarn</li>\n</ul>\n<pre><code class=\"bash\">npm install -g yarn\n</code></pre>\n<ul>\n<li>查询当前配置的镜像</li>\n</ul>\n<pre><code class=\"bash\">yarn config get registry\n# https://registry.yarnpkg.com\n</code></pre>\n<ul>\n<li>设置成淘宝镜像</li>\n</ul>\n<pre><code class=\"bash\">yarn config set registry http://registry.npm.taobao.org/\n</code></pre>\n<h3 id=\"安装-Vue-React-脚手架-和-eslint\"><a href=\"#安装-Vue-React-脚手架-和-eslint\" class=\"headerlink\" title=\"安装 Vue/React 脚手架 和 eslint\"></a>安装 Vue/React 脚手架 和 eslint</h3><pre><code class=\"bash\"># Vue-cli 2.x\n[sudo] yarn global add vue-cli\n# Vue-cli 3.x\n[sudo] yarn global add @vue/cli\n# React\n[sudo] yarn global add create-react-app\n\n[sudo] yarn global add eslint\n[sudo] yarn global add mocha\n</code></pre>\n<h3 id=\"安装VS-code插件\"><a href=\"#安装VS-code插件\" class=\"headerlink\" title=\"安装VS code插件\"></a>安装VS code插件</h3><ul>\n<li><a href=\"https://www.cnblogs.com/kenz520/p/7416836.html\" target=\"_blank\" rel=\"noopener\">Settings Sync 同步插件</a></li>\n<li>Auto Close Tag</li>\n<li>Auto Rename Tag</li>\n<li>ESLint</li>\n<li>HTML Snippets</li>\n<li>JavaScript Standard Format</li>\n<li>language-stylus</li>\n<li>Path Intellisense</li>\n<li>Vetur</li>\n<li>Vue 2 Snippets</li>\n</ul>\n<h3 id=\"chrome浏览器跨域\"><a href=\"#chrome浏览器跨域\" class=\"headerlink\" title=\"chrome浏览器跨域\"></a>chrome浏览器跨域</h3><h4 id=\"版本号49之前的跨域设置\"><a href=\"#版本号49之前的跨域设置\" class=\"headerlink\" title=\"版本号49之前的跨域设置\"></a>版本号49之前的跨域设置</h4><ol>\n<li>下载并安装好chrome浏览器后在桌面找到浏览器快捷图标并点击鼠标右键的属性一栏。</li>\n<li>在属性页面中的目标输入框<code>...exe&quot;</code>后加上 <code>--disable-web-security</code></li>\n<li>点击应用和确定后关闭属性页面，并打开chrome浏览器。</li>\n<li>如果浏览器出现提示“你使用的是不受支持的命令标记–disable-web-security”，那么说明配置成功。</li>\n</ol>\n<h4 id=\"版本号49之后的chrome跨域设置\"><a href=\"#版本号49之后的chrome跨域设置\" class=\"headerlink\" title=\"版本号49之后的chrome跨域设置\"></a>版本号49之后的chrome跨域设置</h4><ol>\n<li>在电脑上新建一个目录，例如：C:\\MyChromeDevUserData</li>\n<li>在属性页面中的目标输入框<code>...exe&quot;</code>后加上 <code>--disable-web-security --user-data-dir=C:\\MyChromeDevUserData</code>,–user-data-dir的值就是刚才新建的目录。</li>\n<li>点击应用和确定后关闭属性页面，并打开chrome浏览器。</li>\n<li>再次打开chrome，发现有“–disable-web-security”相关的提示，说明chrome又能正常跨域工作了。</li>\n</ol>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ul>\n<li><a href=\"https://www.jianshu.com/p/f200a75a15d2\" target=\"_blank\" rel=\"noopener\">Chai 断言语法</a></li>\n<li><a href=\"https://log.zvz.im/2016/06/07/Make-your-Nodejs-API-robust/\" target=\"_blank\" rel=\"noopener\">如何使用 Mocha, Chai 和 SuperTest 写测试代码</a></li>\n</ul>\n<p>如果报错 <code>error An unexpected error occurred: &quot;https://registry.npm.taobao.org/axios: unable to verify the first certificate&quot;.</code><br>就设置 <code>npm/yarn config set strict-ssl false</code></p>"},{"title":"hexo文章模板设置","description":"hexo文章模板设置","date":"2018-11-05T14:57:26.000Z","_content":"\nhexo文章模板设置\n\n<!-- more -->\n<!-- markdownlint-disable MD041 MD002-->\n\n## hexo文章模板设置\n\nhexo 项目文件夹中的 scaffold 文件夹中的 `post.md` 和 `draft.md`\n\n对应就是 `hexo new [layout] <title>` 中的 `layout` , 默认为 `post`, 草稿为 `draft`, 如果标题包含空格的话，请使用引号括起来。\n\n```bash\n---\ntitle: {{ title }}\ntags:\ncategories:\ndescription:\ndate: {{ date }}\n---\n\n点击阅读前文前, 首页能看到的文章的简短描述\n\n<!-- more -->\n<!-- markdownlint-disable MD041 MD002--> # 防止 markdownlint 报错\n```\n\n## hexo 草稿\n\nHexo 的一种特殊布局：`draft`, 这种布局在建立时会被保存到 `source/_drafts` 文件夹, 您可通过 `publish` 命令将草稿移动到 `source/_posts` 文件夹。\n\n该命令的使用方式与 `new` 十分类似, 您也可在命令中指定 `layout` 来指定布局。\n\n```js\nhexo publish [layout] <title> # 发表草稿\n```\n\n草稿默认不会显示在页面中, 您可在执行时加上 `--draft` 参数, 或是把 `render_drafts` 参数设为 `true` 来预览草稿。\n\n## hexo 分类和标签\n\n**分类**具有顺序性和层次性。Hexo 不支持指定多个同级分类。\n\n**标签**没有顺序和层次。\n\n```yml\ncategories:\n- Diary\n- Life\ntags:\n- PS3\n- Games\n```\n\n以上会使分类 `Life` 成为 `Diary` 的子分类, 而不是并列分类。\n\n因此，有必要为您的文章选择**尽可能准确的一个分类**","source":"_posts/hexo文章模板设置.md","raw":"---\ntitle: hexo文章模板设置\ntags: Hexo\ncategories: 前端工具\ndescription: hexo文章模板设置\ndate: 2018-11-05 22:57:26\n---\n\nhexo文章模板设置\n\n<!-- more -->\n<!-- markdownlint-disable MD041 MD002-->\n\n## hexo文章模板设置\n\nhexo 项目文件夹中的 scaffold 文件夹中的 `post.md` 和 `draft.md`\n\n对应就是 `hexo new [layout] <title>` 中的 `layout` , 默认为 `post`, 草稿为 `draft`, 如果标题包含空格的话，请使用引号括起来。\n\n```bash\n---\ntitle: {{ title }}\ntags:\ncategories:\ndescription:\ndate: {{ date }}\n---\n\n点击阅读前文前, 首页能看到的文章的简短描述\n\n<!-- more -->\n<!-- markdownlint-disable MD041 MD002--> # 防止 markdownlint 报错\n```\n\n## hexo 草稿\n\nHexo 的一种特殊布局：`draft`, 这种布局在建立时会被保存到 `source/_drafts` 文件夹, 您可通过 `publish` 命令将草稿移动到 `source/_posts` 文件夹。\n\n该命令的使用方式与 `new` 十分类似, 您也可在命令中指定 `layout` 来指定布局。\n\n```js\nhexo publish [layout] <title> # 发表草稿\n```\n\n草稿默认不会显示在页面中, 您可在执行时加上 `--draft` 参数, 或是把 `render_drafts` 参数设为 `true` 来预览草稿。\n\n## hexo 分类和标签\n\n**分类**具有顺序性和层次性。Hexo 不支持指定多个同级分类。\n\n**标签**没有顺序和层次。\n\n```yml\ncategories:\n- Diary\n- Life\ntags:\n- PS3\n- Games\n```\n\n以上会使分类 `Life` 成为 `Diary` 的子分类, 而不是并列分类。\n\n因此，有必要为您的文章选择**尽可能准确的一个分类**","slug":"hexo文章模板设置","published":1,"updated":"2019-02-25T06:37:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1mb5buk000ju4ke57iq6z0m","content":"<p>hexo文章模板设置</p>\n<a id=\"more\"></a>\n<!-- markdownlint-disable MD041 MD002-->\n<h2 id=\"hexo文章模板设置\"><a href=\"#hexo文章模板设置\" class=\"headerlink\" title=\"hexo文章模板设置\"></a>hexo文章模板设置</h2><p>hexo 项目文件夹中的 scaffold 文件夹中的 <code>post.md</code> 和 <code>draft.md</code></p>\n<p>对应就是 <code>hexo new [layout] &lt;title&gt;</code> 中的 <code>layout</code> , 默认为 <code>post</code>, 草稿为 <code>draft</code>, 如果标题包含空格的话，请使用引号括起来。</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">---\ntitle: <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> title <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\ntags:\ncategories:\ndescription:\ndate: <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token function\">date</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n---\n\n点击阅读前文前, 首页能看到的文章的简短描述\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>-- <span class=\"token function\">more</span> --<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>-- markdownlint-disable MD041 MD002--<span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\"># 防止 markdownlint 报错</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"hexo-草稿\"><a href=\"#hexo-草稿\" class=\"headerlink\" title=\"hexo 草稿\"></a>hexo 草稿</h2><p>Hexo 的一种特殊布局：<code>draft</code>, 这种布局在建立时会被保存到 <code>source/_drafts</code> 文件夹, 您可通过 <code>publish</code> 命令将草稿移动到 <code>source/_posts</code> 文件夹。</p>\n<p>该命令的使用方式与 <code>new</code> 十分类似, 您也可在命令中指定 <code>layout</code> 来指定布局。</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\">hexo publish <span class=\"token punctuation\">[</span>layout<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span> # 发表草稿\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>草稿默认不会显示在页面中, 您可在执行时加上 <code>--draft</code> 参数, 或是把 <code>render_drafts</code> 参数设为 <code>true</code> 来预览草稿。</p>\n<h2 id=\"hexo-分类和标签\"><a href=\"#hexo-分类和标签\" class=\"headerlink\" title=\"hexo 分类和标签\"></a>hexo 分类和标签</h2><p><strong>分类</strong>具有顺序性和层次性。Hexo 不支持指定多个同级分类。</p>\n<p><strong>标签</strong>没有顺序和层次。</p>\n<pre class=\"line-numbers language-yml\"><code class=\"language-yml\">categories:\n- Diary\n- Life\ntags:\n- PS3\n- Games\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>以上会使分类 <code>Life</code> 成为 <code>Diary</code> 的子分类, 而不是并列分类。</p>\n<p>因此，有必要为您的文章选择<strong>尽可能准确的一个分类</strong></p>\n","site":{"data":{}},"excerpt":"<p>hexo文章模板设置</p>","more":"<!-- markdownlint-disable MD041 MD002-->\n<h2 id=\"hexo文章模板设置\"><a href=\"#hexo文章模板设置\" class=\"headerlink\" title=\"hexo文章模板设置\"></a>hexo文章模板设置</h2><p>hexo 项目文件夹中的 scaffold 文件夹中的 <code>post.md</code> 和 <code>draft.md</code></p>\n<p>对应就是 <code>hexo new [layout] &lt;title&gt;</code> 中的 <code>layout</code> , 默认为 <code>post</code>, 草稿为 <code>draft</code>, 如果标题包含空格的话，请使用引号括起来。</p>\n<pre><code class=\"bash\">---\ntitle: {{ title }}\ntags:\ncategories:\ndescription:\ndate: {{ date }}\n---\n\n点击阅读前文前, 首页能看到的文章的简短描述\n\n&lt;!-- more --&gt;\n&lt;!-- markdownlint-disable MD041 MD002--&gt; # 防止 markdownlint 报错\n</code></pre>\n<h2 id=\"hexo-草稿\"><a href=\"#hexo-草稿\" class=\"headerlink\" title=\"hexo 草稿\"></a>hexo 草稿</h2><p>Hexo 的一种特殊布局：<code>draft</code>, 这种布局在建立时会被保存到 <code>source/_drafts</code> 文件夹, 您可通过 <code>publish</code> 命令将草稿移动到 <code>source/_posts</code> 文件夹。</p>\n<p>该命令的使用方式与 <code>new</code> 十分类似, 您也可在命令中指定 <code>layout</code> 来指定布局。</p>\n<pre><code class=\"js\">hexo publish [layout] &lt;title&gt; # 发表草稿\n</code></pre>\n<p>草稿默认不会显示在页面中, 您可在执行时加上 <code>--draft</code> 参数, 或是把 <code>render_drafts</code> 参数设为 <code>true</code> 来预览草稿。</p>\n<h2 id=\"hexo-分类和标签\"><a href=\"#hexo-分类和标签\" class=\"headerlink\" title=\"hexo 分类和标签\"></a>hexo 分类和标签</h2><p><strong>分类</strong>具有顺序性和层次性。Hexo 不支持指定多个同级分类。</p>\n<p><strong>标签</strong>没有顺序和层次。</p>\n<pre><code class=\"yml\">categories:\n- Diary\n- Life\ntags:\n- PS3\n- Games\n</code></pre>\n<p>以上会使分类 <code>Life</code> 成为 <code>Diary</code> 的子分类, 而不是并列分类。</p>\n<p>因此，有必要为您的文章选择<strong>尽可能准确的一个分类</strong></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ck1mb5btx0000u4kelhmewe94","category_id":"ck1mb5bu50004u4keuqbh5flb","_id":"ck1mb5bug000eu4keq5vejih6"},{"post_id":"ck1mb5bub0008u4keqm16r3p6","category_id":"ck1mb5bu50004u4keuqbh5flb","_id":"ck1mb5buj000iu4ke3y3wpyg0"},{"post_id":"ck1mb5bu30002u4keb8tv3qsd","category_id":"ck1mb5buc0009u4keuqorb2b2","_id":"ck1mb5bun000lu4ke5pxm0biz"},{"post_id":"ck1mb5buf000du4kehc679lh3","category_id":"ck1mb5buc0009u4keuqorb2b2","_id":"ck1mb5buo000nu4keqasm8593"},{"post_id":"ck1mb5buh000hu4kesc3fccsm","category_id":"ck1mb5buc0009u4keuqorb2b2","_id":"ck1mb5bup000pu4kek9mguojf"},{"post_id":"ck1mb5bu70006u4ke4owu1n24","category_id":"ck1mb5buc0009u4keuqorb2b2","_id":"ck1mb5buq000tu4keh4ju64da"},{"post_id":"ck1mb5buk000ju4ke57iq6z0m","category_id":"ck1mb5buc0009u4keuqorb2b2","_id":"ck1mb5buq000uu4ke47yi292y"},{"post_id":"ck1mb5bu90007u4keusy30t8l","category_id":"ck1mb5bum000ku4kep11y0z6j","_id":"ck1mb5bur000wu4ke03u0man9"},{"post_id":"ck1mb5bud000cu4kek7t1y0q0","category_id":"ck1mb5bup000ru4keraevvnbf","_id":"ck1mb5bus000yu4ke2fmgcka4"}],"PostTag":[{"post_id":"ck1mb5btx0000u4kelhmewe94","tag_id":"ck1mb5bu60005u4ke4bxmkakw","_id":"ck1mb5bud000bu4keh9ucvc30"},{"post_id":"ck1mb5bu30002u4keb8tv3qsd","tag_id":"ck1mb5buc000au4ke6yt5zdws","_id":"ck1mb5buo000ou4ke0gyv5hyc"},{"post_id":"ck1mb5bu30002u4keb8tv3qsd","tag_id":"ck1mb5bug000gu4kecxyn4vcm","_id":"ck1mb5bup000qu4ked9erggmr"},{"post_id":"ck1mb5bu70006u4ke4owu1n24","tag_id":"ck1mb5bun000mu4kerdpqpjut","_id":"ck1mb5bur000xu4ke3aumxzkl"},{"post_id":"ck1mb5bu70006u4ke4owu1n24","tag_id":"ck1mb5buq000su4kei2vi0377","_id":"ck1mb5bus000zu4kelh90l2hp"},{"post_id":"ck1mb5bu90007u4keusy30t8l","tag_id":"ck1mb5bur000vu4ke6vnfywc4","_id":"ck1mb5but0011u4kecopf8159"},{"post_id":"ck1mb5bub0008u4keqm16r3p6","tag_id":"ck1mb5bu60005u4ke4bxmkakw","_id":"ck1mb5buv0013u4kegdrxtxsw"},{"post_id":"ck1mb5bub0008u4keqm16r3p6","tag_id":"ck1mb5bus0010u4kekgya940h","_id":"ck1mb5buv0014u4kec07np7yr"},{"post_id":"ck1mb5bud000cu4kek7t1y0q0","tag_id":"ck1mb5but0012u4kevt477uas","_id":"ck1mb5buw0016u4keenmu4ur7"},{"post_id":"ck1mb5buf000du4kehc679lh3","tag_id":"ck1mb5but0012u4kevt477uas","_id":"ck1mb5buw0018u4kem175hjid"},{"post_id":"ck1mb5buh000hu4kesc3fccsm","tag_id":"ck1mb5buw0017u4kenn59i52g","_id":"ck1mb5bv0001cu4keyif40w9b"},{"post_id":"ck1mb5buh000hu4kesc3fccsm","tag_id":"ck1mb5bux0019u4keplvjaxxw","_id":"ck1mb5bv0001du4ke82pdwp8z"},{"post_id":"ck1mb5buh000hu4kesc3fccsm","tag_id":"ck1mb5bux001au4kemy49o640","_id":"ck1mb5bv0001eu4kex9lpmk04"},{"post_id":"ck1mb5buk000ju4ke57iq6z0m","tag_id":"ck1mb5bun000mu4kerdpqpjut","_id":"ck1mb5bv1001fu4kedfl57sbx"}],"Tag":[{"name":"Vue","_id":"ck1mb5bu60005u4ke4bxmkakw"},{"name":"NPM","_id":"ck1mb5buc000au4ke6yt5zdws"},{"name":"Yarn","_id":"ck1mb5bug000gu4kecxyn4vcm"},{"name":"Hexo","_id":"ck1mb5bun000mu4kerdpqpjut"},{"name":"Github","_id":"ck1mb5buq000su4kei2vi0377"},{"name":"Git","_id":"ck1mb5bur000vu4ke6vnfywc4"},{"name":"Webpack","_id":"ck1mb5bus0010u4kekgya940h"},{"name":"JavaScript","_id":"ck1mb5but0012u4kevt477uas"},{"name":"VSCode","_id":"ck1mb5buw0017u4kenn59i52g"},{"name":"淘宝镜像","_id":"ck1mb5bux0019u4keplvjaxxw"},{"name":"跨域","_id":"ck1mb5bux001au4kemy49o640"}]}}