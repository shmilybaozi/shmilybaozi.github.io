[{"title":"Git更新与推送流程","date":"2018-07-29T07:48:01.000Z","path":"2018/07/29/Git更新与推送流程/","text":"Git更新与推送流程 Git更新与推送流程 设置主仓库地址 git remote add upstream https://repo-address 获取主仓库最新提交 git pull upstream 将主仓库的 master 分支合并到本地的 master 分支 git merge upstream/master master 解决冲突并提交合并 git commit -a -m 'merge upstream master' 推送至远程仓库 git push 提交Pull Request 自定义Git让Git显示颜色git config --global color.ui true 配置别名 git st表示git status git co表示git checkout git ci表示git commit git br表示git branch git config --global alias.st status git config --global alias.co checkout git config --global alias.ci commit git config --global alias.br branch 命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区。既然是一个unstage操作，就可以配置一个unstage别名： git config --global alias.unstage 'reset HEAD' 配置一个git last，让其显示最后一次提交信息： git config --global alias.last 'log -1' 还有人丧心病狂地把lg配置成了： git config --global alias.lg \"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an>%Creset' --abbrev-commit\" 配置文件配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。配置文件放哪了?每个仓库的Git配置文件都放在.git/config文件中而当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中别名就在[alias]后面，要删除别名，直接把对应的行删掉即可。配置别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置。 [alias] st = status co = checkout ci = commit br = branch unstage = reset HEAD last = log -1 lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an>%Creset' --abbrev-commit up = upstream og = origin ms = master mg = merge plp = pull upstream mgums = merge upstream/master master rap = remote add upstream rag = remote add origin psgms = push -u origin master","tags":[{"name":"Git","slug":"Git","permalink":"https://shmilybaozi.github.io/tags/Git/"}]},{"title":"src目录结构分析","date":"2018-07-08T15:15:22.000Z","path":"2018/07/08/src目录结构分析/","text":"src目录结构及命名原则分析 src目录结构分析. ├── adapter -----> 适配器,处理拿到的数据,整理成对象或者别的能直接使用的数据 | ├── report.js -----> (驼峰命名：与api命名一致) | └── selectPhoneNumber.js -----> (驼峰命名: 与api命名一致) | ├── api -----> 通过后台接口拿到数据 | ├── report.js -----> (驼峰命名) | └── selectPhoneNumber.js -----> (驼峰命名) | ├── assets | ├── components -----> 组件,通过在 views 中的 vue 文件的调用并传入数据,然后渲染在页面中,复用性强 | ├── AreaCard.vue -----> (Pascal命名) | ├── Chart.vue | └── Entry.vue | ├── router -----> 路由 | └── index.js | ├── store -----> vuex | ├── modules -----> vuex模块 | | ├── clothesSize.js -----> (驼峰命名) | | ├── login.js | | └── user.js | └── index.js | ├── util -----> 自己封装的js | ├── fetch.js | └── index.js | └── views -----> 页面展示 ├── Report.vue -----> (Pascal命名: 与api命名一致) ├── Dormitory | ├── DormitoryStudent.vue -----> (Pascal命名) | ├── Edit.vue | └── index.vue └── Home.vue api —–&gt; adapter —–&gt; views —–&gt; 同一个页面：这三个文件夹的命名对应一致 或者 与 views 中的文件夹命名一致","tags":[{"name":"Vue","slug":"Vue","permalink":"https://shmilybaozi.github.io/tags/Vue/"}]},{"title":"前端开发环境配置","date":"2018-07-01T08:19:21.000Z","path":"2018/07/01/前端开发环境配置/","text":"前端开发环境配置、淘宝镜像及跨域处理 开发环境准备工作安装软件 NodeJS 10版本以上 [win]Cmder VS Code [win]Git NPM和Yarn添加淘宝镜像NPM设置淘宝镜像 查询当前配置的镜像 npm get registry // https://registry.npmjs.org/ 设置成淘宝镜像 npm config set registry http://registry.npm.taobao.org/ 换成原来的 npm config set registry https://registry.npmjs.org/ Yarn 设置淘宝镜像 查询当前配置的镜像 yarn config get registry // https://registry.yarnpkg.com 设置成淘宝镜像 yarn config set registry http://registry.npm.taobao.org/ 安装vue脚手架和 eslint[sudo] yarn global add vue-cli [sudo] yarn global add eslint [sudo] yarn global add eslint mocha 安装VS code插件 Auto Close Tag Auto Rename Tag ESLint HTML Snippets JavaScript Standard Format language-stylus Path Intellisense Vetur Vue 2 Snippets Settings Sync 同步插件 chrome浏览器跨域版本号49之前的跨域设置 下载并安装好chrome浏览器后在桌面找到浏览器快捷图标并点击鼠标右键的属性一栏。 在属性页面中的目标输入框...exe&quot;后加上 --disable-web-security 点击应用和确定后关闭属性页面，并打开chrome浏览器。 如果浏览器出现提示“你使用的是不受支持的命令标记–disable-web-security”，那么说明配置成功。 版本号49之后的chrome跨域设置 在电脑上新建一个目录，例如：C:\\MyChromeDevUserData 在属性页面中的目标输入框...exe&quot;后加上 --disable-web-security --user-data-dir=C:\\MyChromeDevUserData,–user-data-dir的值就是刚才新建的目录。 点击应用和确定后关闭属性页面，并打开chrome浏览器。 再次打开chrome，发现有“–disable-web-security”相关的提示，说明chrome又能正常跨域工作了。 其他 Chai 断言语法 如何使用 Mocha, Chai 和 SuperTest 写测试代码 如果报错 error An unexpected error occurred: &quot;https://registry.npm.taobao.org/axios: unable to verify the first certificate&quot;.就设置 npm/yarn config set strict-ssl false","tags":[{"name":"VSCode","slug":"VSCode","permalink":"https://shmilybaozi.github.io/tags/VSCode/"},{"name":"淘宝镜像","slug":"淘宝镜像","permalink":"https://shmilybaozi.github.io/tags/淘宝镜像/"},{"name":"跨域","slug":"跨域","permalink":"https://shmilybaozi.github.io/tags/跨域/"}]},{"title":"Yarn和 NPM命令","date":"2018-07-01T07:34:24.000Z","path":"2018/07/01/Yarn和NPM命令/","text":"Yarn和 NPM命令 Yarn和 NPM命令 NPM是随同 NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题 Yarn 是一个新的包管理器，用于替代现有的 npm 客户端或者其他兼容 npm 仓库的包管理工具。Yarn 保留了现有工作流的特性，优点是更快、更安全、更可靠。 命令 NPM Yarn 安装 新版的NodeJS 已经集成了NPM npm install -g yarn 升级 npm install npm -g 见Yarn升级 安装所有的依赖包 npm install yarn 安装某个依赖 npm install [package] --save/-S yarn add [package] 安装某个开发时依赖项目 npm install [package] --save-dev/-D yarn add [package] --dev 安装某个全局依赖项目 npm install [package] -g yarn global add [package] 更新某个依赖 npm update [package] --save/-S yarn upgrade [package] 删除某个依赖 npm uninstall [package] --save/-S yarn remove [package] 运行脚本 npm run yarn run 可以通过输入npm -v来测试是否成功安装 npm -v 6.2.0 NPM 常用命令 NPM提供了很多命令，使用npm help可查看所有命令。 使用npm help &lt;command&gt;可查看某条命令的详细帮助，例如npm help install 使用淘宝 NPM 镜像NPM和 Yarn添加淘宝镜像 Yarn升级通过msi安装升级 Yarn下载最新的yarn更新包 通过 msi 安装的 yarn 并不会覆盖通过 npm 安装的 yarn，两者同时存在。卸载的话，也是分开卸载的。 NPM加版本号安装虽然，我们不能通过npm install yarn -g的方法，获得最新的yarn。但是，我们已经知道了yarn的最新版的版本号，所以，我们可以直接指定版本号进行安装。 npm install yarn@1.9.2 -g 这样的话，就可以不使用msi，而还是采用更高大上的命令行模式安装最新版的yarn了。我们可以用npm view yarn version，查看NPM上的最新版本。 NPM 加 latest 安装npm install yarn@latest -g","tags":[{"name":"NPM","slug":"NPM","permalink":"https://shmilybaozi.github.io/tags/NPM/"},{"name":"Yarn","slug":"Yarn","permalink":"https://shmilybaozi.github.io/tags/Yarn/"}]}]