<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>hexo文章模板设置</title>
      <link href="/2018/11/05/hexo%E6%96%87%E7%AB%A0%E6%A8%A1%E6%9D%BF%E8%AE%BE%E7%BD%AE/"/>
      <url>/2018/11/05/hexo%E6%96%87%E7%AB%A0%E6%A8%A1%E6%9D%BF%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>hexo文章模板设置</p><a id="more"></a><!-- markdownlint-disable MD041 MD002--><h2 id="hexo文章模板设置"><a href="#hexo文章模板设置" class="headerlink" title="hexo文章模板设置"></a>hexo文章模板设置</h2><p>hexo 项目文件夹中的 scaffold 文件夹中的 <code>post.md</code> 和 <code>draft.md</code></p><p>对应就是 <code>hexo new [layout] &lt;title&gt;</code> 中的 <code>layout</code> , 默认为 <code>post</code>, 草稿为 <code>draft</code>, 如果标题包含空格的话，请使用引号括起来。</p><pre class="line-numbers language-bash"><code class="language-bash">---title: <span class="token punctuation">{</span><span class="token punctuation">{</span> title <span class="token punctuation">}</span><span class="token punctuation">}</span>tags:categories:description:date: <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token function">date</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>---点击阅读前文前, 首页能看到的文章的简短描述<span class="token operator">&lt;</span><span class="token operator">!</span>-- <span class="token function">more</span> --<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- markdownlint-disable MD041 MD002--<span class="token operator">></span> <span class="token comment" spellcheck="true"># 防止 markdownlint 报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="hexo-草稿"><a href="#hexo-草稿" class="headerlink" title="hexo 草稿"></a>hexo 草稿</h2><p>Hexo 的一种特殊布局：<code>draft</code>, 这种布局在建立时会被保存到 <code>source/_drafts</code> 文件夹, 您可通过 <code>publish</code> 命令将草稿移动到 <code>source/_posts</code> 文件夹。</p><p>该命令的使用方式与 <code>new</code> 十分类似, 您也可在命令中指定 <code>layout</code> 来指定布局。</p><pre class="line-numbers language-js"><code class="language-js">hexo publish <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>title<span class="token operator">></span> # 发表草稿<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>草稿默认不会显示在页面中, 您可在执行时加上 <code>--draft</code> 参数, 或是把 <code>render_drafts</code> 参数设为 <code>true</code> 来预览草稿。</p><h2 id="hexo-分类和标签"><a href="#hexo-分类和标签" class="headerlink" title="hexo 分类和标签"></a>hexo 分类和标签</h2><p><strong>分类</strong>具有顺序性和层次性。Hexo 不支持指定多个同级分类。</p><p><strong>标签</strong>没有顺序和层次。</p><pre class="line-numbers language-yml"><code class="language-yml">categories:- Diary- Lifetags:- PS3- Games<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上会使分类 <code>Life</code> 成为 <code>Diary</code> 的子分类, 而不是并列分类。</p><p>因此，有必要为您的文章选择<strong>尽可能准确的一个分类</strong></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue中使用 Webpack总结</title>
      <link href="/2018/08/07/Vue%E4%B8%AD%E4%BD%BF%E7%94%A8Webpack%E6%80%BB%E7%BB%93/"/>
      <url>/2018/08/07/Vue%E4%B8%AD%E4%BD%BF%E7%94%A8Webpack%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>Webpack 打包工具(模块打包器)</p><a id="more"></a><!-- markdownlint-disable MD041 MD002--><h2 id="Webpack结构"><a href="#Webpack结构" class="headerlink" title="Webpack结构"></a>Webpack结构</h2><p>Vue中 关于Webpack的配置文件有四个: (vue-cli版本@2.9.6)</p><ul><li>build文件夹<ul><li>webpack.base.conf.js 主要配置文件</li><li>webpack.dev.conf.js 开发环境配置文件</li><li>webpack.prod.conf.js 生产环境配置文件</li><li>webpack.test.conf.js 需要单元测试时的配置文件(不选择单元测试则没有该文件)</li></ul></li></ul><h2 id="webpack-base-conf-js"><a href="#webpack-base-conf-js" class="headerlink" title="webpack.base.conf.js"></a>webpack.base.conf.js</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token string">'use strict'</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> utils <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./utils'</span><span class="token punctuation">)</span><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../config'</span><span class="token punctuation">)</span><span class="token keyword">const</span> vueLoaderConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./vue-loader.conf'</span><span class="token punctuation">)</span><span class="token keyword">function</span> resolve <span class="token punctuation">(</span>dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'..'</span><span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> createLintingRule <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  test<span class="token punctuation">:</span> <span class="token regex">/\.(js|vue)$/</span><span class="token punctuation">,</span>  loader<span class="token punctuation">:</span> <span class="token string">'eslint-loader'</span><span class="token punctuation">,</span>  enforce<span class="token punctuation">:</span> <span class="token string">'pre'</span><span class="token punctuation">,</span>  include<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>    formatter<span class="token punctuation">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'eslint-friendly-formatter'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    emitWarning<span class="token punctuation">:</span> <span class="token operator">!</span>config<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>showEslintErrorsInOverlay  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 基础目录，绝对路径，用于从配置中解析入口起点(entry point)和 loader</span>  context<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 入口配置: 可以配置多入口</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    app<span class="token punctuation">:</span> <span class="token string">'./src/main.js'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 出口配置</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 出口路径: path必须是绝对路径</span>    path<span class="token punctuation">:</span> config<span class="token punctuation">.</span>build<span class="token punctuation">.</span>assetsRoot<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 出口文件名</span>    filename<span class="token punctuation">:</span> <span class="token string">'[name].js'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// [name]即入口名称</span>    <span class="token comment" spellcheck="true">// 对于按需加载(on-demand-load)或加载外部资源(external resources)（如图片、文件等）来说，output.publicPath 是很重要的选项。</span>    <span class="token comment" spellcheck="true">// 该选项的值是以 runtime(运行时) 或 loader(载入时) 所创建的每个 URL 为前缀。因此，在多数情况下，此选项的值都会以/结束。</span>    <span class="token comment" spellcheck="true">// 可能以下情况中的一种:</span>    publicPath<span class="token punctuation">:</span> <span class="token string">'https://cdn.example.com/assets/'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// CDN（总是 HTTPS 协议）</span>    publicPath<span class="token punctuation">:</span> <span class="token string">'//cdn.example.com/assets/'</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span> CDN（协议相同）    publicPath<span class="token punctuation">:</span> <span class="token string">'/assets/'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 相对于服务(server-relative)</span>    publicPath<span class="token punctuation">:</span> <span class="token string">'assets/'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 相对于 HTML 页面</span>    publicPath<span class="token punctuation">:</span> <span class="token string">'../assets/'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 相对于 HTML 页面</span>    publicPath<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 相对于 HTML 页面（目录相同）</span>    <span class="token comment" spellcheck="true">// Vue中: 判断环境变量的值,去对应的环境变量中寻找设置 config 文件夹中的 index.js</span>    publicPath<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">'production'</span>      <span class="token operator">?</span> config<span class="token punctuation">.</span>build<span class="token punctuation">.</span>assetsPublicPath <span class="token comment" spellcheck="true">// 默认为"/"，一般会修改为"./"</span>      <span class="token punctuation">:</span> config<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>assetsPublicPath <span class="token comment" spellcheck="true">// 默认为"/"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 配置模块如何解析</span>  resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 自动解析确定的扩展: 能够使用户在引入模块时不带扩展</span>    extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'.js'</span><span class="token punctuation">,</span> <span class="token string">'.vue'</span><span class="token punctuation">,</span> <span class="token string">'.json'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 创建 import 或 require 的别名，来确保模块引入变得更简单。</span>    alias<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">'vue$'</span><span class="token punctuation">:</span> <span class="token string">'vue/dist/vue.esm.js'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 在给定对象的键后的末尾添加 $,以表示精准匹配: 必须以 XXX 结尾</span>      <span class="token string">'@'</span><span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// js文件!!!中 @ 即表示为 src 文件夹, html 和 css 路径中不是</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 决定如何处理项目中的不同类型的模块</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建模块时，匹配请求的规则数组。这些规则能够修改模块的创建方式。这些规则能够对模块(module)应用 loader，或者修改解析器(parser)</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token operator">...</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>useEslint <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token function">createLintingRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.vue$/</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> <span class="token string">'vue-loader'</span><span class="token punctuation">,</span>        options<span class="token punctuation">:</span> vueLoaderConfig      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>        include<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'node_modules/webpack-dev-server/client'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(png|jpe?g|gif|svg)(\?.*)?$/</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>          limit<span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">,</span>          name<span class="token punctuation">:</span> utils<span class="token punctuation">.</span><span class="token function">assetsPath</span><span class="token punctuation">(</span><span class="token string">'img/[name].[hash:7].[ext]'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(mp4|webm|ogg|mp3|wav|flac|aac)(\?.*)?$/</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>          limit<span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">,</span>          name<span class="token punctuation">:</span> utils<span class="token punctuation">.</span><span class="token function">assetsPath</span><span class="token punctuation">(</span><span class="token string">'media/[name].[hash:7].[ext]'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(woff2?|eot|ttf|otf)(\?.*)?$/</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>          limit<span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">,</span>          name<span class="token punctuation">:</span> utils<span class="token punctuation">.</span><span class="token function">assetsPath</span><span class="token punctuation">(</span><span class="token string">'fonts/[name].[hash:7].[ext]'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  node<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// prevent webpack from injecting useless setImmediate polyfill because Vue</span>    <span class="token comment" spellcheck="true">// source contains it (although only uses it if it's native).</span>    setImmediate<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// prevent webpack from injecting mocks to Node native modules</span>    <span class="token comment" spellcheck="true">// that does not make sense for the client</span>    dgram<span class="token punctuation">:</span> <span class="token string">'empty'</span><span class="token punctuation">,</span>    fs<span class="token punctuation">:</span> <span class="token string">'empty'</span><span class="token punctuation">,</span>    net<span class="token punctuation">:</span> <span class="token string">'empty'</span><span class="token punctuation">,</span>    tls<span class="token punctuation">:</span> <span class="token string">'empty'</span><span class="token punctuation">,</span>    child_process<span class="token punctuation">:</span> <span class="token string">'empty'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在最新的 vue-cli 3.0 中, webpack 中的设置都隐藏到了 vue 内部, 通过设置 <code>vue.config.js</code> 来覆盖相关 webpack 设置</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>path.join 和 path.resolve区别</title>
      <link href="/2018/08/06/path.join%E5%92%8Cpath.resolve%E5%8C%BA%E5%88%AB/"/>
      <url>/2018/08/06/path.join%E5%92%8Cpath.resolve%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>path.join &amp; path.resolve</p><a id="more"></a><!-- markdownlint-disable MD041 MD002--><h2 id="path-join-path1-path2-…"><a href="#path-join-path1-path2-…" class="headerlink" title="path.join([path1][, path2][, …])"></a>path.join([path1][, path2][, …])</h2><p><code>path.join()</code>: 连接任意多个路径字符串。</p><p>注：如果连接后的路径字符串是一个长度为零的字符串, 则返回 <code>&#39;.&#39;</code>, 表示当前工作目录。</p><pre class="line-numbers language-js"><code class="language-js">path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'baz'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 返回</span><span class="token string">'/foo/bar/baz'</span><span class="token comment" spellcheck="true">// 不合法的字符串将抛出异常</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 抛出的异常</span>TypeError<span class="token punctuation">:</span> Arguments to path<span class="token punctuation">.</span>join must be strings'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="path-resolve-from…-to"><a href="#path-resolve-from…-to" class="headerlink" title="path.resolve([from…], to)"></a>path.resolve([from…], to)</h2><p><code>path.resolve()</code>: 将多个路径解析为一个规范化的绝对路径。</p><p>其处理方式类似于对这些路径逐一进行 <code>cd</code> 操作, 与 <code>cd</code> 操作不同的是, 这引起路径可以是文件, 并且可不必实际存在（<code>resolve()</code>方法不会利用底层的文件系统判断路径是否存在, 而只是进行路径字符串操作。）</p><p><code>path.resolve(&#39;foo/bar&#39;, &#39;/tmp/file/&#39;, &#39;..&#39;, &#39;a/../subFile&#39;)</code> 相当于:</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> foo/bar<span class="token function">cd</span> /tmp/file/<span class="token function">cd</span> <span class="token punctuation">..</span><span class="token function">cd</span> a/<span class="token punctuation">..</span>/subFile<span class="token function">pwd</span><span class="token comment" spellcheck="true"># Linux pwd命令用于显示工作目录。执行 pwd 指令可立刻得知您目前所在的工作目录的绝对路径名称。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js">path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'/foo/bar'</span><span class="token punctuation">,</span> <span class="token string">'./baz'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出结果为</span><span class="token string">'/foo/bar/baz'</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'/foo/bar'</span><span class="token punctuation">,</span> <span class="token string">'/tmp/file/'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出结果为</span><span class="token string">'/tmp/file'</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'wwwroot'</span><span class="token punctuation">,</span> <span class="token string">'static_files/png/'</span><span class="token punctuation">,</span> <span class="token string">'../gif/image.gif'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 当前的工作路径是 /home/myself/node, 则输出结果为</span><span class="token string">'/home/myself/node/wwwroot/static_files/gif/image.gif'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="两者的区别"><a href="#两者的区别" class="headerlink" title="两者的区别"></a>两者的区别</h2><ul><li><p><code>join</code> 是把各个 path 片段连接在一起， <code>resolve</code> 把<code>&#39;/&#39;</code> 当成根目录</p><pre class="line-numbers language-js"><code class="language-js">path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'/a'</span><span class="token punctuation">,</span> <span class="token string">'/b'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// '/a/b'</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'/a'</span><span class="token punctuation">,</span> <span class="token string">'/b'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// '/b'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>join</code> 直接拼接字段，<code>resolve</code> 解析路径并返回绝对路径</p><pre class="line-numbers language-js"><code class="language-js">path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b1'</span><span class="token punctuation">,</span> <span class="token string">'..'</span><span class="token punctuation">,</span> <span class="token string">'b2'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 'a/b2'</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b1'</span><span class="token punctuation">,</span> <span class="token string">'..'</span><span class="token punctuation">,</span> <span class="token string">'b2'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// '/home/myself/node/a/b2'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git更新与推送流程</title>
      <link href="/2018/07/29/Git%E6%9B%B4%E6%96%B0%E4%B8%8E%E6%8E%A8%E9%80%81%E6%B5%81%E7%A8%8B/"/>
      <url>/2018/07/29/Git%E6%9B%B4%E6%96%B0%E4%B8%8E%E6%8E%A8%E9%80%81%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>Git更新与推送流程</p><a id="more"></a><!-- markdownlint-disable MD041 MD002--><h2 id="Git更新与推送流程"><a href="#Git更新与推送流程" class="headerlink" title="Git更新与推送流程"></a>Git更新与推送流程</h2><ul><li>设置主仓库地址</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> remote add upstream https://repo-address<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>获取主仓库最新提交</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> pull upstream<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>将主仓库的 <code>master</code> 分支合并到本地的 <code>master</code> 分支</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> merge upstream/master master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>解决冲突并提交合并</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> commit -a -m <span class="token string">'merge upstream master'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>推送至远程仓库</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> push<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>提交Pull Request</li></ul><h2 id="自定义Git"><a href="#自定义Git" class="headerlink" title="自定义Git"></a>自定义Git</h2><h3 id="让Git显示颜色"><a href="#让Git显示颜色" class="headerlink" title="让Git显示颜色"></a>让Git显示颜色</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> config --global color.ui <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h3><ul><li><code>git st</code>表示<code>git status</code></li><li><code>git co</code>表示<code>git checkout</code></li><li><code>git ci</code>表示<code>git commit</code></li><li><code>git br</code>表示<code>git branch</code></li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> config --global alias.st status<span class="token function">git</span> config --global alias.co checkout<span class="token function">git</span> config --global alias.ci commit<span class="token function">git</span> config --global alias.br branch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>命令<code>git reset HEAD file</code>可以把暂存区的修改撤销掉（unstage），重新放回工作区。既然是一个unstage操作，就可以配置一个unstage别名：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> config --global alias.unstage <span class="token string">'reset HEAD'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>配置一个<code>git last</code>，让其显示最后一次提交信息：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> config --global alias.last <span class="token string">'log -1'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>还有人丧心病狂地把<code>lg</code>配置成了：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> config --global alias.lg <span class="token string">"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an>%Creset' --abbrev-commit"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>配置Git的时候，加上<code>--global</code>是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。<br>配置文件放哪了?每个仓库的Git配置文件都放在<code>.git/config</code>文件中<br>而当前用户的Git配置文件放在用户主目录下的一个隐藏文件<code>.gitconfig</code>中<br>别名就在<code>[alias]</code>后面，要删除别名，直接把对应的行删掉即可。<br>配置别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>alias<span class="token punctuation">]</span>  st <span class="token operator">=</span> status  co <span class="token operator">=</span> checkout  ci <span class="token operator">=</span> commit  br <span class="token operator">=</span> branch  unstage <span class="token operator">=</span> reset HEAD  last <span class="token operator">=</span> log -1  lg <span class="token operator">=</span> log --color --graph --pretty<span class="token operator">=</span>format:<span class="token string">'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an>%Creset'</span> --abbrev-commit  up <span class="token operator">=</span> upstream  og <span class="token operator">=</span> origin  ms <span class="token operator">=</span> master  mg <span class="token operator">=</span> merge  plp <span class="token operator">=</span> pull upstream  mgums <span class="token operator">=</span> merge upstream/master master  rap <span class="token operator">=</span> remote add upstream  rag <span class="token operator">=</span> remote add origin  psg <span class="token operator">=</span> push -u origin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>src目录结构分析</title>
      <link href="/2018/07/08/src%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/"/>
      <url>/2018/07/08/src%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>src目录结构及命名原则分析</p><a id="more"></a><!-- markdownlint-disable MD002 MD041--><h2 id="src目录结构分析"><a href="#src目录结构分析" class="headerlink" title="src目录结构分析"></a>src目录结构分析</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">.</span>├── adapter -----<span class="token operator">></span> 适配器,处理拿到的数据,整理成对象或者别的能直接使用的数据<span class="token operator">|</span>   ├── report.js -----<span class="token operator">></span> <span class="token punctuation">(</span>驼峰命名：与api命名一致<span class="token punctuation">)</span><span class="token operator">|</span>   └── selectPhoneNumber.js -----<span class="token operator">></span> <span class="token punctuation">(</span>驼峰命名: 与api命名一致<span class="token punctuation">)</span><span class="token operator">|</span>├── api -----<span class="token operator">></span> 通过后台接口拿到数据<span class="token operator">|</span>   ├── report.js -----<span class="token operator">></span> <span class="token punctuation">(</span>驼峰命名<span class="token punctuation">)</span><span class="token operator">|</span>   └── selectPhoneNumber.js -----<span class="token operator">></span> <span class="token punctuation">(</span>驼峰命名<span class="token punctuation">)</span><span class="token operator">|</span>├── assets -----<span class="token operator">></span> 存放图片<span class="token operator">|</span>├── components -----<span class="token operator">></span> 组件,通过在 views 中的 vue 文件的调用并传入数据,然后渲染在页面中,复用性强<span class="token operator">|</span>   ├── AreaCard.vue -----<span class="token operator">></span>  <span class="token punctuation">(</span>Pascal命名<span class="token punctuation">)</span><span class="token operator">|</span>   ├── Chart.vue<span class="token operator">|</span>   └── Entry.vue<span class="token operator">|</span>├── router -----<span class="token operator">></span> 路由<span class="token operator">|</span>   └── index.js<span class="token operator">|</span>├── store -----<span class="token operator">></span> vuex<span class="token operator">|</span>   ├── modules -----<span class="token operator">></span> vuex模块<span class="token operator">|</span>   <span class="token operator">|</span>   ├── clothesSize.js -----<span class="token operator">></span> <span class="token punctuation">(</span>驼峰命名<span class="token punctuation">)</span><span class="token operator">|</span>   <span class="token operator">|</span>   ├── login.js<span class="token operator">|</span>   <span class="token operator">|</span>   └── user.js<span class="token operator">|</span>   └── index.js<span class="token operator">|</span>├── util -----<span class="token operator">></span> 自己封装的 js<span class="token operator">|</span>   ├── fetch.js<span class="token operator">|</span>   └── index.js<span class="token operator">|</span>└── views -----<span class="token operator">></span> 页面展示    ├── Report.vue -----<span class="token operator">></span> <span class="token punctuation">(</span>Pascal命名: 与api命名一致<span class="token punctuation">)</span>    ├── Dormitory    <span class="token operator">|</span>   ├── DormitoryStudent.vue -----<span class="token operator">></span> <span class="token punctuation">(</span>Pascal命名<span class="token punctuation">)</span>    <span class="token operator">|</span>   ├── Edit.vue    <span class="token operator">|</span>   └── index.vue    └── Home.vue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注：api —–&gt; adapter —–&gt; views —–&gt; 同一个页面：这三个文件夹的命名对应一致 或者 api、adapter 与 views 中的文件夹命名一致</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端开发环境配置</title>
      <link href="/2018/07/01/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/07/01/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>前端开发环境配置、淘宝镜像及跨域处理</p><a id="more"></a><!-- markdownlint-disable MD041 MD002--><h2 id="开发环境准备工作"><a href="#开发环境准备工作" class="headerlink" title="开发环境准备工作"></a>开发环境准备工作</h2><h3 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h3><ul><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">NodeJS</a> 10版本以上</li><li>[win]<a href="http://cmder.net" target="_blank" rel="noopener">Cmder</a></li><li><a href="https://code.visualstudio.com" target="_blank" rel="noopener">VS Code</a></li><li>[win]<a href="https://github.com/waylau/git-for-win" target="_blank" rel="noopener">Git</a></li></ul><h3 id="NPM和Yarn添加淘宝镜像"><a href="#NPM和Yarn添加淘宝镜像" class="headerlink" title="NPM和Yarn添加淘宝镜像"></a>NPM和Yarn添加淘宝镜像</h3><h4 id="NPM设置淘宝镜像"><a href="#NPM设置淘宝镜像" class="headerlink" title="NPM设置淘宝镜像"></a>NPM设置淘宝镜像</h4><ul><li>查询当前配置的镜像</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> get registry  // https://registry.npmjs.org/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>设置成淘宝镜像</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> registry http://registry.npm.taobao.org/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>换成原来的</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npmjs.org/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Yarn-设置淘宝镜像"><a href="#Yarn-设置淘宝镜像" class="headerlink" title="Yarn 设置淘宝镜像"></a>Yarn 设置淘宝镜像</h4><ul><li>查询当前配置的镜像</li></ul><pre class="line-numbers language-bash"><code class="language-bash">yarn config get registry // https://registry.yarnpkg.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>设置成淘宝镜像</li></ul><pre class="line-numbers language-bash"><code class="language-bash">yarn config <span class="token keyword">set</span> registry http://registry.npm.taobao.org/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装vue脚手架和-eslint"><a href="#安装vue脚手架和-eslint" class="headerlink" title="安装vue脚手架和 eslint"></a>安装vue脚手架和 eslint</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>sudo<span class="token punctuation">]</span> yarn global add vue-cli<span class="token punctuation">[</span>sudo<span class="token punctuation">]</span> yarn global add eslint<span class="token punctuation">[</span>sudo<span class="token punctuation">]</span> yarn global add eslint mocha<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="安装VS-code插件"><a href="#安装VS-code插件" class="headerlink" title="安装VS code插件"></a>安装VS code插件</h3><ul><li>Auto Close Tag</li><li>Auto Rename Tag</li><li>ESLint</li><li>HTML Snippets</li><li>JavaScript Standard Format</li><li>language-stylus</li><li>Path Intellisense</li><li>Vetur</li><li>Vue 2 Snippets</li><li>Settings Sync 同步插件</li></ul><h3 id="chrome浏览器跨域"><a href="#chrome浏览器跨域" class="headerlink" title="chrome浏览器跨域"></a>chrome浏览器跨域</h3><h4 id="版本号49之前的跨域设置"><a href="#版本号49之前的跨域设置" class="headerlink" title="版本号49之前的跨域设置"></a>版本号49之前的跨域设置</h4><ol><li>下载并安装好chrome浏览器后在桌面找到浏览器快捷图标并点击鼠标右键的属性一栏。</li><li>在属性页面中的目标输入框<code>...exe&quot;</code>后加上 <code>--disable-web-security</code></li><li>点击应用和确定后关闭属性页面，并打开chrome浏览器。</li><li>如果浏览器出现提示“你使用的是不受支持的命令标记–disable-web-security”，那么说明配置成功。</li></ol><h4 id="版本号49之后的chrome跨域设置"><a href="#版本号49之后的chrome跨域设置" class="headerlink" title="版本号49之后的chrome跨域设置"></a>版本号49之后的chrome跨域设置</h4><ol><li>在电脑上新建一个目录，例如：C:\MyChromeDevUserData</li><li>在属性页面中的目标输入框<code>...exe&quot;</code>后加上 <code>--disable-web-security --user-data-dir=C:\MyChromeDevUserData</code>,–user-data-dir的值就是刚才新建的目录。</li><li>点击应用和确定后关闭属性页面，并打开chrome浏览器。</li><li>再次打开chrome，发现有“–disable-web-security”相关的提示，说明chrome又能正常跨域工作了。</li></ol><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li><a href="https://www.jianshu.com/p/f200a75a15d2" target="_blank" rel="noopener">Chai 断言语法</a></li><li><a href="https://log.zvz.im/2016/06/07/Make-your-Nodejs-API-robust/" target="_blank" rel="noopener">如何使用 Mocha, Chai 和 SuperTest 写测试代码</a></li></ul><p>如果报错 <code>error An unexpected error occurred: &quot;https://registry.npm.taobao.org/axios: unable to verify the first certificate&quot;.</code><br>就设置 <code>npm/yarn config set strict-ssl false</code></p>]]></content>
      
      
      <categories>
          
          <category> 前端工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
            <tag> 淘宝镜像 </tag>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Yarn 和 NPM 命令</title>
      <link href="/2018/07/01/Yarn%E5%92%8CNPM%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/07/01/Yarn%E5%92%8CNPM%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>Yarn 和 NPM 命令</p><a id="more"></a><!-- markdownlint-disable MD041 MD002--><h2 id="Yarn和-NPM命令"><a href="#Yarn和-NPM命令" class="headerlink" title="Yarn和 NPM命令"></a>Yarn和 NPM命令</h2><ul><li>NPM是随同 NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题</li><li>Yarn 是一个新的包管理器，用于替代现有的 npm 客户端或者其他兼容 npm 仓库的包管理工具。Yarn 保留了现有工作流的特性，优点是更快、更安全、更可靠。</li></ul><table><thead><tr><th>命令</th><th>NPM</th><th>Yarn</th></tr></thead><tbody><tr><td>安装</td><td>新版的NodeJS 已经集成了NPM</td><td><code>npm install -g yarn</code></td></tr><tr><td>升级</td><td><code>npm install npm -g</code></td><td>见<a href="#Yarn升级">Yarn升级</a></td></tr><tr><td>安装所有的依赖包</td><td><code>npm install</code></td><td><code>yarn</code></td></tr><tr><td>安装某个依赖</td><td><code>npm install [package] --save/-S</code></td><td><code>yarn add [package]</code></td></tr><tr><td>安装某个开发时依赖项目</td><td><code>npm install [package] --save-dev/-D</code></td><td><code>yarn add [package] --dev/-D</code></td></tr><tr><td>安装某个全局依赖项目</td><td><code>npm install [package] -g</code></td><td><code>yarn global add [package]</code></td></tr><tr><td>更新某个依赖</td><td><code>npm update [package]</code></td><td><code>yarn upgrade [package]</code></td></tr><tr><td>更新某个依赖到某个版本</td><td><code>npm update [package@version]</code></td><td><code>yarn upgrade [package@version]</code></td></tr><tr><td>更新某个依赖到最新版本</td><td><code>npm update [package@latest]</code></td><td><code>yarn upgrade [package] --latest</code></td></tr><tr><td>删除某个依赖</td><td><code>npm uninstall [package]</code></td><td><code>yarn remove [package]</code></td></tr><tr><td>运行脚本</td><td><code>npm run</code></td><td><code>yarn run</code></td></tr></tbody></table><ul><li>可以通过输入<code>npm -v</code>来测试是否成功安装</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> -v6.2.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="NPM-常用命令"><a href="#NPM-常用命令" class="headerlink" title="NPM 常用命令"></a>NPM 常用命令</h3><ul><li>NPM提供了很多命令，使用<code>npm help</code>可查看所有命令。</li><li>使用<code>npm help &lt;command&gt;</code>可查看某条命令的详细帮助，例如<code>npm help install</code></li></ul><h3 id="使用淘宝-NPM-镜像"><a href="#使用淘宝-NPM-镜像" class="headerlink" title="使用淘宝 NPM 镜像"></a>使用淘宝 NPM 镜像</h3><p><a href="/2018/07/01/前端开发环境配置/#NPM和Yarn添加淘宝镜像">NPM和 Yarn添加淘宝镜像</a></p><h3 id="Yarn升级"><a href="#Yarn升级" class="headerlink" title="Yarn升级"></a>Yarn升级</h3><h4 id="通过msi安装升级-Yarn"><a href="#通过msi安装升级-Yarn" class="headerlink" title="通过msi安装升级 Yarn"></a>通过msi安装升级 Yarn</h4><p><a href="https://yarnpkg.com/lang/zh-hans/docs/install/#windows-stable" target="_blank" rel="noopener">下载最新的yarn更新包</a></p><ul><li>通过 msi 安装的 yarn 并不会覆盖通过 npm 安装的 yarn，两者同时存在。卸载的话，也是分开卸载的。</li></ul><h4 id="NPM加版本号安装"><a href="#NPM加版本号安装" class="headerlink" title="NPM加版本号安装"></a>NPM加版本号安装</h4><p>虽然，我们不能通过<code>npm install yarn -g</code>的方法，获得最新的yarn。但是，我们已经知道了yarn的最新版的版本号，所以，我们可以直接指定版本号进行安装。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> yarn@1.9.2 -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样的话，就可以不使用msi，而还是采用更高大上的命令行模式安装最新版的yarn了。<br>我们可以用<code>npm view yarn version</code>，查看NPM上的最新版本。</p><h4 id="NPM-加-latest-安装"><a href="#NPM-加-latest-安装" class="headerlink" title="NPM 加 latest 安装"></a>NPM 加 latest 安装</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> yarn@latest -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NPM </tag>
            
            <tag> Yarn </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
